
parkingsensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003864  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014c  00800060  00003864  000038f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  008001ac  008001ac  00003a44  2**0
                  ALLOC
  3 .stab         0000324c  00000000  00000000  00003a44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000177c  00000000  00000000  00006c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000840c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000085ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000879e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000aba9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000bf2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000d108  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000d2c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000d5be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000df2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e6       	ldi	r30, 0x64	; 100
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3a       	cpi	r26, 0xAC	; 172
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac ea       	ldi	r26, 0xAC	; 172
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3b       	cpi	r26, 0xB3	; 179
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <main>
      8a:	0c 94 30 1c 	jmp	0x3860	; 0x3860 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b4 1b 	jmp	0x3768	; 0x3768 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e9       	ldi	r26, 0x95	; 149
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d0 1b 	jmp	0x37a0	; 0x37a0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c0 1b 	jmp	0x3780	; 0x3780 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 dc 1b 	jmp	0x37b8	; 0x37b8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c0 1b 	jmp	0x3780	; 0x3780 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 dc 1b 	jmp	0x37b8	; 0x37b8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b4 1b 	jmp	0x3768	; 0x3768 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e9       	ldi	r24, 0x95	; 149
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d0 1b 	jmp	0x37a0	; 0x37a0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bc 1b 	jmp	0x3778	; 0x3778 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 e9       	ldi	r22, 0x95	; 149
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d8 1b 	jmp	0x37b0	; 0x37b0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c0 1b 	jmp	0x3780	; 0x3780 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 dc 1b 	jmp	0x37b8	; 0x37b8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c0 1b 	jmp	0x3780	; 0x3780 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 dc 1b 	jmp	0x37b8	; 0x37b8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c0 1b 	jmp	0x3780	; 0x3780 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 dc 1b 	jmp	0x37b8	; 0x37b8 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 c4 1b 	jmp	0x3788	; 0x3788 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 e0 1b 	jmp	0x37c0	; 0x37c0 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 bc 1b 	jmp	0x3778	; 0x3778 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 d8 1b 	jmp	0x37b0	; 0x37b0 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e3 56       	subi	r30, 0x63	; 99
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	2f 93       	push	r18
     e3a:	3f 93       	push	r19
     e3c:	4f 93       	push	r20
     e3e:	5f 93       	push	r21
     e40:	6f 93       	push	r22
     e42:	7f 93       	push	r23
     e44:	8f 93       	push	r24
     e46:	9f 93       	push	r25
     e48:	af 93       	push	r26
     e4a:	bf 93       	push	r27
     e4c:	ef 93       	push	r30
     e4e:	ff 93       	push	r31
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     e58:	80 91 ac 01 	lds	r24, 0x01AC
     e5c:	90 91 ad 01 	lds	r25, 0x01AD
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	29 f0       	breq	.+10     	; 0xe6e <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     e64:	e0 91 ac 01 	lds	r30, 0x01AC
     e68:	f0 91 ad 01 	lds	r31, 0x01AD
     e6c:	09 95       	icall
	}
}
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	ff 91       	pop	r31
     e74:	ef 91       	pop	r30
     e76:	bf 91       	pop	r27
     e78:	af 91       	pop	r26
     e7a:	9f 91       	pop	r25
     e7c:	8f 91       	pop	r24
     e7e:	7f 91       	pop	r23
     e80:	6f 91       	pop	r22
     e82:	5f 91       	pop	r21
     e84:	4f 91       	pop	r20
     e86:	3f 91       	pop	r19
     e88:	2f 91       	pop	r18
     e8a:	0f 90       	pop	r0
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	0f 90       	pop	r0
     e90:	1f 90       	pop	r1
     e92:	18 95       	reti

00000e94 <ICU_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void ICU_init(const ICU_ConfigType * Config_Ptr)
{
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	00 d0       	rcall	.+0      	; 0xe9a <ICU_init+0x6>
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	9a 83       	std	Y+2, r25	; 0x02
     ea0:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DDRD &= ~(1<<PD6);
     ea2:	a1 e3       	ldi	r26, 0x31	; 49
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e1 e3       	ldi	r30, 0x31	; 49
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	8f 7b       	andi	r24, 0xBF	; 191
     eae:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
     eb0:	ef e4       	ldi	r30, 0x4F	; 79
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	8c e0       	ldi	r24, 0x0C	; 12
     eb6:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
     eb8:	ae e4       	ldi	r26, 0x4E	; 78
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	ee e4       	ldi	r30, 0x4E	; 78
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	98 2f       	mov	r25, r24
     ec4:	98 7f       	andi	r25, 0xF8	; 248
     ec6:	e9 81       	ldd	r30, Y+1	; 0x01
     ec8:	fa 81       	ldd	r31, Y+2	; 0x02
     eca:	80 81       	ld	r24, Z
     ecc:	89 2b       	or	r24, r25
     ece:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
     ed0:	ae e4       	ldi	r26, 0x4E	; 78
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	ee e4       	ldi	r30, 0x4E	; 78
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	28 2f       	mov	r18, r24
     edc:	2f 7b       	andi	r18, 0xBF	; 191
     ede:	e9 81       	ldd	r30, Y+1	; 0x01
     ee0:	fa 81       	ldd	r31, Y+2	; 0x02
     ee2:	81 81       	ldd	r24, Z+1	; 0x01
     ee4:	88 2f       	mov	r24, r24
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	00 24       	eor	r0, r0
     eea:	96 95       	lsr	r25
     eec:	87 95       	ror	r24
     eee:	07 94       	ror	r0
     ef0:	96 95       	lsr	r25
     ef2:	87 95       	ror	r24
     ef4:	07 94       	ror	r0
     ef6:	98 2f       	mov	r25, r24
     ef8:	80 2d       	mov	r24, r0
     efa:	82 2b       	or	r24, r18
     efc:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
     efe:	ec e4       	ldi	r30, 0x4C	; 76
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	11 82       	std	Z+1, r1	; 0x01
     f04:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
     f06:	e6 e4       	ldi	r30, 0x46	; 70
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	11 82       	std	Z+1, r1	; 0x01
     f0c:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
     f0e:	a9 e5       	ldi	r26, 0x59	; 89
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e9 e5       	ldi	r30, 0x59	; 89
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	80 62       	ori	r24, 0x20	; 32
     f1a:	8c 93       	st	X, r24
	sei();
     f1c:	78 94       	sei
}
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	08 95       	ret

00000f28 <ICU_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void ICU_setCallBack(void(*a_ptr)(void))
{
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	00 d0       	rcall	.+0      	; 0xf2e <ICU_setCallBack+0x6>
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	9a 83       	std	Y+2, r25	; 0x02
     f34:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	9a 81       	ldd	r25, Y+2	; 0x02
     f3a:	90 93 ad 01 	sts	0x01AD, r25
     f3e:	80 93 ac 01 	sts	0x01AC, r24
}
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <ICU_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType)
{
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	0f 92       	push	r0
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
     f58:	ae e4       	ldi	r26, 0x4E	; 78
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	ee e4       	ldi	r30, 0x4E	; 78
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	28 2f       	mov	r18, r24
     f64:	2f 7b       	andi	r18, 0xBF	; 191
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	88 2f       	mov	r24, r24
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	00 24       	eor	r0, r0
     f6e:	96 95       	lsr	r25
     f70:	87 95       	ror	r24
     f72:	07 94       	ror	r0
     f74:	96 95       	lsr	r25
     f76:	87 95       	ror	r24
     f78:	07 94       	ror	r0
     f7a:	98 2f       	mov	r25, r24
     f7c:	80 2d       	mov	r24, r0
     f7e:	82 2b       	or	r24, r18
     f80:	8c 93       	st	X, r24
}
     f82:	0f 90       	pop	r0
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	08 95       	ret

00000f8a <ICU_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 ICU_getInputCaptureValue(void)
{
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
     f92:	e6 e4       	ldi	r30, 0x46	; 70
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	91 81       	ldd	r25, Z+1	; 0x01
}
     f9a:	cf 91       	pop	r28
     f9c:	df 91       	pop	r29
     f9e:	08 95       	ret

00000fa0 <ICU_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void ICU_clearTimerValue(void)
{
     fa0:	df 93       	push	r29
     fa2:	cf 93       	push	r28
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
     fa8:	ec e4       	ldi	r30, 0x4C	; 76
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	11 82       	std	Z+1, r1	; 0x01
     fae:	10 82       	st	Z, r1
}
     fb0:	cf 91       	pop	r28
     fb2:	df 91       	pop	r29
     fb4:	08 95       	ret

00000fb6 <ICU_deInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void ICU_deInit(void)
{
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1/ICU Registers */
	TCCR1A = 0;
     fbe:	ef e4       	ldi	r30, 0x4F	; 79
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	10 82       	st	Z, r1
	TCCR1B = 0;
     fc4:	ee e4       	ldi	r30, 0x4E	; 78
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	10 82       	st	Z, r1
	TCNT1 = 0;
     fca:	ec e4       	ldi	r30, 0x4C	; 76
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	11 82       	std	Z+1, r1	; 0x01
     fd0:	10 82       	st	Z, r1
	ICR1 = 0;
     fd2:	e6 e4       	ldi	r30, 0x46	; 70
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	11 82       	std	Z+1, r1	; 0x01
     fd8:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
     fda:	a9 e5       	ldi	r26, 0x59	; 89
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e9 e5       	ldi	r30, 0x59	; 89
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	8f 7d       	andi	r24, 0xDF	; 223
     fe6:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
     fe8:	10 92 ad 01 	sts	0x01AD, r1
     fec:	10 92 ac 01 	sts	0x01AC, r1
}
     ff0:	cf 91       	pop	r28
     ff2:	df 91       	pop	r29
     ff4:	08 95       	ret

00000ff6 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     ff6:	df 93       	push	r29
     ff8:	cf 93       	push	r28
     ffa:	00 d0       	rcall	.+0      	; 0xffc <GPIO_setupPinDirection+0x6>
     ffc:	00 d0       	rcall	.+0      	; 0xffe <GPIO_setupPinDirection+0x8>
     ffe:	0f 92       	push	r0
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
    1004:	89 83       	std	Y+1, r24	; 0x01
    1006:	6a 83       	std	Y+2, r22	; 0x02
    1008:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
    100c:	88 30       	cpi	r24, 0x08	; 8
    100e:	08 f0       	brcs	.+2      	; 0x1012 <GPIO_setupPinDirection+0x1c>
    1010:	d5 c0       	rjmp	.+426    	; 0x11bc <GPIO_setupPinDirection+0x1c6>
    1012:	89 81       	ldd	r24, Y+1	; 0x01
    1014:	84 30       	cpi	r24, 0x04	; 4
    1016:	08 f0       	brcs	.+2      	; 0x101a <GPIO_setupPinDirection+0x24>
    1018:	d1 c0       	rjmp	.+418    	; 0x11bc <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	3d 83       	std	Y+5, r19	; 0x05
    1022:	2c 83       	std	Y+4, r18	; 0x04
    1024:	8c 81       	ldd	r24, Y+4	; 0x04
    1026:	9d 81       	ldd	r25, Y+5	; 0x05
    1028:	81 30       	cpi	r24, 0x01	; 1
    102a:	91 05       	cpc	r25, r1
    102c:	09 f4       	brne	.+2      	; 0x1030 <GPIO_setupPinDirection+0x3a>
    102e:	43 c0       	rjmp	.+134    	; 0x10b6 <GPIO_setupPinDirection+0xc0>
    1030:	2c 81       	ldd	r18, Y+4	; 0x04
    1032:	3d 81       	ldd	r19, Y+5	; 0x05
    1034:	22 30       	cpi	r18, 0x02	; 2
    1036:	31 05       	cpc	r19, r1
    1038:	2c f4       	brge	.+10     	; 0x1044 <GPIO_setupPinDirection+0x4e>
    103a:	8c 81       	ldd	r24, Y+4	; 0x04
    103c:	9d 81       	ldd	r25, Y+5	; 0x05
    103e:	00 97       	sbiw	r24, 0x00	; 0
    1040:	71 f0       	breq	.+28     	; 0x105e <GPIO_setupPinDirection+0x68>
    1042:	bc c0       	rjmp	.+376    	; 0x11bc <GPIO_setupPinDirection+0x1c6>
    1044:	2c 81       	ldd	r18, Y+4	; 0x04
    1046:	3d 81       	ldd	r19, Y+5	; 0x05
    1048:	22 30       	cpi	r18, 0x02	; 2
    104a:	31 05       	cpc	r19, r1
    104c:	09 f4       	brne	.+2      	; 0x1050 <GPIO_setupPinDirection+0x5a>
    104e:	5f c0       	rjmp	.+190    	; 0x110e <GPIO_setupPinDirection+0x118>
    1050:	8c 81       	ldd	r24, Y+4	; 0x04
    1052:	9d 81       	ldd	r25, Y+5	; 0x05
    1054:	83 30       	cpi	r24, 0x03	; 3
    1056:	91 05       	cpc	r25, r1
    1058:	09 f4       	brne	.+2      	; 0x105c <GPIO_setupPinDirection+0x66>
    105a:	85 c0       	rjmp	.+266    	; 0x1166 <GPIO_setupPinDirection+0x170>
    105c:	af c0       	rjmp	.+350    	; 0x11bc <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    105e:	8b 81       	ldd	r24, Y+3	; 0x03
    1060:	81 30       	cpi	r24, 0x01	; 1
    1062:	a1 f4       	brne	.+40     	; 0x108c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1064:	aa e3       	ldi	r26, 0x3A	; 58
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	ea e3       	ldi	r30, 0x3A	; 58
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	48 2f       	mov	r20, r24
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 2e       	mov	r0, r18
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <GPIO_setupPinDirection+0x8c>
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	0a 94       	dec	r0
    1084:	e2 f7       	brpl	.-8      	; 0x107e <GPIO_setupPinDirection+0x88>
    1086:	84 2b       	or	r24, r20
    1088:	8c 93       	st	X, r24
    108a:	98 c0       	rjmp	.+304    	; 0x11bc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    108c:	aa e3       	ldi	r26, 0x3A	; 58
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	ea e3       	ldi	r30, 0x3A	; 58
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	48 2f       	mov	r20, r24
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	02 2e       	mov	r0, r18
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <GPIO_setupPinDirection+0xb4>
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	0a 94       	dec	r0
    10ac:	e2 f7       	brpl	.-8      	; 0x10a6 <GPIO_setupPinDirection+0xb0>
    10ae:	80 95       	com	r24
    10b0:	84 23       	and	r24, r20
    10b2:	8c 93       	st	X, r24
    10b4:	83 c0       	rjmp	.+262    	; 0x11bc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	81 30       	cpi	r24, 0x01	; 1
    10ba:	a1 f4       	brne	.+40     	; 0x10e4 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    10bc:	a7 e3       	ldi	r26, 0x37	; 55
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e7 e3       	ldi	r30, 0x37	; 55
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <GPIO_setupPinDirection+0xe4>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <GPIO_setupPinDirection+0xe0>
    10de:	84 2b       	or	r24, r20
    10e0:	8c 93       	st	X, r24
    10e2:	6c c0       	rjmp	.+216    	; 0x11bc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    10e4:	a7 e3       	ldi	r26, 0x37	; 55
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e7 e3       	ldi	r30, 0x37	; 55
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <GPIO_setupPinDirection+0x10c>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <GPIO_setupPinDirection+0x108>
    1106:	80 95       	com	r24
    1108:	84 23       	and	r24, r20
    110a:	8c 93       	st	X, r24
    110c:	57 c0       	rjmp	.+174    	; 0x11bc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	81 30       	cpi	r24, 0x01	; 1
    1112:	a1 f4       	brne	.+40     	; 0x113c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1114:	a4 e3       	ldi	r26, 0x34	; 52
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e4 e3       	ldi	r30, 0x34	; 52
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	48 2f       	mov	r20, r24
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	02 2e       	mov	r0, r18
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <GPIO_setupPinDirection+0x13c>
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	0a 94       	dec	r0
    1134:	e2 f7       	brpl	.-8      	; 0x112e <GPIO_setupPinDirection+0x138>
    1136:	84 2b       	or	r24, r20
    1138:	8c 93       	st	X, r24
    113a:	40 c0       	rjmp	.+128    	; 0x11bc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    113c:	a4 e3       	ldi	r26, 0x34	; 52
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e4 e3       	ldi	r30, 0x34	; 52
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	48 2f       	mov	r20, r24
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	02 2e       	mov	r0, r18
    1154:	02 c0       	rjmp	.+4      	; 0x115a <GPIO_setupPinDirection+0x164>
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	0a 94       	dec	r0
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <GPIO_setupPinDirection+0x160>
    115e:	80 95       	com	r24
    1160:	84 23       	and	r24, r20
    1162:	8c 93       	st	X, r24
    1164:	2b c0       	rjmp	.+86     	; 0x11bc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	a1 f4       	brne	.+40     	; 0x1194 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    116c:	a1 e3       	ldi	r26, 0x31	; 49
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	e1 e3       	ldi	r30, 0x31	; 49
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	48 2f       	mov	r20, r24
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	28 2f       	mov	r18, r24
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	02 2e       	mov	r0, r18
    1184:	02 c0       	rjmp	.+4      	; 0x118a <GPIO_setupPinDirection+0x194>
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	0a 94       	dec	r0
    118c:	e2 f7       	brpl	.-8      	; 0x1186 <GPIO_setupPinDirection+0x190>
    118e:	84 2b       	or	r24, r20
    1190:	8c 93       	st	X, r24
    1192:	14 c0       	rjmp	.+40     	; 0x11bc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1194:	a1 e3       	ldi	r26, 0x31	; 49
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e1 e3       	ldi	r30, 0x31	; 49
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	48 2f       	mov	r20, r24
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	02 2e       	mov	r0, r18
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <GPIO_setupPinDirection+0x1bc>
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	0a 94       	dec	r0
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <GPIO_setupPinDirection+0x1b8>
    11b6:	80 95       	com	r24
    11b8:	84 23       	and	r24, r20
    11ba:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <GPIO_writePin+0x6>
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <GPIO_writePin+0x8>
    11d4:	0f 92       	push	r0
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	6a 83       	std	Y+2, r22	; 0x02
    11de:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	88 30       	cpi	r24, 0x08	; 8
    11e4:	08 f0       	brcs	.+2      	; 0x11e8 <GPIO_writePin+0x1c>
    11e6:	d5 c0       	rjmp	.+426    	; 0x1392 <GPIO_writePin+0x1c6>
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	84 30       	cpi	r24, 0x04	; 4
    11ec:	08 f0       	brcs	.+2      	; 0x11f0 <GPIO_writePin+0x24>
    11ee:	d1 c0       	rjmp	.+418    	; 0x1392 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	3d 83       	std	Y+5, r19	; 0x05
    11f8:	2c 83       	std	Y+4, r18	; 0x04
    11fa:	8c 81       	ldd	r24, Y+4	; 0x04
    11fc:	9d 81       	ldd	r25, Y+5	; 0x05
    11fe:	81 30       	cpi	r24, 0x01	; 1
    1200:	91 05       	cpc	r25, r1
    1202:	09 f4       	brne	.+2      	; 0x1206 <GPIO_writePin+0x3a>
    1204:	43 c0       	rjmp	.+134    	; 0x128c <GPIO_writePin+0xc0>
    1206:	2c 81       	ldd	r18, Y+4	; 0x04
    1208:	3d 81       	ldd	r19, Y+5	; 0x05
    120a:	22 30       	cpi	r18, 0x02	; 2
    120c:	31 05       	cpc	r19, r1
    120e:	2c f4       	brge	.+10     	; 0x121a <GPIO_writePin+0x4e>
    1210:	8c 81       	ldd	r24, Y+4	; 0x04
    1212:	9d 81       	ldd	r25, Y+5	; 0x05
    1214:	00 97       	sbiw	r24, 0x00	; 0
    1216:	71 f0       	breq	.+28     	; 0x1234 <GPIO_writePin+0x68>
    1218:	bc c0       	rjmp	.+376    	; 0x1392 <GPIO_writePin+0x1c6>
    121a:	2c 81       	ldd	r18, Y+4	; 0x04
    121c:	3d 81       	ldd	r19, Y+5	; 0x05
    121e:	22 30       	cpi	r18, 0x02	; 2
    1220:	31 05       	cpc	r19, r1
    1222:	09 f4       	brne	.+2      	; 0x1226 <GPIO_writePin+0x5a>
    1224:	5f c0       	rjmp	.+190    	; 0x12e4 <GPIO_writePin+0x118>
    1226:	8c 81       	ldd	r24, Y+4	; 0x04
    1228:	9d 81       	ldd	r25, Y+5	; 0x05
    122a:	83 30       	cpi	r24, 0x03	; 3
    122c:	91 05       	cpc	r25, r1
    122e:	09 f4       	brne	.+2      	; 0x1232 <GPIO_writePin+0x66>
    1230:	85 c0       	rjmp	.+266    	; 0x133c <GPIO_writePin+0x170>
    1232:	af c0       	rjmp	.+350    	; 0x1392 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	81 30       	cpi	r24, 0x01	; 1
    1238:	a1 f4       	brne	.+40     	; 0x1262 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    123a:	ab e3       	ldi	r26, 0x3B	; 59
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	eb e3       	ldi	r30, 0x3B	; 59
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	48 2f       	mov	r20, r24
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	02 2e       	mov	r0, r18
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <GPIO_writePin+0x8c>
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	0a 94       	dec	r0
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <GPIO_writePin+0x88>
    125c:	84 2b       	or	r24, r20
    125e:	8c 93       	st	X, r24
    1260:	98 c0       	rjmp	.+304    	; 0x1392 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1262:	ab e3       	ldi	r26, 0x3B	; 59
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	eb e3       	ldi	r30, 0x3B	; 59
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	48 2f       	mov	r20, r24
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	02 2e       	mov	r0, r18
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <GPIO_writePin+0xb4>
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	0a 94       	dec	r0
    1282:	e2 f7       	brpl	.-8      	; 0x127c <GPIO_writePin+0xb0>
    1284:	80 95       	com	r24
    1286:	84 23       	and	r24, r20
    1288:	8c 93       	st	X, r24
    128a:	83 c0       	rjmp	.+262    	; 0x1392 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    128c:	8b 81       	ldd	r24, Y+3	; 0x03
    128e:	81 30       	cpi	r24, 0x01	; 1
    1290:	a1 f4       	brne	.+40     	; 0x12ba <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1292:	a8 e3       	ldi	r26, 0x38	; 56
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e8 e3       	ldi	r30, 0x38	; 56
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	48 2f       	mov	r20, r24
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	02 2e       	mov	r0, r18
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <GPIO_writePin+0xe4>
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	0a 94       	dec	r0
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <GPIO_writePin+0xe0>
    12b4:	84 2b       	or	r24, r20
    12b6:	8c 93       	st	X, r24
    12b8:	6c c0       	rjmp	.+216    	; 0x1392 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    12ba:	a8 e3       	ldi	r26, 0x38	; 56
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e8 e3       	ldi	r30, 0x38	; 56
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	48 2f       	mov	r20, r24
    12c6:	8a 81       	ldd	r24, Y+2	; 0x02
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	02 2e       	mov	r0, r18
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <GPIO_writePin+0x10c>
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	0a 94       	dec	r0
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <GPIO_writePin+0x108>
    12dc:	80 95       	com	r24
    12de:	84 23       	and	r24, r20
    12e0:	8c 93       	st	X, r24
    12e2:	57 c0       	rjmp	.+174    	; 0x1392 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	81 30       	cpi	r24, 0x01	; 1
    12e8:	a1 f4       	brne	.+40     	; 0x1312 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    12ea:	a5 e3       	ldi	r26, 0x35	; 53
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e5 e3       	ldi	r30, 0x35	; 53
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	48 2f       	mov	r20, r24
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 2e       	mov	r0, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <GPIO_writePin+0x13c>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	0a 94       	dec	r0
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <GPIO_writePin+0x138>
    130c:	84 2b       	or	r24, r20
    130e:	8c 93       	st	X, r24
    1310:	40 c0       	rjmp	.+128    	; 0x1392 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1312:	a5 e3       	ldi	r26, 0x35	; 53
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e5 e3       	ldi	r30, 0x35	; 53
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	48 2f       	mov	r20, r24
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	02 2e       	mov	r0, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <GPIO_writePin+0x164>
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	0a 94       	dec	r0
    1332:	e2 f7       	brpl	.-8      	; 0x132c <GPIO_writePin+0x160>
    1334:	80 95       	com	r24
    1336:	84 23       	and	r24, r20
    1338:	8c 93       	st	X, r24
    133a:	2b c0       	rjmp	.+86     	; 0x1392 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	81 30       	cpi	r24, 0x01	; 1
    1340:	a1 f4       	brne	.+40     	; 0x136a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1342:	a2 e3       	ldi	r26, 0x32	; 50
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e2 e3       	ldi	r30, 0x32	; 50
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	48 2f       	mov	r20, r24
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	02 2e       	mov	r0, r18
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <GPIO_writePin+0x194>
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	0a 94       	dec	r0
    1362:	e2 f7       	brpl	.-8      	; 0x135c <GPIO_writePin+0x190>
    1364:	84 2b       	or	r24, r20
    1366:	8c 93       	st	X, r24
    1368:	14 c0       	rjmp	.+40     	; 0x1392 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    136a:	a2 e3       	ldi	r26, 0x32	; 50
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e2 e3       	ldi	r30, 0x32	; 50
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	48 2f       	mov	r20, r24
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	02 2e       	mov	r0, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <GPIO_writePin+0x1bc>
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	0a 94       	dec	r0
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <GPIO_writePin+0x1b8>
    138c:	80 95       	com	r24
    138e:	84 23       	and	r24, r20
    1390:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	cf 91       	pop	r28
    139e:	df 91       	pop	r29
    13a0:	08 95       	ret

000013a2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    13a2:	df 93       	push	r29
    13a4:	cf 93       	push	r28
    13a6:	00 d0       	rcall	.+0      	; 0x13a8 <GPIO_readPin+0x6>
    13a8:	00 d0       	rcall	.+0      	; 0x13aa <GPIO_readPin+0x8>
    13aa:	0f 92       	push	r0
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	8a 83       	std	Y+2, r24	; 0x02
    13b2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    13b4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	88 30       	cpi	r24, 0x08	; 8
    13ba:	08 f0       	brcs	.+2      	; 0x13be <GPIO_readPin+0x1c>
    13bc:	84 c0       	rjmp	.+264    	; 0x14c6 <GPIO_readPin+0x124>
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	84 30       	cpi	r24, 0x04	; 4
    13c2:	08 f0       	brcs	.+2      	; 0x13c6 <GPIO_readPin+0x24>
    13c4:	80 c0       	rjmp	.+256    	; 0x14c6 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	3d 83       	std	Y+5, r19	; 0x05
    13ce:	2c 83       	std	Y+4, r18	; 0x04
    13d0:	4c 81       	ldd	r20, Y+4	; 0x04
    13d2:	5d 81       	ldd	r21, Y+5	; 0x05
    13d4:	41 30       	cpi	r20, 0x01	; 1
    13d6:	51 05       	cpc	r21, r1
    13d8:	79 f1       	breq	.+94     	; 0x1438 <GPIO_readPin+0x96>
    13da:	8c 81       	ldd	r24, Y+4	; 0x04
    13dc:	9d 81       	ldd	r25, Y+5	; 0x05
    13de:	82 30       	cpi	r24, 0x02	; 2
    13e0:	91 05       	cpc	r25, r1
    13e2:	34 f4       	brge	.+12     	; 0x13f0 <GPIO_readPin+0x4e>
    13e4:	2c 81       	ldd	r18, Y+4	; 0x04
    13e6:	3d 81       	ldd	r19, Y+5	; 0x05
    13e8:	21 15       	cp	r18, r1
    13ea:	31 05       	cpc	r19, r1
    13ec:	69 f0       	breq	.+26     	; 0x1408 <GPIO_readPin+0x66>
    13ee:	6b c0       	rjmp	.+214    	; 0x14c6 <GPIO_readPin+0x124>
    13f0:	4c 81       	ldd	r20, Y+4	; 0x04
    13f2:	5d 81       	ldd	r21, Y+5	; 0x05
    13f4:	42 30       	cpi	r20, 0x02	; 2
    13f6:	51 05       	cpc	r21, r1
    13f8:	b9 f1       	breq	.+110    	; 0x1468 <GPIO_readPin+0xc6>
    13fa:	8c 81       	ldd	r24, Y+4	; 0x04
    13fc:	9d 81       	ldd	r25, Y+5	; 0x05
    13fe:	83 30       	cpi	r24, 0x03	; 3
    1400:	91 05       	cpc	r25, r1
    1402:	09 f4       	brne	.+2      	; 0x1406 <GPIO_readPin+0x64>
    1404:	49 c0       	rjmp	.+146    	; 0x1498 <GPIO_readPin+0xf6>
    1406:	5f c0       	rjmp	.+190    	; 0x14c6 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1408:	e9 e3       	ldi	r30, 0x39	; 57
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	8b 81       	ldd	r24, Y+3	; 0x03
    1414:	88 2f       	mov	r24, r24
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	a9 01       	movw	r20, r18
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <GPIO_readPin+0x7e>
    141c:	55 95       	asr	r21
    141e:	47 95       	ror	r20
    1420:	8a 95       	dec	r24
    1422:	e2 f7       	brpl	.-8      	; 0x141c <GPIO_readPin+0x7a>
    1424:	ca 01       	movw	r24, r20
    1426:	81 70       	andi	r24, 0x01	; 1
    1428:	90 70       	andi	r25, 0x00	; 0
    142a:	88 23       	and	r24, r24
    142c:	19 f0       	breq	.+6      	; 0x1434 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	89 83       	std	Y+1, r24	; 0x01
    1432:	49 c0       	rjmp	.+146    	; 0x14c6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1434:	19 82       	std	Y+1, r1	; 0x01
    1436:	47 c0       	rjmp	.+142    	; 0x14c6 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1438:	e6 e3       	ldi	r30, 0x36	; 54
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	88 2f       	mov	r24, r24
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	a9 01       	movw	r20, r18
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <GPIO_readPin+0xae>
    144c:	55 95       	asr	r21
    144e:	47 95       	ror	r20
    1450:	8a 95       	dec	r24
    1452:	e2 f7       	brpl	.-8      	; 0x144c <GPIO_readPin+0xaa>
    1454:	ca 01       	movw	r24, r20
    1456:	81 70       	andi	r24, 0x01	; 1
    1458:	90 70       	andi	r25, 0x00	; 0
    145a:	88 23       	and	r24, r24
    145c:	19 f0       	breq	.+6      	; 0x1464 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	89 83       	std	Y+1, r24	; 0x01
    1462:	31 c0       	rjmp	.+98     	; 0x14c6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1464:	19 82       	std	Y+1, r1	; 0x01
    1466:	2f c0       	rjmp	.+94     	; 0x14c6 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1468:	e3 e3       	ldi	r30, 0x33	; 51
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	88 2f       	mov	r24, r24
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	a9 01       	movw	r20, r18
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <GPIO_readPin+0xde>
    147c:	55 95       	asr	r21
    147e:	47 95       	ror	r20
    1480:	8a 95       	dec	r24
    1482:	e2 f7       	brpl	.-8      	; 0x147c <GPIO_readPin+0xda>
    1484:	ca 01       	movw	r24, r20
    1486:	81 70       	andi	r24, 0x01	; 1
    1488:	90 70       	andi	r25, 0x00	; 0
    148a:	88 23       	and	r24, r24
    148c:	19 f0       	breq	.+6      	; 0x1494 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	89 83       	std	Y+1, r24	; 0x01
    1492:	19 c0       	rjmp	.+50     	; 0x14c6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1494:	19 82       	std	Y+1, r1	; 0x01
    1496:	17 c0       	rjmp	.+46     	; 0x14c6 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1498:	e0 e3       	ldi	r30, 0x30	; 48
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	88 2f       	mov	r24, r24
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	a9 01       	movw	r20, r18
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <GPIO_readPin+0x10e>
    14ac:	55 95       	asr	r21
    14ae:	47 95       	ror	r20
    14b0:	8a 95       	dec	r24
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <GPIO_readPin+0x10a>
    14b4:	ca 01       	movw	r24, r20
    14b6:	81 70       	andi	r24, 0x01	; 1
    14b8:	90 70       	andi	r25, 0x00	; 0
    14ba:	88 23       	and	r24, r24
    14bc:	19 f0       	breq	.+6      	; 0x14c4 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	89 83       	std	Y+1, r24	; 0x01
    14c2:	01 c0       	rjmp	.+2      	; 0x14c6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14c4:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	0f 90       	pop	r0
    14d2:	cf 91       	pop	r28
    14d4:	df 91       	pop	r29
    14d6:	08 95       	ret

000014d8 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    14d8:	df 93       	push	r29
    14da:	cf 93       	push	r28
    14dc:	00 d0       	rcall	.+0      	; 0x14de <GPIO_setupPortDirection+0x6>
    14de:	00 d0       	rcall	.+0      	; 0x14e0 <GPIO_setupPortDirection+0x8>
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	89 83       	std	Y+1, r24	; 0x01
    14e6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	84 30       	cpi	r24, 0x04	; 4
    14ec:	90 f5       	brcc	.+100    	; 0x1552 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    14ee:	89 81       	ldd	r24, Y+1	; 0x01
    14f0:	28 2f       	mov	r18, r24
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	3c 83       	std	Y+4, r19	; 0x04
    14f6:	2b 83       	std	Y+3, r18	; 0x03
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
    14fa:	9c 81       	ldd	r25, Y+4	; 0x04
    14fc:	81 30       	cpi	r24, 0x01	; 1
    14fe:	91 05       	cpc	r25, r1
    1500:	d1 f0       	breq	.+52     	; 0x1536 <GPIO_setupPortDirection+0x5e>
    1502:	2b 81       	ldd	r18, Y+3	; 0x03
    1504:	3c 81       	ldd	r19, Y+4	; 0x04
    1506:	22 30       	cpi	r18, 0x02	; 2
    1508:	31 05       	cpc	r19, r1
    150a:	2c f4       	brge	.+10     	; 0x1516 <GPIO_setupPortDirection+0x3e>
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	9c 81       	ldd	r25, Y+4	; 0x04
    1510:	00 97       	sbiw	r24, 0x00	; 0
    1512:	61 f0       	breq	.+24     	; 0x152c <GPIO_setupPortDirection+0x54>
    1514:	1e c0       	rjmp	.+60     	; 0x1552 <GPIO_setupPortDirection+0x7a>
    1516:	2b 81       	ldd	r18, Y+3	; 0x03
    1518:	3c 81       	ldd	r19, Y+4	; 0x04
    151a:	22 30       	cpi	r18, 0x02	; 2
    151c:	31 05       	cpc	r19, r1
    151e:	81 f0       	breq	.+32     	; 0x1540 <GPIO_setupPortDirection+0x68>
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	9c 81       	ldd	r25, Y+4	; 0x04
    1524:	83 30       	cpi	r24, 0x03	; 3
    1526:	91 05       	cpc	r25, r1
    1528:	81 f0       	breq	.+32     	; 0x154a <GPIO_setupPortDirection+0x72>
    152a:	13 c0       	rjmp	.+38     	; 0x1552 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    152c:	ea e3       	ldi	r30, 0x3A	; 58
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	80 83       	st	Z, r24
    1534:	0e c0       	rjmp	.+28     	; 0x1552 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1536:	e7 e3       	ldi	r30, 0x37	; 55
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
    153c:	80 83       	st	Z, r24
    153e:	09 c0       	rjmp	.+18     	; 0x1552 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1540:	e4 e3       	ldi	r30, 0x34	; 52
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	80 83       	st	Z, r24
    1548:	04 c0       	rjmp	.+8      	; 0x1552 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    154a:	e1 e3       	ldi	r30, 0x31	; 49
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	80 83       	st	Z, r24
			break;
		}
	}
}
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	cf 91       	pop	r28
    155c:	df 91       	pop	r29
    155e:	08 95       	ret

00001560 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1560:	df 93       	push	r29
    1562:	cf 93       	push	r28
    1564:	00 d0       	rcall	.+0      	; 0x1566 <GPIO_writePort+0x6>
    1566:	00 d0       	rcall	.+0      	; 0x1568 <GPIO_writePort+0x8>
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62
    156c:	89 83       	std	Y+1, r24	; 0x01
    156e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	84 30       	cpi	r24, 0x04	; 4
    1574:	90 f5       	brcc	.+100    	; 0x15da <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	3c 83       	std	Y+4, r19	; 0x04
    157e:	2b 83       	std	Y+3, r18	; 0x03
    1580:	8b 81       	ldd	r24, Y+3	; 0x03
    1582:	9c 81       	ldd	r25, Y+4	; 0x04
    1584:	81 30       	cpi	r24, 0x01	; 1
    1586:	91 05       	cpc	r25, r1
    1588:	d1 f0       	breq	.+52     	; 0x15be <GPIO_writePort+0x5e>
    158a:	2b 81       	ldd	r18, Y+3	; 0x03
    158c:	3c 81       	ldd	r19, Y+4	; 0x04
    158e:	22 30       	cpi	r18, 0x02	; 2
    1590:	31 05       	cpc	r19, r1
    1592:	2c f4       	brge	.+10     	; 0x159e <GPIO_writePort+0x3e>
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	9c 81       	ldd	r25, Y+4	; 0x04
    1598:	00 97       	sbiw	r24, 0x00	; 0
    159a:	61 f0       	breq	.+24     	; 0x15b4 <GPIO_writePort+0x54>
    159c:	1e c0       	rjmp	.+60     	; 0x15da <GPIO_writePort+0x7a>
    159e:	2b 81       	ldd	r18, Y+3	; 0x03
    15a0:	3c 81       	ldd	r19, Y+4	; 0x04
    15a2:	22 30       	cpi	r18, 0x02	; 2
    15a4:	31 05       	cpc	r19, r1
    15a6:	81 f0       	breq	.+32     	; 0x15c8 <GPIO_writePort+0x68>
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	9c 81       	ldd	r25, Y+4	; 0x04
    15ac:	83 30       	cpi	r24, 0x03	; 3
    15ae:	91 05       	cpc	r25, r1
    15b0:	81 f0       	breq	.+32     	; 0x15d2 <GPIO_writePort+0x72>
    15b2:	13 c0       	rjmp	.+38     	; 0x15da <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    15b4:	eb e3       	ldi	r30, 0x3B	; 59
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	80 83       	st	Z, r24
    15bc:	0e c0       	rjmp	.+28     	; 0x15da <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    15be:	e8 e3       	ldi	r30, 0x38	; 56
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	80 83       	st	Z, r24
    15c6:	09 c0       	rjmp	.+18     	; 0x15da <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    15c8:	e5 e3       	ldi	r30, 0x35	; 53
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	80 83       	st	Z, r24
    15d0:	04 c0       	rjmp	.+8      	; 0x15da <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    15d2:	e2 e3       	ldi	r30, 0x32	; 50
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	80 83       	st	Z, r24
			break;
		}
	}
}
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	0f 90       	pop	r0
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	08 95       	ret

000015e8 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	00 d0       	rcall	.+0      	; 0x15ee <GPIO_readPort+0x6>
    15ee:	00 d0       	rcall	.+0      	; 0x15f0 <GPIO_readPort+0x8>
    15f0:	cd b7       	in	r28, 0x3d	; 61
    15f2:	de b7       	in	r29, 0x3e	; 62
    15f4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    15f6:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	84 30       	cpi	r24, 0x04	; 4
    15fc:	90 f5       	brcc	.+100    	; 0x1662 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	3c 83       	std	Y+4, r19	; 0x04
    1606:	2b 83       	std	Y+3, r18	; 0x03
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	9c 81       	ldd	r25, Y+4	; 0x04
    160c:	81 30       	cpi	r24, 0x01	; 1
    160e:	91 05       	cpc	r25, r1
    1610:	d1 f0       	breq	.+52     	; 0x1646 <GPIO_readPort+0x5e>
    1612:	2b 81       	ldd	r18, Y+3	; 0x03
    1614:	3c 81       	ldd	r19, Y+4	; 0x04
    1616:	22 30       	cpi	r18, 0x02	; 2
    1618:	31 05       	cpc	r19, r1
    161a:	2c f4       	brge	.+10     	; 0x1626 <GPIO_readPort+0x3e>
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	9c 81       	ldd	r25, Y+4	; 0x04
    1620:	00 97       	sbiw	r24, 0x00	; 0
    1622:	61 f0       	breq	.+24     	; 0x163c <GPIO_readPort+0x54>
    1624:	1e c0       	rjmp	.+60     	; 0x1662 <GPIO_readPort+0x7a>
    1626:	2b 81       	ldd	r18, Y+3	; 0x03
    1628:	3c 81       	ldd	r19, Y+4	; 0x04
    162a:	22 30       	cpi	r18, 0x02	; 2
    162c:	31 05       	cpc	r19, r1
    162e:	81 f0       	breq	.+32     	; 0x1650 <GPIO_readPort+0x68>
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	9c 81       	ldd	r25, Y+4	; 0x04
    1634:	83 30       	cpi	r24, 0x03	; 3
    1636:	91 05       	cpc	r25, r1
    1638:	81 f0       	breq	.+32     	; 0x165a <GPIO_readPort+0x72>
    163a:	13 c0       	rjmp	.+38     	; 0x1662 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    163c:	e9 e3       	ldi	r30, 0x39	; 57
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	89 83       	std	Y+1, r24	; 0x01
    1644:	0e c0       	rjmp	.+28     	; 0x1662 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1646:	e6 e3       	ldi	r30, 0x36	; 54
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	89 83       	std	Y+1, r24	; 0x01
    164e:	09 c0       	rjmp	.+18     	; 0x1662 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1650:	e3 e3       	ldi	r30, 0x33	; 51
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	89 83       	std	Y+1, r24	; 0x01
    1658:	04 c0       	rjmp	.+8      	; 0x1662 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    165a:	e0 e3       	ldi	r30, 0x30	; 48
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1662:	89 81       	ldd	r24, Y+1	; 0x01
}
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	08 95       	ret

00001672 <Ultrasonic_init>:
/* Ultrasonic sensor configuration structure */
Ultrasonic_t distance_sensor = { .TRIGGER_PORT = PORTD_ID, .TRIGGER_PIN = PIN7_ID,
                                 .ECHO_PORT = PORTD_ID, .ECHO_PIN = PIN6_ID };

/* Initialize the ultrasonic sensor */
void Ultrasonic_init(Ultrasonic_t *Usonic) {
    1672:	df 93       	push	r29
    1674:	cf 93       	push	r28
    1676:	00 d0       	rcall	.+0      	; 0x1678 <Ultrasonic_init+0x6>
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	9a 83       	std	Y+2, r25	; 0x02
    167e:	89 83       	std	Y+1, r24	; 0x01
	ICU_init(&ICU_config); /* Initialize ICU with configuration */
    1680:	8d e9       	ldi	r24, 0x9D	; 157
    1682:	91 e0       	ldi	r25, 0x01	; 1
    1684:	0e 94 4a 07 	call	0xe94	; 0xe94 <ICU_init>
	ICU_setCallBack(Ultrasonic_edgeProcessing); /* Set callback for edge processing */
    1688:	83 e9       	ldi	r24, 0x93	; 147
    168a:	9c e0       	ldi	r25, 0x0C	; 12
    168c:	0e 94 94 07 	call	0xf28	; 0xf28 <ICU_setCallBack>
	GPIO_setupPinDirection(Usonic->TRIGGER_PORT, Usonic->TRIGGER_PIN, PIN_OUTPUT); /* Set trigger pin as output */
    1690:	e9 81       	ldd	r30, Y+1	; 0x01
    1692:	fa 81       	ldd	r31, Y+2	; 0x02
    1694:	80 81       	ld	r24, Z
    1696:	83 70       	andi	r24, 0x03	; 3
    1698:	28 2f       	mov	r18, r24
    169a:	e9 81       	ldd	r30, Y+1	; 0x01
    169c:	fa 81       	ldd	r31, Y+2	; 0x02
    169e:	80 81       	ld	r24, Z
    16a0:	86 95       	lsr	r24
    16a2:	86 95       	lsr	r24
    16a4:	87 70       	andi	r24, 0x07	; 7
    16a6:	98 2f       	mov	r25, r24
    16a8:	82 2f       	mov	r24, r18
    16aa:	69 2f       	mov	r22, r25
    16ac:	41 e0       	ldi	r20, 0x01	; 1
    16ae:	0e 94 fb 07 	call	0xff6	; 0xff6 <GPIO_setupPinDirection>
}
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	08 95       	ret

000016bc <Ultrasonic_Trigger>:

/* Send trigger pulse to the ultrasonic sensor for 10 us */
void Ultrasonic_Trigger(Ultrasonic_t *Usonic) {
    16bc:	df 93       	push	r29
    16be:	cf 93       	push	r28
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
    16c4:	6a 97       	sbiw	r28, 0x1a	; 26
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	f8 94       	cli
    16ca:	de bf       	out	0x3e, r29	; 62
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	cd bf       	out	0x3d, r28	; 61
    16d0:	9a 8f       	std	Y+26, r25	; 0x1a
    16d2:	89 8f       	std	Y+25, r24	; 0x19
	GPIO_writePin(Usonic->TRIGGER_PORT, Usonic->TRIGGER_PIN, LOGIC_HIGH); /* Set the trigger pin */
    16d4:	e9 8d       	ldd	r30, Y+25	; 0x19
    16d6:	fa 8d       	ldd	r31, Y+26	; 0x1a
    16d8:	80 81       	ld	r24, Z
    16da:	83 70       	andi	r24, 0x03	; 3
    16dc:	28 2f       	mov	r18, r24
    16de:	e9 8d       	ldd	r30, Y+25	; 0x19
    16e0:	fa 8d       	ldd	r31, Y+26	; 0x1a
    16e2:	80 81       	ld	r24, Z
    16e4:	86 95       	lsr	r24
    16e6:	86 95       	lsr	r24
    16e8:	87 70       	andi	r24, 0x07	; 7
    16ea:	98 2f       	mov	r25, r24
    16ec:	82 2f       	mov	r24, r18
    16ee:	69 2f       	mov	r22, r25
    16f0:	41 e0       	ldi	r20, 0x01	; 1
    16f2:	0e 94 e6 08 	call	0x11cc	; 0x11cc <GPIO_writePin>
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	a0 e2       	ldi	r26, 0x20	; 32
    16fc:	b1 e4       	ldi	r27, 0x41	; 65
    16fe:	8d 8b       	std	Y+21, r24	; 0x15
    1700:	9e 8b       	std	Y+22, r25	; 0x16
    1702:	af 8b       	std	Y+23, r26	; 0x17
    1704:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1706:	6d 89       	ldd	r22, Y+21	; 0x15
    1708:	7e 89       	ldd	r23, Y+22	; 0x16
    170a:	8f 89       	ldd	r24, Y+23	; 0x17
    170c:	98 8d       	ldd	r25, Y+24	; 0x18
    170e:	2b ea       	ldi	r18, 0xAB	; 171
    1710:	3a ea       	ldi	r19, 0xAA	; 170
    1712:	4a ea       	ldi	r20, 0xAA	; 170
    1714:	50 e4       	ldi	r21, 0x40	; 64
    1716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	89 8b       	std	Y+17, r24	; 0x11
    1720:	9a 8b       	std	Y+18, r25	; 0x12
    1722:	ab 8b       	std	Y+19, r26	; 0x13
    1724:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1726:	69 89       	ldd	r22, Y+17	; 0x11
    1728:	7a 89       	ldd	r23, Y+18	; 0x12
    172a:	8b 89       	ldd	r24, Y+19	; 0x13
    172c:	9c 89       	ldd	r25, Y+20	; 0x14
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	40 e8       	ldi	r20, 0x80	; 128
    1734:	5f e3       	ldi	r21, 0x3F	; 63
    1736:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    173a:	88 23       	and	r24, r24
    173c:	1c f4       	brge	.+6      	; 0x1744 <Ultrasonic_Trigger+0x88>
		__ticks = 1;
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	88 8b       	std	Y+16, r24	; 0x10
    1742:	91 c0       	rjmp	.+290    	; 0x1866 <Ultrasonic_Trigger+0x1aa>
	else if (__tmp > 255)
    1744:	69 89       	ldd	r22, Y+17	; 0x11
    1746:	7a 89       	ldd	r23, Y+18	; 0x12
    1748:	8b 89       	ldd	r24, Y+19	; 0x13
    174a:	9c 89       	ldd	r25, Y+20	; 0x14
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	4f e7       	ldi	r20, 0x7F	; 127
    1752:	53 e4       	ldi	r21, 0x43	; 67
    1754:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1758:	18 16       	cp	r1, r24
    175a:	0c f0       	brlt	.+2      	; 0x175e <Ultrasonic_Trigger+0xa2>
    175c:	7b c0       	rjmp	.+246    	; 0x1854 <Ultrasonic_Trigger+0x198>
	{
		_delay_ms(__us / 1000.0);
    175e:	6d 89       	ldd	r22, Y+21	; 0x15
    1760:	7e 89       	ldd	r23, Y+22	; 0x16
    1762:	8f 89       	ldd	r24, Y+23	; 0x17
    1764:	98 8d       	ldd	r25, Y+24	; 0x18
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	4a e7       	ldi	r20, 0x7A	; 122
    176c:	54 e4       	ldi	r21, 0x44	; 68
    176e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1772:	dc 01       	movw	r26, r24
    1774:	cb 01       	movw	r24, r22
    1776:	8c 87       	std	Y+12, r24	; 0x0c
    1778:	9d 87       	std	Y+13, r25	; 0x0d
    177a:	ae 87       	std	Y+14, r26	; 0x0e
    177c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    177e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1780:	7d 85       	ldd	r23, Y+13	; 0x0d
    1782:	8e 85       	ldd	r24, Y+14	; 0x0e
    1784:	9f 85       	ldd	r25, Y+15	; 0x0f
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	4a e7       	ldi	r20, 0x7A	; 122
    178c:	55 e4       	ldi	r21, 0x45	; 69
    178e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	88 87       	std	Y+8, r24	; 0x08
    1798:	99 87       	std	Y+9, r25	; 0x09
    179a:	aa 87       	std	Y+10, r26	; 0x0a
    179c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    179e:	68 85       	ldd	r22, Y+8	; 0x08
    17a0:	79 85       	ldd	r23, Y+9	; 0x09
    17a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    17a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	40 e8       	ldi	r20, 0x80	; 128
    17ac:	5f e3       	ldi	r21, 0x3F	; 63
    17ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17b2:	88 23       	and	r24, r24
    17b4:	2c f4       	brge	.+10     	; 0x17c0 <Ultrasonic_Trigger+0x104>
		__ticks = 1;
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	9f 83       	std	Y+7, r25	; 0x07
    17bc:	8e 83       	std	Y+6, r24	; 0x06
    17be:	3f c0       	rjmp	.+126    	; 0x183e <Ultrasonic_Trigger+0x182>
	else if (__tmp > 65535)
    17c0:	68 85       	ldd	r22, Y+8	; 0x08
    17c2:	79 85       	ldd	r23, Y+9	; 0x09
    17c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    17c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	3f ef       	ldi	r19, 0xFF	; 255
    17cc:	4f e7       	ldi	r20, 0x7F	; 127
    17ce:	57 e4       	ldi	r21, 0x47	; 71
    17d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17d4:	18 16       	cp	r1, r24
    17d6:	4c f5       	brge	.+82     	; 0x182a <Ultrasonic_Trigger+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d8:	6c 85       	ldd	r22, Y+12	; 0x0c
    17da:	7d 85       	ldd	r23, Y+13	; 0x0d
    17dc:	8e 85       	ldd	r24, Y+14	; 0x0e
    17de:	9f 85       	ldd	r25, Y+15	; 0x0f
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	40 e2       	ldi	r20, 0x20	; 32
    17e6:	51 e4       	ldi	r21, 0x41	; 65
    17e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ec:	dc 01       	movw	r26, r24
    17ee:	cb 01       	movw	r24, r22
    17f0:	bc 01       	movw	r22, r24
    17f2:	cd 01       	movw	r24, r26
    17f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	9f 83       	std	Y+7, r25	; 0x07
    17fe:	8e 83       	std	Y+6, r24	; 0x06
    1800:	0f c0       	rjmp	.+30     	; 0x1820 <Ultrasonic_Trigger+0x164>
    1802:	80 e9       	ldi	r24, 0x90	; 144
    1804:	91 e0       	ldi	r25, 0x01	; 1
    1806:	9d 83       	std	Y+5, r25	; 0x05
    1808:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    180a:	8c 81       	ldd	r24, Y+4	; 0x04
    180c:	9d 81       	ldd	r25, Y+5	; 0x05
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	f1 f7       	brne	.-4      	; 0x180e <Ultrasonic_Trigger+0x152>
    1812:	9d 83       	std	Y+5, r25	; 0x05
    1814:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1816:	8e 81       	ldd	r24, Y+6	; 0x06
    1818:	9f 81       	ldd	r25, Y+7	; 0x07
    181a:	01 97       	sbiw	r24, 0x01	; 1
    181c:	9f 83       	std	Y+7, r25	; 0x07
    181e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1820:	8e 81       	ldd	r24, Y+6	; 0x06
    1822:	9f 81       	ldd	r25, Y+7	; 0x07
    1824:	00 97       	sbiw	r24, 0x00	; 0
    1826:	69 f7       	brne	.-38     	; 0x1802 <Ultrasonic_Trigger+0x146>
    1828:	24 c0       	rjmp	.+72     	; 0x1872 <Ultrasonic_Trigger+0x1b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    182a:	68 85       	ldd	r22, Y+8	; 0x08
    182c:	79 85       	ldd	r23, Y+9	; 0x09
    182e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1830:	9b 85       	ldd	r25, Y+11	; 0x0b
    1832:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1836:	dc 01       	movw	r26, r24
    1838:	cb 01       	movw	r24, r22
    183a:	9f 83       	std	Y+7, r25	; 0x07
    183c:	8e 83       	std	Y+6, r24	; 0x06
    183e:	8e 81       	ldd	r24, Y+6	; 0x06
    1840:	9f 81       	ldd	r25, Y+7	; 0x07
    1842:	9b 83       	std	Y+3, r25	; 0x03
    1844:	8a 83       	std	Y+2, r24	; 0x02
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	9b 81       	ldd	r25, Y+3	; 0x03
    184a:	01 97       	sbiw	r24, 0x01	; 1
    184c:	f1 f7       	brne	.-4      	; 0x184a <Ultrasonic_Trigger+0x18e>
    184e:	9b 83       	std	Y+3, r25	; 0x03
    1850:	8a 83       	std	Y+2, r24	; 0x02
    1852:	0f c0       	rjmp	.+30     	; 0x1872 <Ultrasonic_Trigger+0x1b6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1854:	69 89       	ldd	r22, Y+17	; 0x11
    1856:	7a 89       	ldd	r23, Y+18	; 0x12
    1858:	8b 89       	ldd	r24, Y+19	; 0x13
    185a:	9c 89       	ldd	r25, Y+20	; 0x14
    185c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1860:	dc 01       	movw	r26, r24
    1862:	cb 01       	movw	r24, r22
    1864:	88 8b       	std	Y+16, r24	; 0x10
    1866:	88 89       	ldd	r24, Y+16	; 0x10
    1868:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    186a:	89 81       	ldd	r24, Y+1	; 0x01
    186c:	8a 95       	dec	r24
    186e:	f1 f7       	brne	.-4      	; 0x186c <Ultrasonic_Trigger+0x1b0>
    1870:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10); /* Wait for 10 microseconds */
	GPIO_writePin(Usonic->TRIGGER_PORT, Usonic->TRIGGER_PIN, LOGIC_LOW); /* clear the trigger pin */
    1872:	e9 8d       	ldd	r30, Y+25	; 0x19
    1874:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1876:	80 81       	ld	r24, Z
    1878:	83 70       	andi	r24, 0x03	; 3
    187a:	28 2f       	mov	r18, r24
    187c:	e9 8d       	ldd	r30, Y+25	; 0x19
    187e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1880:	80 81       	ld	r24, Z
    1882:	86 95       	lsr	r24
    1884:	86 95       	lsr	r24
    1886:	87 70       	andi	r24, 0x07	; 7
    1888:	98 2f       	mov	r25, r24
    188a:	82 2f       	mov	r24, r18
    188c:	69 2f       	mov	r22, r25
    188e:	40 e0       	ldi	r20, 0x00	; 0
    1890:	0e 94 e6 08 	call	0x11cc	; 0x11cc <GPIO_writePin>
}
    1894:	6a 96       	adiw	r28, 0x1a	; 26
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	f8 94       	cli
    189a:	de bf       	out	0x3e, r29	; 62
    189c:	0f be       	out	0x3f, r0	; 63
    189e:	cd bf       	out	0x3d, r28	; 61
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	08 95       	ret

000018a6 <Ultrasonic_readDistance>:

/* Read the distance measured by the ultrasonic sensor */
uint16 Ultrasonic_readDistance(Ultrasonic_t *Usonic) {
    18a6:	df 93       	push	r29
    18a8:	cf 93       	push	r28
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <Ultrasonic_readDistance+0x6>
    18ac:	00 d0       	rcall	.+0      	; 0x18ae <Ultrasonic_readDistance+0x8>
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	9a 83       	std	Y+2, r25	; 0x02
    18b4:	89 83       	std	Y+1, r24	; 0x01
	Ultrasonic_Trigger(Usonic); /* Trigger the sensor */
    18b6:	89 81       	ldd	r24, Y+1	; 0x01
    18b8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ba:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <Ultrasonic_Trigger>
	if (edge_count == 2) { /* Check if both edges have been captured */
    18be:	80 91 ae 01 	lds	r24, 0x01AE
    18c2:	82 30       	cpi	r24, 0x02	; 2
    18c4:	49 f5       	brne	.+82     	; 0x1918 <Ultrasonic_readDistance+0x72>
		edge_count = 0; /* Reset edge count */
    18c6:	10 92 ae 01 	sts	0x01AE, r1
		return ((time_high + ERROR_MARGIN) * 0.008575); /* Calculate and return distance */
    18ca:	80 91 af 01 	lds	r24, 0x01AF
    18ce:	90 91 b0 01 	lds	r25, 0x01B0
    18d2:	a0 91 b1 01 	lds	r26, 0x01B1
    18d6:	b0 91 b2 01 	lds	r27, 0x01B2
    18da:	81 5a       	subi	r24, 0xA1	; 161
    18dc:	9f 4f       	sbci	r25, 0xFF	; 255
    18de:	af 4f       	sbci	r26, 0xFF	; 255
    18e0:	bf 4f       	sbci	r27, 0xFF	; 255
    18e2:	bc 01       	movw	r22, r24
    18e4:	cd 01       	movw	r24, r26
    18e6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	bc 01       	movw	r22, r24
    18f0:	cd 01       	movw	r24, r26
    18f2:	28 e2       	ldi	r18, 0x28	; 40
    18f4:	3e e7       	ldi	r19, 0x7E	; 126
    18f6:	4c e0       	ldi	r20, 0x0C	; 12
    18f8:	5c e3       	ldi	r21, 0x3C	; 60
    18fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18fe:	dc 01       	movw	r26, r24
    1900:	cb 01       	movw	r24, r22
    1902:	bc 01       	movw	r22, r24
    1904:	cd 01       	movw	r24, r26
    1906:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	9c 83       	std	Y+4, r25	; 0x04
    1910:	8b 83       	std	Y+3, r24	; 0x03
	}
}
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	9c 81       	ldd	r25, Y+4	; 0x04
    1916:	00 c0       	rjmp	.+0      	; 0x1918 <Ultrasonic_readDistance+0x72>
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	08 95       	ret

00001926 <Ultrasonic_edgeProcessing>:

/* Handle the edge detection and timing for the ultrasonic sensor */
void Ultrasonic_edgeProcessing(void) {
    1926:	df 93       	push	r29
    1928:	cf 93       	push	r28
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
	edge_count++; /* Increment edge count */
    192e:	80 91 ae 01 	lds	r24, 0x01AE
    1932:	8f 5f       	subi	r24, 0xFF	; 255
    1934:	80 93 ae 01 	sts	0x01AE, r24
	if (edge_count == 1) {
    1938:	80 91 ae 01 	lds	r24, 0x01AE
    193c:	81 30       	cpi	r24, 0x01	; 1
    193e:	31 f4       	brne	.+12     	; 0x194c <Ultrasonic_edgeProcessing+0x26>
		ICU_clearTimerValue(); /* Clear timer on first edge */
    1940:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <ICU_clearTimerValue>
		ICU_setEdgeDetectionType(FALLING); /* Set edge detection to falling */
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	0e 94 a6 07 	call	0xf4c	; 0xf4c <ICU_setEdgeDetectionType>
    194a:	14 c0       	rjmp	.+40     	; 0x1974 <Ultrasonic_edgeProcessing+0x4e>
	} else if (edge_count == 2) {
    194c:	80 91 ae 01 	lds	r24, 0x01AE
    1950:	82 30       	cpi	r24, 0x02	; 2
    1952:	81 f4       	brne	.+32     	; 0x1974 <Ultrasonic_edgeProcessing+0x4e>
		time_high = ICU_getInputCaptureValue(); /* Capture pulse duration */
    1954:	0e 94 c5 07 	call	0xf8a	; 0xf8a <ICU_getInputCaptureValue>
    1958:	cc 01       	movw	r24, r24
    195a:	a0 e0       	ldi	r26, 0x00	; 0
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	80 93 af 01 	sts	0x01AF, r24
    1962:	90 93 b0 01 	sts	0x01B0, r25
    1966:	a0 93 b1 01 	sts	0x01B1, r26
    196a:	b0 93 b2 01 	sts	0x01B2, r27
		ICU_setEdgeDetectionType(RAISING); /* Set edge detection back to rising */
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	0e 94 a6 07 	call	0xf4c	; 0xf4c <ICU_setEdgeDetectionType>
	}
}
    1974:	cf 91       	pop	r28
    1976:	df 91       	pop	r29
    1978:	08 95       	ret

0000197a <LED_init>:
LED_ID Red = { .LED_PORT = PORTC_ID, .LED_PIN = PIN0_ID, ACTIVE_HIGH };

/*
 * Function to initialize the LED
 */
void LED_init(LED_ID *id) {
    197a:	df 93       	push	r29
    197c:	cf 93       	push	r28
    197e:	00 d0       	rcall	.+0      	; 0x1980 <LED_init+0x6>
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
    1984:	9a 83       	std	Y+2, r25	; 0x02
    1986:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(id->LED_PORT, id->LED_PIN, PIN_OUTPUT);
    1988:	e9 81       	ldd	r30, Y+1	; 0x01
    198a:	fa 81       	ldd	r31, Y+2	; 0x02
    198c:	80 81       	ld	r24, Z
    198e:	e9 81       	ldd	r30, Y+1	; 0x01
    1990:	fa 81       	ldd	r31, Y+2	; 0x02
    1992:	91 81       	ldd	r25, Z+1	; 0x01
    1994:	69 2f       	mov	r22, r25
    1996:	41 e0       	ldi	r20, 0x01	; 1
    1998:	0e 94 fb 07 	call	0xff6	; 0xff6 <GPIO_setupPinDirection>
	LED_off(id);
    199c:	89 81       	ldd	r24, Y+1	; 0x01
    199e:	9a 81       	ldd	r25, Y+2	; 0x02
    19a0:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LED_off>
}
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	cf 91       	pop	r28
    19aa:	df 91       	pop	r29
    19ac:	08 95       	ret

000019ae <LED_on>:
/*
 * Function to Turn LED on
 */
void LED_on(LED_ID *id) {
    19ae:	df 93       	push	r29
    19b0:	cf 93       	push	r28
    19b2:	00 d0       	rcall	.+0      	; 0x19b4 <LED_on+0x6>
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
    19b8:	9a 83       	std	Y+2, r25	; 0x02
    19ba:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(id->LED_PORT, id->LED_PIN, (LOGIC_HIGH ^ id->STATE));
    19bc:	e9 81       	ldd	r30, Y+1	; 0x01
    19be:	fa 81       	ldd	r31, Y+2	; 0x02
    19c0:	20 81       	ld	r18, Z
    19c2:	e9 81       	ldd	r30, Y+1	; 0x01
    19c4:	fa 81       	ldd	r31, Y+2	; 0x02
    19c6:	31 81       	ldd	r19, Z+1	; 0x01
    19c8:	e9 81       	ldd	r30, Y+1	; 0x01
    19ca:	fa 81       	ldd	r31, Y+2	; 0x02
    19cc:	92 81       	ldd	r25, Z+2	; 0x02
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	98 27       	eor	r25, r24
    19d2:	82 2f       	mov	r24, r18
    19d4:	63 2f       	mov	r22, r19
    19d6:	49 2f       	mov	r20, r25
    19d8:	0e 94 e6 08 	call	0x11cc	; 0x11cc <GPIO_writePin>
}
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	cf 91       	pop	r28
    19e2:	df 91       	pop	r29
    19e4:	08 95       	ret

000019e6 <LED_off>:
/*
 * Function to Turn LED off
 */
void LED_off(LED_ID *id) {
    19e6:	df 93       	push	r29
    19e8:	cf 93       	push	r28
    19ea:	00 d0       	rcall	.+0      	; 0x19ec <LED_off+0x6>
    19ec:	cd b7       	in	r28, 0x3d	; 61
    19ee:	de b7       	in	r29, 0x3e	; 62
    19f0:	9a 83       	std	Y+2, r25	; 0x02
    19f2:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(id->LED_PORT, id->LED_PIN, (LOGIC_LOW ^ id->STATE));
    19f4:	e9 81       	ldd	r30, Y+1	; 0x01
    19f6:	fa 81       	ldd	r31, Y+2	; 0x02
    19f8:	80 81       	ld	r24, Z
    19fa:	e9 81       	ldd	r30, Y+1	; 0x01
    19fc:	fa 81       	ldd	r31, Y+2	; 0x02
    19fe:	21 81       	ldd	r18, Z+1	; 0x01
    1a00:	e9 81       	ldd	r30, Y+1	; 0x01
    1a02:	fa 81       	ldd	r31, Y+2	; 0x02
    1a04:	92 81       	ldd	r25, Z+2	; 0x02
    1a06:	62 2f       	mov	r22, r18
    1a08:	49 2f       	mov	r20, r25
    1a0a:	0e 94 e6 08 	call	0x11cc	; 0x11cc <GPIO_writePin>
}
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	cf 91       	pop	r28
    1a14:	df 91       	pop	r29
    1a16:	08 95       	ret

00001a18 <LED_toggle>:
void LED_toggle(LED_ID *id,uint8 delaytime) {
    1a18:	df 93       	push	r29
    1a1a:	cf 93       	push	r28
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
    1a20:	6f 97       	sbiw	r28, 0x1f	; 31
    1a22:	0f b6       	in	r0, 0x3f	; 63
    1a24:	f8 94       	cli
    1a26:	de bf       	out	0x3e, r29	; 62
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	cd bf       	out	0x3d, r28	; 61
    1a2c:	9e 8f       	std	Y+30, r25	; 0x1e
    1a2e:	8d 8f       	std	Y+29, r24	; 0x1d
    1a30:	6f 8f       	std	Y+31, r22	; 0x1f
	LED_on(id);
    1a32:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a34:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a36:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <LED_on>
	_delay_ms(delaytime);
    1a3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a3c:	88 2f       	mov	r24, r24
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	a0 e0       	ldi	r26, 0x00	; 0
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	bc 01       	movw	r22, r24
    1a46:	cd 01       	movw	r24, r26
    1a48:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	89 8f       	std	Y+25, r24	; 0x19
    1a52:	9a 8f       	std	Y+26, r25	; 0x1a
    1a54:	ab 8f       	std	Y+27, r26	; 0x1b
    1a56:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a58:	69 8d       	ldd	r22, Y+25	; 0x19
    1a5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	4a e7       	ldi	r20, 0x7A	; 122
    1a66:	55 e4       	ldi	r21, 0x45	; 69
    1a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	8d 8b       	std	Y+21, r24	; 0x15
    1a72:	9e 8b       	std	Y+22, r25	; 0x16
    1a74:	af 8b       	std	Y+23, r26	; 0x17
    1a76:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a78:	6d 89       	ldd	r22, Y+21	; 0x15
    1a7a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	40 e8       	ldi	r20, 0x80	; 128
    1a86:	5f e3       	ldi	r21, 0x3F	; 63
    1a88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a8c:	88 23       	and	r24, r24
    1a8e:	2c f4       	brge	.+10     	; 0x1a9a <LED_toggle+0x82>
		__ticks = 1;
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	9c 8b       	std	Y+20, r25	; 0x14
    1a96:	8b 8b       	std	Y+19, r24	; 0x13
    1a98:	3f c0       	rjmp	.+126    	; 0x1b18 <LED_toggle+0x100>
	else if (__tmp > 65535)
    1a9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1aa0:	98 8d       	ldd	r25, Y+24	; 0x18
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	3f ef       	ldi	r19, 0xFF	; 255
    1aa6:	4f e7       	ldi	r20, 0x7F	; 127
    1aa8:	57 e4       	ldi	r21, 0x47	; 71
    1aaa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1aae:	18 16       	cp	r1, r24
    1ab0:	4c f5       	brge	.+82     	; 0x1b04 <LED_toggle+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ab4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ab6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ab8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	40 e2       	ldi	r20, 0x20	; 32
    1ac0:	51 e4       	ldi	r21, 0x41	; 65
    1ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	cb 01       	movw	r24, r22
    1aca:	bc 01       	movw	r22, r24
    1acc:	cd 01       	movw	r24, r26
    1ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	9c 8b       	std	Y+20, r25	; 0x14
    1ad8:	8b 8b       	std	Y+19, r24	; 0x13
    1ada:	0f c0       	rjmp	.+30     	; 0x1afa <LED_toggle+0xe2>
    1adc:	80 e9       	ldi	r24, 0x90	; 144
    1ade:	91 e0       	ldi	r25, 0x01	; 1
    1ae0:	9a 8b       	std	Y+18, r25	; 0x12
    1ae2:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ae4:	89 89       	ldd	r24, Y+17	; 0x11
    1ae6:	9a 89       	ldd	r25, Y+18	; 0x12
    1ae8:	01 97       	sbiw	r24, 0x01	; 1
    1aea:	f1 f7       	brne	.-4      	; 0x1ae8 <LED_toggle+0xd0>
    1aec:	9a 8b       	std	Y+18, r25	; 0x12
    1aee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af0:	8b 89       	ldd	r24, Y+19	; 0x13
    1af2:	9c 89       	ldd	r25, Y+20	; 0x14
    1af4:	01 97       	sbiw	r24, 0x01	; 1
    1af6:	9c 8b       	std	Y+20, r25	; 0x14
    1af8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1afa:	8b 89       	ldd	r24, Y+19	; 0x13
    1afc:	9c 89       	ldd	r25, Y+20	; 0x14
    1afe:	00 97       	sbiw	r24, 0x00	; 0
    1b00:	69 f7       	brne	.-38     	; 0x1adc <LED_toggle+0xc4>
    1b02:	14 c0       	rjmp	.+40     	; 0x1b2c <LED_toggle+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b04:	6d 89       	ldd	r22, Y+21	; 0x15
    1b06:	7e 89       	ldd	r23, Y+22	; 0x16
    1b08:	8f 89       	ldd	r24, Y+23	; 0x17
    1b0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	9c 8b       	std	Y+20, r25	; 0x14
    1b16:	8b 8b       	std	Y+19, r24	; 0x13
    1b18:	8b 89       	ldd	r24, Y+19	; 0x13
    1b1a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b1c:	98 8b       	std	Y+16, r25	; 0x10
    1b1e:	8f 87       	std	Y+15, r24	; 0x0f
    1b20:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b22:	98 89       	ldd	r25, Y+16	; 0x10
    1b24:	01 97       	sbiw	r24, 0x01	; 1
    1b26:	f1 f7       	brne	.-4      	; 0x1b24 <LED_toggle+0x10c>
    1b28:	98 8b       	std	Y+16, r25	; 0x10
    1b2a:	8f 87       	std	Y+15, r24	; 0x0f
	LED_off(id);
    1b2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b2e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b30:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LED_off>
	_delay_ms(delaytime);
    1b34:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b36:	88 2f       	mov	r24, r24
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	a0 e0       	ldi	r26, 0x00	; 0
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	bc 01       	movw	r22, r24
    1b40:	cd 01       	movw	r24, r26
    1b42:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	8b 87       	std	Y+11, r24	; 0x0b
    1b4c:	9c 87       	std	Y+12, r25	; 0x0c
    1b4e:	ad 87       	std	Y+13, r26	; 0x0d
    1b50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	4a e7       	ldi	r20, 0x7A	; 122
    1b60:	55 e4       	ldi	r21, 0x45	; 69
    1b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	8f 83       	std	Y+7, r24	; 0x07
    1b6c:	98 87       	std	Y+8, r25	; 0x08
    1b6e:	a9 87       	std	Y+9, r26	; 0x09
    1b70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b72:	6f 81       	ldd	r22, Y+7	; 0x07
    1b74:	78 85       	ldd	r23, Y+8	; 0x08
    1b76:	89 85       	ldd	r24, Y+9	; 0x09
    1b78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	40 e8       	ldi	r20, 0x80	; 128
    1b80:	5f e3       	ldi	r21, 0x3F	; 63
    1b82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b86:	88 23       	and	r24, r24
    1b88:	2c f4       	brge	.+10     	; 0x1b94 <LED_toggle+0x17c>
		__ticks = 1;
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	9e 83       	std	Y+6, r25	; 0x06
    1b90:	8d 83       	std	Y+5, r24	; 0x05
    1b92:	3f c0       	rjmp	.+126    	; 0x1c12 <LED_toggle+0x1fa>
	else if (__tmp > 65535)
    1b94:	6f 81       	ldd	r22, Y+7	; 0x07
    1b96:	78 85       	ldd	r23, Y+8	; 0x08
    1b98:	89 85       	ldd	r24, Y+9	; 0x09
    1b9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	3f ef       	ldi	r19, 0xFF	; 255
    1ba0:	4f e7       	ldi	r20, 0x7F	; 127
    1ba2:	57 e4       	ldi	r21, 0x47	; 71
    1ba4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ba8:	18 16       	cp	r1, r24
    1baa:	4c f5       	brge	.+82     	; 0x1bfe <LED_toggle+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	40 e2       	ldi	r20, 0x20	; 32
    1bba:	51 e4       	ldi	r21, 0x41	; 65
    1bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	bc 01       	movw	r22, r24
    1bc6:	cd 01       	movw	r24, r26
    1bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	9e 83       	std	Y+6, r25	; 0x06
    1bd2:	8d 83       	std	Y+5, r24	; 0x05
    1bd4:	0f c0       	rjmp	.+30     	; 0x1bf4 <LED_toggle+0x1dc>
    1bd6:	80 e9       	ldi	r24, 0x90	; 144
    1bd8:	91 e0       	ldi	r25, 0x01	; 1
    1bda:	9c 83       	std	Y+4, r25	; 0x04
    1bdc:	8b 83       	std	Y+3, r24	; 0x03
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	9c 81       	ldd	r25, Y+4	; 0x04
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	f1 f7       	brne	.-4      	; 0x1be2 <LED_toggle+0x1ca>
    1be6:	9c 83       	std	Y+4, r25	; 0x04
    1be8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bea:	8d 81       	ldd	r24, Y+5	; 0x05
    1bec:	9e 81       	ldd	r25, Y+6	; 0x06
    1bee:	01 97       	sbiw	r24, 0x01	; 1
    1bf0:	9e 83       	std	Y+6, r25	; 0x06
    1bf2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf8:	00 97       	sbiw	r24, 0x00	; 0
    1bfa:	69 f7       	brne	.-38     	; 0x1bd6 <LED_toggle+0x1be>
    1bfc:	14 c0       	rjmp	.+40     	; 0x1c26 <LED_toggle+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bfe:	6f 81       	ldd	r22, Y+7	; 0x07
    1c00:	78 85       	ldd	r23, Y+8	; 0x08
    1c02:	89 85       	ldd	r24, Y+9	; 0x09
    1c04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	9e 83       	std	Y+6, r25	; 0x06
    1c10:	8d 83       	std	Y+5, r24	; 0x05
    1c12:	8d 81       	ldd	r24, Y+5	; 0x05
    1c14:	9e 81       	ldd	r25, Y+6	; 0x06
    1c16:	9a 83       	std	Y+2, r25	; 0x02
    1c18:	89 83       	std	Y+1, r24	; 0x01
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
    1c1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1e:	01 97       	sbiw	r24, 0x01	; 1
    1c20:	f1 f7       	brne	.-4      	; 0x1c1e <LED_toggle+0x206>
    1c22:	9a 83       	std	Y+2, r25	; 0x02
    1c24:	89 83       	std	Y+1, r24	; 0x01
}
    1c26:	6f 96       	adiw	r28, 0x1f	; 31
    1c28:	0f b6       	in	r0, 0x3f	; 63
    1c2a:	f8 94       	cli
    1c2c:	de bf       	out	0x3e, r29	; 62
    1c2e:	0f be       	out	0x3f, r0	; 63
    1c30:	cd bf       	out	0x3d, r28	; 61
    1c32:	cf 91       	pop	r28
    1c34:	df 91       	pop	r29
    1c36:	08 95       	ret

00001c38 <LCD_SendCommand>:
#include "../../MCAL/GPIO/gpio.h"
#include "../../MCAL/common_macros.h"
#include <util/delay.h>
#include <stdlib.h>

void LCD_SendCommand(uint8 Command) {
    1c38:	0f 93       	push	r16
    1c3a:	1f 93       	push	r17
    1c3c:	df 93       	push	r29
    1c3e:	cf 93       	push	r28
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
    1c44:	c3 56       	subi	r28, 0x63	; 99
    1c46:	d0 40       	sbci	r29, 0x00	; 0
    1c48:	0f b6       	in	r0, 0x3f	; 63
    1c4a:	f8 94       	cli
    1c4c:	de bf       	out	0x3e, r29	; 62
    1c4e:	0f be       	out	0x3f, r0	; 63
    1c50:	cd bf       	out	0x3d, r28	; 61
    1c52:	fe 01       	movw	r30, r28
    1c54:	ed 59       	subi	r30, 0x9D	; 157
    1c56:	ff 4f       	sbci	r31, 0xFF	; 255
    1c58:	80 83       	st	Z, r24
	/* Set RS pin to zero */
	GPIO_writePin(LCD_RS_PORT, LCD_RS_Pin, LOGIC_LOW);
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	61 e0       	ldi	r22, 0x01	; 1
    1c5e:	40 e0       	ldi	r20, 0x00	; 0
    1c60:	0e 94 e6 08 	call	0x11cc	; 0x11cc <GPIO_writePin>
    1c64:	fe 01       	movw	r30, r28
    1c66:	e1 5a       	subi	r30, 0xA1	; 161
    1c68:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	a0 e8       	ldi	r26, 0x80	; 128
    1c70:	bf e3       	ldi	r27, 0x3F	; 63
    1c72:	80 83       	st	Z, r24
    1c74:	91 83       	std	Z+1, r25	; 0x01
    1c76:	a2 83       	std	Z+2, r26	; 0x02
    1c78:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c7a:	8e 01       	movw	r16, r28
    1c7c:	05 5a       	subi	r16, 0xA5	; 165
    1c7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c80:	fe 01       	movw	r30, r28
    1c82:	e1 5a       	subi	r30, 0xA1	; 161
    1c84:	ff 4f       	sbci	r31, 0xFF	; 255
    1c86:	60 81       	ld	r22, Z
    1c88:	71 81       	ldd	r23, Z+1	; 0x01
    1c8a:	82 81       	ldd	r24, Z+2	; 0x02
    1c8c:	93 81       	ldd	r25, Z+3	; 0x03
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	4a e7       	ldi	r20, 0x7A	; 122
    1c94:	55 e4       	ldi	r21, 0x45	; 69
    1c96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	f8 01       	movw	r30, r16
    1ca0:	80 83       	st	Z, r24
    1ca2:	91 83       	std	Z+1, r25	; 0x01
    1ca4:	a2 83       	std	Z+2, r26	; 0x02
    1ca6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ca8:	fe 01       	movw	r30, r28
    1caa:	e5 5a       	subi	r30, 0xA5	; 165
    1cac:	ff 4f       	sbci	r31, 0xFF	; 255
    1cae:	60 81       	ld	r22, Z
    1cb0:	71 81       	ldd	r23, Z+1	; 0x01
    1cb2:	82 81       	ldd	r24, Z+2	; 0x02
    1cb4:	93 81       	ldd	r25, Z+3	; 0x03
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e8       	ldi	r20, 0x80	; 128
    1cbc:	5f e3       	ldi	r21, 0x3F	; 63
    1cbe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cc2:	88 23       	and	r24, r24
    1cc4:	44 f4       	brge	.+16     	; 0x1cd6 <LCD_SendCommand+0x9e>
		__ticks = 1;
    1cc6:	fe 01       	movw	r30, r28
    1cc8:	e7 5a       	subi	r30, 0xA7	; 167
    1cca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	91 83       	std	Z+1, r25	; 0x01
    1cd2:	80 83       	st	Z, r24
    1cd4:	64 c0       	rjmp	.+200    	; 0x1d9e <LCD_SendCommand+0x166>
	else if (__tmp > 65535)
    1cd6:	fe 01       	movw	r30, r28
    1cd8:	e5 5a       	subi	r30, 0xA5	; 165
    1cda:	ff 4f       	sbci	r31, 0xFF	; 255
    1cdc:	60 81       	ld	r22, Z
    1cde:	71 81       	ldd	r23, Z+1	; 0x01
    1ce0:	82 81       	ldd	r24, Z+2	; 0x02
    1ce2:	93 81       	ldd	r25, Z+3	; 0x03
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	3f ef       	ldi	r19, 0xFF	; 255
    1ce8:	4f e7       	ldi	r20, 0x7F	; 127
    1cea:	57 e4       	ldi	r21, 0x47	; 71
    1cec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cf0:	18 16       	cp	r1, r24
    1cf2:	0c f0       	brlt	.+2      	; 0x1cf6 <LCD_SendCommand+0xbe>
    1cf4:	43 c0       	rjmp	.+134    	; 0x1d7c <LCD_SendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	e1 5a       	subi	r30, 0xA1	; 161
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	60 81       	ld	r22, Z
    1cfe:	71 81       	ldd	r23, Z+1	; 0x01
    1d00:	82 81       	ldd	r24, Z+2	; 0x02
    1d02:	93 81       	ldd	r25, Z+3	; 0x03
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	40 e2       	ldi	r20, 0x20	; 32
    1d0a:	51 e4       	ldi	r21, 0x41	; 65
    1d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	8e 01       	movw	r16, r28
    1d16:	07 5a       	subi	r16, 0xA7	; 167
    1d18:	1f 4f       	sbci	r17, 0xFF	; 255
    1d1a:	bc 01       	movw	r22, r24
    1d1c:	cd 01       	movw	r24, r26
    1d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	f8 01       	movw	r30, r16
    1d28:	91 83       	std	Z+1, r25	; 0x01
    1d2a:	80 83       	st	Z, r24
    1d2c:	1f c0       	rjmp	.+62     	; 0x1d6c <LCD_SendCommand+0x134>
    1d2e:	fe 01       	movw	r30, r28
    1d30:	e9 5a       	subi	r30, 0xA9	; 169
    1d32:	ff 4f       	sbci	r31, 0xFF	; 255
    1d34:	80 e9       	ldi	r24, 0x90	; 144
    1d36:	91 e0       	ldi	r25, 0x01	; 1
    1d38:	91 83       	std	Z+1, r25	; 0x01
    1d3a:	80 83       	st	Z, r24
    1d3c:	fe 01       	movw	r30, r28
    1d3e:	e9 5a       	subi	r30, 0xA9	; 169
    1d40:	ff 4f       	sbci	r31, 0xFF	; 255
    1d42:	80 81       	ld	r24, Z
    1d44:	91 81       	ldd	r25, Z+1	; 0x01
    1d46:	01 97       	sbiw	r24, 0x01	; 1
    1d48:	f1 f7       	brne	.-4      	; 0x1d46 <LCD_SendCommand+0x10e>
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	e9 5a       	subi	r30, 0xA9	; 169
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	91 83       	std	Z+1, r25	; 0x01
    1d52:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d54:	de 01       	movw	r26, r28
    1d56:	a7 5a       	subi	r26, 0xA7	; 167
    1d58:	bf 4f       	sbci	r27, 0xFF	; 255
    1d5a:	fe 01       	movw	r30, r28
    1d5c:	e7 5a       	subi	r30, 0xA7	; 167
    1d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d60:	80 81       	ld	r24, Z
    1d62:	91 81       	ldd	r25, Z+1	; 0x01
    1d64:	01 97       	sbiw	r24, 0x01	; 1
    1d66:	11 96       	adiw	r26, 0x01	; 1
    1d68:	9c 93       	st	X, r25
    1d6a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	e7 5a       	subi	r30, 0xA7	; 167
    1d70:	ff 4f       	sbci	r31, 0xFF	; 255
    1d72:	80 81       	ld	r24, Z
    1d74:	91 81       	ldd	r25, Z+1	; 0x01
    1d76:	00 97       	sbiw	r24, 0x00	; 0
    1d78:	d1 f6       	brne	.-76     	; 0x1d2e <LCD_SendCommand+0xf6>
    1d7a:	27 c0       	rjmp	.+78     	; 0x1dca <LCD_SendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7c:	8e 01       	movw	r16, r28
    1d7e:	07 5a       	subi	r16, 0xA7	; 167
    1d80:	1f 4f       	sbci	r17, 0xFF	; 255
    1d82:	fe 01       	movw	r30, r28
    1d84:	e5 5a       	subi	r30, 0xA5	; 165
    1d86:	ff 4f       	sbci	r31, 0xFF	; 255
    1d88:	60 81       	ld	r22, Z
    1d8a:	71 81       	ldd	r23, Z+1	; 0x01
    1d8c:	82 81       	ldd	r24, Z+2	; 0x02
    1d8e:	93 81       	ldd	r25, Z+3	; 0x03
    1d90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	f8 01       	movw	r30, r16
    1d9a:	91 83       	std	Z+1, r25	; 0x01
    1d9c:	80 83       	st	Z, r24
    1d9e:	de 01       	movw	r26, r28
    1da0:	ab 5a       	subi	r26, 0xAB	; 171
    1da2:	bf 4f       	sbci	r27, 0xFF	; 255
    1da4:	fe 01       	movw	r30, r28
    1da6:	e7 5a       	subi	r30, 0xA7	; 167
    1da8:	ff 4f       	sbci	r31, 0xFF	; 255
    1daa:	80 81       	ld	r24, Z
    1dac:	91 81       	ldd	r25, Z+1	; 0x01
    1dae:	8d 93       	st	X+, r24
    1db0:	9c 93       	st	X, r25
    1db2:	fe 01       	movw	r30, r28
    1db4:	eb 5a       	subi	r30, 0xAB	; 171
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	80 81       	ld	r24, Z
    1dba:	91 81       	ldd	r25, Z+1	; 0x01
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	f1 f7       	brne	.-4      	; 0x1dbc <LCD_SendCommand+0x184>
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	eb 5a       	subi	r30, 0xAB	; 171
    1dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc6:	91 83       	std	Z+1, r25	; 0x01
    1dc8:	80 83       	st	Z, r24
	_delay_ms(1); /* Delay 1 us */
	/* Set Enable to LOGIC_HIGH */
	GPIO_writePin(LCD_ENABLE_PORT, LCD_ENABLE_PIN, LOGIC_HIGH);
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	62 e0       	ldi	r22, 0x02	; 2
    1dce:	41 e0       	ldi	r20, 0x01	; 1
    1dd0:	0e 94 e6 08 	call	0x11cc	; 0x11cc <GPIO_writePin>
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	ef 5a       	subi	r30, 0xAF	; 175
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	a0 e8       	ldi	r26, 0x80	; 128
    1de0:	bf e3       	ldi	r27, 0x3F	; 63
    1de2:	80 83       	st	Z, r24
    1de4:	91 83       	std	Z+1, r25	; 0x01
    1de6:	a2 83       	std	Z+2, r26	; 0x02
    1de8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dea:	8e 01       	movw	r16, r28
    1dec:	03 5b       	subi	r16, 0xB3	; 179
    1dee:	1f 4f       	sbci	r17, 0xFF	; 255
    1df0:	fe 01       	movw	r30, r28
    1df2:	ef 5a       	subi	r30, 0xAF	; 175
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	60 81       	ld	r22, Z
    1df8:	71 81       	ldd	r23, Z+1	; 0x01
    1dfa:	82 81       	ldd	r24, Z+2	; 0x02
    1dfc:	93 81       	ldd	r25, Z+3	; 0x03
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	4a e7       	ldi	r20, 0x7A	; 122
    1e04:	55 e4       	ldi	r21, 0x45	; 69
    1e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	f8 01       	movw	r30, r16
    1e10:	80 83       	st	Z, r24
    1e12:	91 83       	std	Z+1, r25	; 0x01
    1e14:	a2 83       	std	Z+2, r26	; 0x02
    1e16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e18:	fe 01       	movw	r30, r28
    1e1a:	e3 5b       	subi	r30, 0xB3	; 179
    1e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1e:	60 81       	ld	r22, Z
    1e20:	71 81       	ldd	r23, Z+1	; 0x01
    1e22:	82 81       	ldd	r24, Z+2	; 0x02
    1e24:	93 81       	ldd	r25, Z+3	; 0x03
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	40 e8       	ldi	r20, 0x80	; 128
    1e2c:	5f e3       	ldi	r21, 0x3F	; 63
    1e2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e32:	88 23       	and	r24, r24
    1e34:	44 f4       	brge	.+16     	; 0x1e46 <LCD_SendCommand+0x20e>
		__ticks = 1;
    1e36:	fe 01       	movw	r30, r28
    1e38:	e5 5b       	subi	r30, 0xB5	; 181
    1e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	91 83       	std	Z+1, r25	; 0x01
    1e42:	80 83       	st	Z, r24
    1e44:	64 c0       	rjmp	.+200    	; 0x1f0e <LCD_SendCommand+0x2d6>
	else if (__tmp > 65535)
    1e46:	fe 01       	movw	r30, r28
    1e48:	e3 5b       	subi	r30, 0xB3	; 179
    1e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4c:	60 81       	ld	r22, Z
    1e4e:	71 81       	ldd	r23, Z+1	; 0x01
    1e50:	82 81       	ldd	r24, Z+2	; 0x02
    1e52:	93 81       	ldd	r25, Z+3	; 0x03
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	3f ef       	ldi	r19, 0xFF	; 255
    1e58:	4f e7       	ldi	r20, 0x7F	; 127
    1e5a:	57 e4       	ldi	r21, 0x47	; 71
    1e5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e60:	18 16       	cp	r1, r24
    1e62:	0c f0       	brlt	.+2      	; 0x1e66 <LCD_SendCommand+0x22e>
    1e64:	43 c0       	rjmp	.+134    	; 0x1eec <LCD_SendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e66:	fe 01       	movw	r30, r28
    1e68:	ef 5a       	subi	r30, 0xAF	; 175
    1e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6c:	60 81       	ld	r22, Z
    1e6e:	71 81       	ldd	r23, Z+1	; 0x01
    1e70:	82 81       	ldd	r24, Z+2	; 0x02
    1e72:	93 81       	ldd	r25, Z+3	; 0x03
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	40 e2       	ldi	r20, 0x20	; 32
    1e7a:	51 e4       	ldi	r21, 0x41	; 65
    1e7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	8e 01       	movw	r16, r28
    1e86:	05 5b       	subi	r16, 0xB5	; 181
    1e88:	1f 4f       	sbci	r17, 0xFF	; 255
    1e8a:	bc 01       	movw	r22, r24
    1e8c:	cd 01       	movw	r24, r26
    1e8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	f8 01       	movw	r30, r16
    1e98:	91 83       	std	Z+1, r25	; 0x01
    1e9a:	80 83       	st	Z, r24
    1e9c:	1f c0       	rjmp	.+62     	; 0x1edc <LCD_SendCommand+0x2a4>
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	e7 5b       	subi	r30, 0xB7	; 183
    1ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea4:	80 e9       	ldi	r24, 0x90	; 144
    1ea6:	91 e0       	ldi	r25, 0x01	; 1
    1ea8:	91 83       	std	Z+1, r25	; 0x01
    1eaa:	80 83       	st	Z, r24
    1eac:	fe 01       	movw	r30, r28
    1eae:	e7 5b       	subi	r30, 0xB7	; 183
    1eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb2:	80 81       	ld	r24, Z
    1eb4:	91 81       	ldd	r25, Z+1	; 0x01
    1eb6:	01 97       	sbiw	r24, 0x01	; 1
    1eb8:	f1 f7       	brne	.-4      	; 0x1eb6 <LCD_SendCommand+0x27e>
    1eba:	fe 01       	movw	r30, r28
    1ebc:	e7 5b       	subi	r30, 0xB7	; 183
    1ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec0:	91 83       	std	Z+1, r25	; 0x01
    1ec2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec4:	de 01       	movw	r26, r28
    1ec6:	a5 5b       	subi	r26, 0xB5	; 181
    1ec8:	bf 4f       	sbci	r27, 0xFF	; 255
    1eca:	fe 01       	movw	r30, r28
    1ecc:	e5 5b       	subi	r30, 0xB5	; 181
    1ece:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed0:	80 81       	ld	r24, Z
    1ed2:	91 81       	ldd	r25, Z+1	; 0x01
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	11 96       	adiw	r26, 0x01	; 1
    1ed8:	9c 93       	st	X, r25
    1eda:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1edc:	fe 01       	movw	r30, r28
    1ede:	e5 5b       	subi	r30, 0xB5	; 181
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	80 81       	ld	r24, Z
    1ee4:	91 81       	ldd	r25, Z+1	; 0x01
    1ee6:	00 97       	sbiw	r24, 0x00	; 0
    1ee8:	d1 f6       	brne	.-76     	; 0x1e9e <LCD_SendCommand+0x266>
    1eea:	27 c0       	rjmp	.+78     	; 0x1f3a <LCD_SendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eec:	8e 01       	movw	r16, r28
    1eee:	05 5b       	subi	r16, 0xB5	; 181
    1ef0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef2:	fe 01       	movw	r30, r28
    1ef4:	e3 5b       	subi	r30, 0xB3	; 179
    1ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef8:	60 81       	ld	r22, Z
    1efa:	71 81       	ldd	r23, Z+1	; 0x01
    1efc:	82 81       	ldd	r24, Z+2	; 0x02
    1efe:	93 81       	ldd	r25, Z+3	; 0x03
    1f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	f8 01       	movw	r30, r16
    1f0a:	91 83       	std	Z+1, r25	; 0x01
    1f0c:	80 83       	st	Z, r24
    1f0e:	de 01       	movw	r26, r28
    1f10:	a9 5b       	subi	r26, 0xB9	; 185
    1f12:	bf 4f       	sbci	r27, 0xFF	; 255
    1f14:	fe 01       	movw	r30, r28
    1f16:	e5 5b       	subi	r30, 0xB5	; 181
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	80 81       	ld	r24, Z
    1f1c:	91 81       	ldd	r25, Z+1	; 0x01
    1f1e:	8d 93       	st	X+, r24
    1f20:	9c 93       	st	X, r25
    1f22:	fe 01       	movw	r30, r28
    1f24:	e9 5b       	subi	r30, 0xB9	; 185
    1f26:	ff 4f       	sbci	r31, 0xFF	; 255
    1f28:	80 81       	ld	r24, Z
    1f2a:	91 81       	ldd	r25, Z+1	; 0x01
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	f1 f7       	brne	.-4      	; 0x1f2c <LCD_SendCommand+0x2f4>
    1f30:	fe 01       	movw	r30, r28
    1f32:	e9 5b       	subi	r30, 0xB9	; 185
    1f34:	ff 4f       	sbci	r31, 0xFF	; 255
    1f36:	91 83       	std	Z+1, r25	; 0x01
    1f38:	80 83       	st	Z, r24
	_delay_ms(1);
	/* Send Command*/
#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT, LCD_DB4_PIN, GET_BIT(Command, 4));
    1f3a:	fe 01       	movw	r30, r28
    1f3c:	ed 59       	subi	r30, 0x9D	; 157
    1f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f40:	80 81       	ld	r24, Z
    1f42:	88 2f       	mov	r24, r24
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	80 71       	andi	r24, 0x10	; 16
    1f48:	90 70       	andi	r25, 0x00	; 0
    1f4a:	95 95       	asr	r25
    1f4c:	87 95       	ror	r24
    1f4e:	95 95       	asr	r25
    1f50:	87 95       	ror	r24
    1f52:	95 95       	asr	r25
    1f54:	87 95       	ror	r24
    1f56:	95 95       	asr	r25
    1f58:	87 95       	ror	r24
    1f5a:	98 2f       	mov	r25, r24
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	63 e0       	ldi	r22, 0x03	; 3
    1f60:	49 2f       	mov	r20, r25
    1f62:	0e 94 e6 08 	call	0x11cc	; 0x11cc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT, LCD_DB5_PIN, GET_BIT(Command, 5));
    1f66:	fe 01       	movw	r30, r28
    1f68:	ed 59       	subi	r30, 0x9D	; 157
    1f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6c:	80 81       	ld	r24, Z
    1f6e:	88 2f       	mov	r24, r24
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	80 72       	andi	r24, 0x20	; 32
    1f74:	90 70       	andi	r25, 0x00	; 0
    1f76:	95 95       	asr	r25
    1f78:	87 95       	ror	r24
    1f7a:	95 95       	asr	r25
    1f7c:	87 95       	ror	r24
    1f7e:	95 95       	asr	r25
    1f80:	87 95       	ror	r24
    1f82:	95 95       	asr	r25
    1f84:	87 95       	ror	r24
    1f86:	95 95       	asr	r25
    1f88:	87 95       	ror	r24
    1f8a:	98 2f       	mov	r25, r24
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	64 e0       	ldi	r22, 0x04	; 4
    1f90:	49 2f       	mov	r20, r25
    1f92:	0e 94 e6 08 	call	0x11cc	; 0x11cc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT, LCD_DB6_PIN, GET_BIT(Command, 6));
    1f96:	fe 01       	movw	r30, r28
    1f98:	ed 59       	subi	r30, 0x9D	; 157
    1f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9c:	80 81       	ld	r24, Z
    1f9e:	88 2f       	mov	r24, r24
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	80 74       	andi	r24, 0x40	; 64
    1fa4:	90 70       	andi	r25, 0x00	; 0
    1fa6:	08 2e       	mov	r0, r24
    1fa8:	89 2f       	mov	r24, r25
    1faa:	00 0c       	add	r0, r0
    1fac:	88 1f       	adc	r24, r24
    1fae:	99 0b       	sbc	r25, r25
    1fb0:	00 0c       	add	r0, r0
    1fb2:	88 1f       	adc	r24, r24
    1fb4:	99 1f       	adc	r25, r25
    1fb6:	98 2f       	mov	r25, r24
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	65 e0       	ldi	r22, 0x05	; 5
    1fbc:	49 2f       	mov	r20, r25
    1fbe:	0e 94 e6 08 	call	0x11cc	; 0x11cc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT, LCD_DB7_PIN, GET_BIT(Command, 7));
    1fc2:	fe 01       	movw	r30, r28
    1fc4:	ed 59       	subi	r30, 0x9D	; 157
    1fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc8:	80 81       	ld	r24, Z
    1fca:	98 2f       	mov	r25, r24
    1fcc:	99 1f       	adc	r25, r25
    1fce:	99 27       	eor	r25, r25
    1fd0:	99 1f       	adc	r25, r25
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	66 e0       	ldi	r22, 0x06	; 6
    1fd6:	49 2f       	mov	r20, r25
    1fd8:	0e 94 e6 08 	call	0x11cc	; 0x11cc <GPIO_writePin>
    1fdc:	fe 01       	movw	r30, r28
    1fde:	ed 5b       	subi	r30, 0xBD	; 189
    1fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	a0 e8       	ldi	r26, 0x80	; 128
    1fe8:	bf e3       	ldi	r27, 0x3F	; 63
    1fea:	80 83       	st	Z, r24
    1fec:	91 83       	std	Z+1, r25	; 0x01
    1fee:	a2 83       	std	Z+2, r26	; 0x02
    1ff0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff2:	8e 01       	movw	r16, r28
    1ff4:	01 5c       	subi	r16, 0xC1	; 193
    1ff6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff8:	fe 01       	movw	r30, r28
    1ffa:	ed 5b       	subi	r30, 0xBD	; 189
    1ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffe:	60 81       	ld	r22, Z
    2000:	71 81       	ldd	r23, Z+1	; 0x01
    2002:	82 81       	ldd	r24, Z+2	; 0x02
    2004:	93 81       	ldd	r25, Z+3	; 0x03
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	4a e7       	ldi	r20, 0x7A	; 122
    200c:	55 e4       	ldi	r21, 0x45	; 69
    200e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	f8 01       	movw	r30, r16
    2018:	80 83       	st	Z, r24
    201a:	91 83       	std	Z+1, r25	; 0x01
    201c:	a2 83       	std	Z+2, r26	; 0x02
    201e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2020:	fe 01       	movw	r30, r28
    2022:	ff 96       	adiw	r30, 0x3f	; 63
    2024:	60 81       	ld	r22, Z
    2026:	71 81       	ldd	r23, Z+1	; 0x01
    2028:	82 81       	ldd	r24, Z+2	; 0x02
    202a:	93 81       	ldd	r25, Z+3	; 0x03
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	40 e8       	ldi	r20, 0x80	; 128
    2032:	5f e3       	ldi	r21, 0x3F	; 63
    2034:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2038:	88 23       	and	r24, r24
    203a:	2c f4       	brge	.+10     	; 0x2046 <LCD_SendCommand+0x40e>
		__ticks = 1;
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	9e af       	std	Y+62, r25	; 0x3e
    2042:	8d af       	std	Y+61, r24	; 0x3d
    2044:	46 c0       	rjmp	.+140    	; 0x20d2 <LCD_SendCommand+0x49a>
	else if (__tmp > 65535)
    2046:	fe 01       	movw	r30, r28
    2048:	ff 96       	adiw	r30, 0x3f	; 63
    204a:	60 81       	ld	r22, Z
    204c:	71 81       	ldd	r23, Z+1	; 0x01
    204e:	82 81       	ldd	r24, Z+2	; 0x02
    2050:	93 81       	ldd	r25, Z+3	; 0x03
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	3f ef       	ldi	r19, 0xFF	; 255
    2056:	4f e7       	ldi	r20, 0x7F	; 127
    2058:	57 e4       	ldi	r21, 0x47	; 71
    205a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    205e:	18 16       	cp	r1, r24
    2060:	64 f5       	brge	.+88     	; 0x20ba <LCD_SendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2062:	fe 01       	movw	r30, r28
    2064:	ed 5b       	subi	r30, 0xBD	; 189
    2066:	ff 4f       	sbci	r31, 0xFF	; 255
    2068:	60 81       	ld	r22, Z
    206a:	71 81       	ldd	r23, Z+1	; 0x01
    206c:	82 81       	ldd	r24, Z+2	; 0x02
    206e:	93 81       	ldd	r25, Z+3	; 0x03
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	40 e2       	ldi	r20, 0x20	; 32
    2076:	51 e4       	ldi	r21, 0x41	; 65
    2078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	bc 01       	movw	r22, r24
    2082:	cd 01       	movw	r24, r26
    2084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	9e af       	std	Y+62, r25	; 0x3e
    208e:	8d af       	std	Y+61, r24	; 0x3d
    2090:	0f c0       	rjmp	.+30     	; 0x20b0 <LCD_SendCommand+0x478>
    2092:	80 e9       	ldi	r24, 0x90	; 144
    2094:	91 e0       	ldi	r25, 0x01	; 1
    2096:	9c af       	std	Y+60, r25	; 0x3c
    2098:	8b af       	std	Y+59, r24	; 0x3b
    209a:	8b ad       	ldd	r24, Y+59	; 0x3b
    209c:	9c ad       	ldd	r25, Y+60	; 0x3c
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	f1 f7       	brne	.-4      	; 0x209e <LCD_SendCommand+0x466>
    20a2:	9c af       	std	Y+60, r25	; 0x3c
    20a4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    20a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    20aa:	01 97       	sbiw	r24, 0x01	; 1
    20ac:	9e af       	std	Y+62, r25	; 0x3e
    20ae:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b0:	8d ad       	ldd	r24, Y+61	; 0x3d
    20b2:	9e ad       	ldd	r25, Y+62	; 0x3e
    20b4:	00 97       	sbiw	r24, 0x00	; 0
    20b6:	69 f7       	brne	.-38     	; 0x2092 <LCD_SendCommand+0x45a>
    20b8:	16 c0       	rjmp	.+44     	; 0x20e6 <LCD_SendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ba:	fe 01       	movw	r30, r28
    20bc:	ff 96       	adiw	r30, 0x3f	; 63
    20be:	60 81       	ld	r22, Z
    20c0:	71 81       	ldd	r23, Z+1	; 0x01
    20c2:	82 81       	ldd	r24, Z+2	; 0x02
    20c4:	93 81       	ldd	r25, Z+3	; 0x03
    20c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	9e af       	std	Y+62, r25	; 0x3e
    20d0:	8d af       	std	Y+61, r24	; 0x3d
    20d2:	8d ad       	ldd	r24, Y+61	; 0x3d
    20d4:	9e ad       	ldd	r25, Y+62	; 0x3e
    20d6:	9a af       	std	Y+58, r25	; 0x3a
    20d8:	89 af       	std	Y+57, r24	; 0x39
    20da:	89 ad       	ldd	r24, Y+57	; 0x39
    20dc:	9a ad       	ldd	r25, Y+58	; 0x3a
    20de:	01 97       	sbiw	r24, 0x01	; 1
    20e0:	f1 f7       	brne	.-4      	; 0x20de <LCD_SendCommand+0x4a6>
    20e2:	9a af       	std	Y+58, r25	; 0x3a
    20e4:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	GPIO_writePin(LCD_ENABLE_PORT, LCD_ENABLE_PIN, LOGIC_LOW);
    20e6:	80 e0       	ldi	r24, 0x00	; 0
    20e8:	62 e0       	ldi	r22, 0x02	; 2
    20ea:	40 e0       	ldi	r20, 0x00	; 0
    20ec:	0e 94 e6 08 	call	0x11cc	; 0x11cc <GPIO_writePin>
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	a0 e8       	ldi	r26, 0x80	; 128
    20f6:	bf e3       	ldi	r27, 0x3F	; 63
    20f8:	8d ab       	std	Y+53, r24	; 0x35
    20fa:	9e ab       	std	Y+54, r25	; 0x36
    20fc:	af ab       	std	Y+55, r26	; 0x37
    20fe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2100:	6d a9       	ldd	r22, Y+53	; 0x35
    2102:	7e a9       	ldd	r23, Y+54	; 0x36
    2104:	8f a9       	ldd	r24, Y+55	; 0x37
    2106:	98 ad       	ldd	r25, Y+56	; 0x38
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	4a e7       	ldi	r20, 0x7A	; 122
    210e:	55 e4       	ldi	r21, 0x45	; 69
    2110:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2114:	dc 01       	movw	r26, r24
    2116:	cb 01       	movw	r24, r22
    2118:	89 ab       	std	Y+49, r24	; 0x31
    211a:	9a ab       	std	Y+50, r25	; 0x32
    211c:	ab ab       	std	Y+51, r26	; 0x33
    211e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2120:	69 a9       	ldd	r22, Y+49	; 0x31
    2122:	7a a9       	ldd	r23, Y+50	; 0x32
    2124:	8b a9       	ldd	r24, Y+51	; 0x33
    2126:	9c a9       	ldd	r25, Y+52	; 0x34
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	40 e8       	ldi	r20, 0x80	; 128
    212e:	5f e3       	ldi	r21, 0x3F	; 63
    2130:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2134:	88 23       	and	r24, r24
    2136:	2c f4       	brge	.+10     	; 0x2142 <LCD_SendCommand+0x50a>
		__ticks = 1;
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	98 ab       	std	Y+48, r25	; 0x30
    213e:	8f a7       	std	Y+47, r24	; 0x2f
    2140:	3f c0       	rjmp	.+126    	; 0x21c0 <LCD_SendCommand+0x588>
	else if (__tmp > 65535)
    2142:	69 a9       	ldd	r22, Y+49	; 0x31
    2144:	7a a9       	ldd	r23, Y+50	; 0x32
    2146:	8b a9       	ldd	r24, Y+51	; 0x33
    2148:	9c a9       	ldd	r25, Y+52	; 0x34
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	3f ef       	ldi	r19, 0xFF	; 255
    214e:	4f e7       	ldi	r20, 0x7F	; 127
    2150:	57 e4       	ldi	r21, 0x47	; 71
    2152:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2156:	18 16       	cp	r1, r24
    2158:	4c f5       	brge	.+82     	; 0x21ac <LCD_SendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    215a:	6d a9       	ldd	r22, Y+53	; 0x35
    215c:	7e a9       	ldd	r23, Y+54	; 0x36
    215e:	8f a9       	ldd	r24, Y+55	; 0x37
    2160:	98 ad       	ldd	r25, Y+56	; 0x38
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	40 e2       	ldi	r20, 0x20	; 32
    2168:	51 e4       	ldi	r21, 0x41	; 65
    216a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	bc 01       	movw	r22, r24
    2174:	cd 01       	movw	r24, r26
    2176:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	98 ab       	std	Y+48, r25	; 0x30
    2180:	8f a7       	std	Y+47, r24	; 0x2f
    2182:	0f c0       	rjmp	.+30     	; 0x21a2 <LCD_SendCommand+0x56a>
    2184:	80 e9       	ldi	r24, 0x90	; 144
    2186:	91 e0       	ldi	r25, 0x01	; 1
    2188:	9e a7       	std	Y+46, r25	; 0x2e
    218a:	8d a7       	std	Y+45, r24	; 0x2d
    218c:	8d a5       	ldd	r24, Y+45	; 0x2d
    218e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2190:	01 97       	sbiw	r24, 0x01	; 1
    2192:	f1 f7       	brne	.-4      	; 0x2190 <LCD_SendCommand+0x558>
    2194:	9e a7       	std	Y+46, r25	; 0x2e
    2196:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2198:	8f a5       	ldd	r24, Y+47	; 0x2f
    219a:	98 a9       	ldd	r25, Y+48	; 0x30
    219c:	01 97       	sbiw	r24, 0x01	; 1
    219e:	98 ab       	std	Y+48, r25	; 0x30
    21a0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    21a4:	98 a9       	ldd	r25, Y+48	; 0x30
    21a6:	00 97       	sbiw	r24, 0x00	; 0
    21a8:	69 f7       	brne	.-38     	; 0x2184 <LCD_SendCommand+0x54c>
    21aa:	14 c0       	rjmp	.+40     	; 0x21d4 <LCD_SendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ac:	69 a9       	ldd	r22, Y+49	; 0x31
    21ae:	7a a9       	ldd	r23, Y+50	; 0x32
    21b0:	8b a9       	ldd	r24, Y+51	; 0x33
    21b2:	9c a9       	ldd	r25, Y+52	; 0x34
    21b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	98 ab       	std	Y+48, r25	; 0x30
    21be:	8f a7       	std	Y+47, r24	; 0x2f
    21c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    21c2:	98 a9       	ldd	r25, Y+48	; 0x30
    21c4:	9c a7       	std	Y+44, r25	; 0x2c
    21c6:	8b a7       	std	Y+43, r24	; 0x2b
    21c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    21ca:	9c a5       	ldd	r25, Y+44	; 0x2c
    21cc:	01 97       	sbiw	r24, 0x01	; 1
    21ce:	f1 f7       	brne	.-4      	; 0x21cc <LCD_SendCommand+0x594>
    21d0:	9c a7       	std	Y+44, r25	; 0x2c
    21d2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_ENABLE_PORT, LCD_ENABLE_PIN, LOGIC_HIGH);
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	62 e0       	ldi	r22, 0x02	; 2
    21d8:	41 e0       	ldi	r20, 0x01	; 1
    21da:	0e 94 e6 08 	call	0x11cc	; 0x11cc <GPIO_writePin>
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	a0 e8       	ldi	r26, 0x80	; 128
    21e4:	bf e3       	ldi	r27, 0x3F	; 63
    21e6:	8f a3       	std	Y+39, r24	; 0x27
    21e8:	98 a7       	std	Y+40, r25	; 0x28
    21ea:	a9 a7       	std	Y+41, r26	; 0x29
    21ec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ee:	6f a1       	ldd	r22, Y+39	; 0x27
    21f0:	78 a5       	ldd	r23, Y+40	; 0x28
    21f2:	89 a5       	ldd	r24, Y+41	; 0x29
    21f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	4a e7       	ldi	r20, 0x7A	; 122
    21fc:	55 e4       	ldi	r21, 0x45	; 69
    21fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	8b a3       	std	Y+35, r24	; 0x23
    2208:	9c a3       	std	Y+36, r25	; 0x24
    220a:	ad a3       	std	Y+37, r26	; 0x25
    220c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    220e:	6b a1       	ldd	r22, Y+35	; 0x23
    2210:	7c a1       	ldd	r23, Y+36	; 0x24
    2212:	8d a1       	ldd	r24, Y+37	; 0x25
    2214:	9e a1       	ldd	r25, Y+38	; 0x26
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	40 e8       	ldi	r20, 0x80	; 128
    221c:	5f e3       	ldi	r21, 0x3F	; 63
    221e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2222:	88 23       	and	r24, r24
    2224:	2c f4       	brge	.+10     	; 0x2230 <LCD_SendCommand+0x5f8>
		__ticks = 1;
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	9a a3       	std	Y+34, r25	; 0x22
    222c:	89 a3       	std	Y+33, r24	; 0x21
    222e:	3f c0       	rjmp	.+126    	; 0x22ae <LCD_SendCommand+0x676>
	else if (__tmp > 65535)
    2230:	6b a1       	ldd	r22, Y+35	; 0x23
    2232:	7c a1       	ldd	r23, Y+36	; 0x24
    2234:	8d a1       	ldd	r24, Y+37	; 0x25
    2236:	9e a1       	ldd	r25, Y+38	; 0x26
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	3f ef       	ldi	r19, 0xFF	; 255
    223c:	4f e7       	ldi	r20, 0x7F	; 127
    223e:	57 e4       	ldi	r21, 0x47	; 71
    2240:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2244:	18 16       	cp	r1, r24
    2246:	4c f5       	brge	.+82     	; 0x229a <LCD_SendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2248:	6f a1       	ldd	r22, Y+39	; 0x27
    224a:	78 a5       	ldd	r23, Y+40	; 0x28
    224c:	89 a5       	ldd	r24, Y+41	; 0x29
    224e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	40 e2       	ldi	r20, 0x20	; 32
    2256:	51 e4       	ldi	r21, 0x41	; 65
    2258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225c:	dc 01       	movw	r26, r24
    225e:	cb 01       	movw	r24, r22
    2260:	bc 01       	movw	r22, r24
    2262:	cd 01       	movw	r24, r26
    2264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2268:	dc 01       	movw	r26, r24
    226a:	cb 01       	movw	r24, r22
    226c:	9a a3       	std	Y+34, r25	; 0x22
    226e:	89 a3       	std	Y+33, r24	; 0x21
    2270:	0f c0       	rjmp	.+30     	; 0x2290 <LCD_SendCommand+0x658>
    2272:	80 e9       	ldi	r24, 0x90	; 144
    2274:	91 e0       	ldi	r25, 0x01	; 1
    2276:	98 a3       	std	Y+32, r25	; 0x20
    2278:	8f 8f       	std	Y+31, r24	; 0x1f
    227a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    227c:	98 a1       	ldd	r25, Y+32	; 0x20
    227e:	01 97       	sbiw	r24, 0x01	; 1
    2280:	f1 f7       	brne	.-4      	; 0x227e <LCD_SendCommand+0x646>
    2282:	98 a3       	std	Y+32, r25	; 0x20
    2284:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2286:	89 a1       	ldd	r24, Y+33	; 0x21
    2288:	9a a1       	ldd	r25, Y+34	; 0x22
    228a:	01 97       	sbiw	r24, 0x01	; 1
    228c:	9a a3       	std	Y+34, r25	; 0x22
    228e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2290:	89 a1       	ldd	r24, Y+33	; 0x21
    2292:	9a a1       	ldd	r25, Y+34	; 0x22
    2294:	00 97       	sbiw	r24, 0x00	; 0
    2296:	69 f7       	brne	.-38     	; 0x2272 <LCD_SendCommand+0x63a>
    2298:	14 c0       	rjmp	.+40     	; 0x22c2 <LCD_SendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    229a:	6b a1       	ldd	r22, Y+35	; 0x23
    229c:	7c a1       	ldd	r23, Y+36	; 0x24
    229e:	8d a1       	ldd	r24, Y+37	; 0x25
    22a0:	9e a1       	ldd	r25, Y+38	; 0x26
    22a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	9a a3       	std	Y+34, r25	; 0x22
    22ac:	89 a3       	std	Y+33, r24	; 0x21
    22ae:	89 a1       	ldd	r24, Y+33	; 0x21
    22b0:	9a a1       	ldd	r25, Y+34	; 0x22
    22b2:	9e 8f       	std	Y+30, r25	; 0x1e
    22b4:	8d 8f       	std	Y+29, r24	; 0x1d
    22b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22ba:	01 97       	sbiw	r24, 0x01	; 1
    22bc:	f1 f7       	brne	.-4      	; 0x22ba <LCD_SendCommand+0x682>
    22be:	9e 8f       	std	Y+30, r25	; 0x1e
    22c0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePin(LCD_DATA_PORT, LCD_DB4_PIN, GET_BIT(Command, 0));
    22c2:	fe 01       	movw	r30, r28
    22c4:	ed 59       	subi	r30, 0x9D	; 157
    22c6:	ff 4f       	sbci	r31, 0xFF	; 255
    22c8:	80 81       	ld	r24, Z
    22ca:	98 2f       	mov	r25, r24
    22cc:	91 70       	andi	r25, 0x01	; 1
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	63 e0       	ldi	r22, 0x03	; 3
    22d2:	49 2f       	mov	r20, r25
    22d4:	0e 94 e6 08 	call	0x11cc	; 0x11cc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT, LCD_DB5_PIN, GET_BIT(Command, 1));
    22d8:	fe 01       	movw	r30, r28
    22da:	ed 59       	subi	r30, 0x9D	; 157
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	80 81       	ld	r24, Z
    22e0:	88 2f       	mov	r24, r24
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	82 70       	andi	r24, 0x02	; 2
    22e6:	90 70       	andi	r25, 0x00	; 0
    22e8:	95 95       	asr	r25
    22ea:	87 95       	ror	r24
    22ec:	98 2f       	mov	r25, r24
    22ee:	80 e0       	ldi	r24, 0x00	; 0
    22f0:	64 e0       	ldi	r22, 0x04	; 4
    22f2:	49 2f       	mov	r20, r25
    22f4:	0e 94 e6 08 	call	0x11cc	; 0x11cc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT, LCD_DB6_PIN, GET_BIT(Command, 2));
    22f8:	fe 01       	movw	r30, r28
    22fa:	ed 59       	subi	r30, 0x9D	; 157
    22fc:	ff 4f       	sbci	r31, 0xFF	; 255
    22fe:	80 81       	ld	r24, Z
    2300:	88 2f       	mov	r24, r24
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	84 70       	andi	r24, 0x04	; 4
    2306:	90 70       	andi	r25, 0x00	; 0
    2308:	95 95       	asr	r25
    230a:	87 95       	ror	r24
    230c:	95 95       	asr	r25
    230e:	87 95       	ror	r24
    2310:	98 2f       	mov	r25, r24
    2312:	80 e0       	ldi	r24, 0x00	; 0
    2314:	65 e0       	ldi	r22, 0x05	; 5
    2316:	49 2f       	mov	r20, r25
    2318:	0e 94 e6 08 	call	0x11cc	; 0x11cc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT, LCD_DB7_PIN, GET_BIT(Command, 3));
    231c:	fe 01       	movw	r30, r28
    231e:	ed 59       	subi	r30, 0x9D	; 157
    2320:	ff 4f       	sbci	r31, 0xFF	; 255
    2322:	80 81       	ld	r24, Z
    2324:	88 2f       	mov	r24, r24
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	88 70       	andi	r24, 0x08	; 8
    232a:	90 70       	andi	r25, 0x00	; 0
    232c:	95 95       	asr	r25
    232e:	87 95       	ror	r24
    2330:	95 95       	asr	r25
    2332:	87 95       	ror	r24
    2334:	95 95       	asr	r25
    2336:	87 95       	ror	r24
    2338:	98 2f       	mov	r25, r24
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	66 e0       	ldi	r22, 0x06	; 6
    233e:	49 2f       	mov	r20, r25
    2340:	0e 94 e6 08 	call	0x11cc	; 0x11cc <GPIO_writePin>
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	a0 e8       	ldi	r26, 0x80	; 128
    234a:	bf e3       	ldi	r27, 0x3F	; 63
    234c:	89 8f       	std	Y+25, r24	; 0x19
    234e:	9a 8f       	std	Y+26, r25	; 0x1a
    2350:	ab 8f       	std	Y+27, r26	; 0x1b
    2352:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2354:	69 8d       	ldd	r22, Y+25	; 0x19
    2356:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2358:	8b 8d       	ldd	r24, Y+27	; 0x1b
    235a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	4a e7       	ldi	r20, 0x7A	; 122
    2362:	55 e4       	ldi	r21, 0x45	; 69
    2364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	8d 8b       	std	Y+21, r24	; 0x15
    236e:	9e 8b       	std	Y+22, r25	; 0x16
    2370:	af 8b       	std	Y+23, r26	; 0x17
    2372:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2374:	6d 89       	ldd	r22, Y+21	; 0x15
    2376:	7e 89       	ldd	r23, Y+22	; 0x16
    2378:	8f 89       	ldd	r24, Y+23	; 0x17
    237a:	98 8d       	ldd	r25, Y+24	; 0x18
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	40 e8       	ldi	r20, 0x80	; 128
    2382:	5f e3       	ldi	r21, 0x3F	; 63
    2384:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2388:	88 23       	and	r24, r24
    238a:	2c f4       	brge	.+10     	; 0x2396 <LCD_SendCommand+0x75e>
		__ticks = 1;
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	9c 8b       	std	Y+20, r25	; 0x14
    2392:	8b 8b       	std	Y+19, r24	; 0x13
    2394:	3f c0       	rjmp	.+126    	; 0x2414 <LCD_SendCommand+0x7dc>
	else if (__tmp > 65535)
    2396:	6d 89       	ldd	r22, Y+21	; 0x15
    2398:	7e 89       	ldd	r23, Y+22	; 0x16
    239a:	8f 89       	ldd	r24, Y+23	; 0x17
    239c:	98 8d       	ldd	r25, Y+24	; 0x18
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	3f ef       	ldi	r19, 0xFF	; 255
    23a2:	4f e7       	ldi	r20, 0x7F	; 127
    23a4:	57 e4       	ldi	r21, 0x47	; 71
    23a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23aa:	18 16       	cp	r1, r24
    23ac:	4c f5       	brge	.+82     	; 0x2400 <LCD_SendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ae:	69 8d       	ldd	r22, Y+25	; 0x19
    23b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	40 e2       	ldi	r20, 0x20	; 32
    23bc:	51 e4       	ldi	r21, 0x41	; 65
    23be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	bc 01       	movw	r22, r24
    23c8:	cd 01       	movw	r24, r26
    23ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	9c 8b       	std	Y+20, r25	; 0x14
    23d4:	8b 8b       	std	Y+19, r24	; 0x13
    23d6:	0f c0       	rjmp	.+30     	; 0x23f6 <LCD_SendCommand+0x7be>
    23d8:	80 e9       	ldi	r24, 0x90	; 144
    23da:	91 e0       	ldi	r25, 0x01	; 1
    23dc:	9a 8b       	std	Y+18, r25	; 0x12
    23de:	89 8b       	std	Y+17, r24	; 0x11
    23e0:	89 89       	ldd	r24, Y+17	; 0x11
    23e2:	9a 89       	ldd	r25, Y+18	; 0x12
    23e4:	01 97       	sbiw	r24, 0x01	; 1
    23e6:	f1 f7       	brne	.-4      	; 0x23e4 <LCD_SendCommand+0x7ac>
    23e8:	9a 8b       	std	Y+18, r25	; 0x12
    23ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ec:	8b 89       	ldd	r24, Y+19	; 0x13
    23ee:	9c 89       	ldd	r25, Y+20	; 0x14
    23f0:	01 97       	sbiw	r24, 0x01	; 1
    23f2:	9c 8b       	std	Y+20, r25	; 0x14
    23f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f6:	8b 89       	ldd	r24, Y+19	; 0x13
    23f8:	9c 89       	ldd	r25, Y+20	; 0x14
    23fa:	00 97       	sbiw	r24, 0x00	; 0
    23fc:	69 f7       	brne	.-38     	; 0x23d8 <LCD_SendCommand+0x7a0>
    23fe:	14 c0       	rjmp	.+40     	; 0x2428 <LCD_SendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2400:	6d 89       	ldd	r22, Y+21	; 0x15
    2402:	7e 89       	ldd	r23, Y+22	; 0x16
    2404:	8f 89       	ldd	r24, Y+23	; 0x17
    2406:	98 8d       	ldd	r25, Y+24	; 0x18
    2408:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	9c 8b       	std	Y+20, r25	; 0x14
    2412:	8b 8b       	std	Y+19, r24	; 0x13
    2414:	8b 89       	ldd	r24, Y+19	; 0x13
    2416:	9c 89       	ldd	r25, Y+20	; 0x14
    2418:	98 8b       	std	Y+16, r25	; 0x10
    241a:	8f 87       	std	Y+15, r24	; 0x0f
    241c:	8f 85       	ldd	r24, Y+15	; 0x0f
    241e:	98 89       	ldd	r25, Y+16	; 0x10
    2420:	01 97       	sbiw	r24, 0x01	; 1
    2422:	f1 f7       	brne	.-4      	; 0x2420 <LCD_SendCommand+0x7e8>
    2424:	98 8b       	std	Y+16, r25	; 0x10
    2426:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_ENABLE_PORT, LCD_ENABLE_PIN, LOGIC_LOW);
    2428:	80 e0       	ldi	r24, 0x00	; 0
    242a:	62 e0       	ldi	r22, 0x02	; 2
    242c:	40 e0       	ldi	r20, 0x00	; 0
    242e:	0e 94 e6 08 	call	0x11cc	; 0x11cc <GPIO_writePin>
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	a0 e8       	ldi	r26, 0x80	; 128
    2438:	bf e3       	ldi	r27, 0x3F	; 63
    243a:	8b 87       	std	Y+11, r24	; 0x0b
    243c:	9c 87       	std	Y+12, r25	; 0x0c
    243e:	ad 87       	std	Y+13, r26	; 0x0d
    2440:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2442:	6b 85       	ldd	r22, Y+11	; 0x0b
    2444:	7c 85       	ldd	r23, Y+12	; 0x0c
    2446:	8d 85       	ldd	r24, Y+13	; 0x0d
    2448:	9e 85       	ldd	r25, Y+14	; 0x0e
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	4a e7       	ldi	r20, 0x7A	; 122
    2450:	55 e4       	ldi	r21, 0x45	; 69
    2452:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	8f 83       	std	Y+7, r24	; 0x07
    245c:	98 87       	std	Y+8, r25	; 0x08
    245e:	a9 87       	std	Y+9, r26	; 0x09
    2460:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2462:	6f 81       	ldd	r22, Y+7	; 0x07
    2464:	78 85       	ldd	r23, Y+8	; 0x08
    2466:	89 85       	ldd	r24, Y+9	; 0x09
    2468:	9a 85       	ldd	r25, Y+10	; 0x0a
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	40 e8       	ldi	r20, 0x80	; 128
    2470:	5f e3       	ldi	r21, 0x3F	; 63
    2472:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2476:	88 23       	and	r24, r24
    2478:	2c f4       	brge	.+10     	; 0x2484 <LCD_SendCommand+0x84c>
		__ticks = 1;
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	9e 83       	std	Y+6, r25	; 0x06
    2480:	8d 83       	std	Y+5, r24	; 0x05
    2482:	3f c0       	rjmp	.+126    	; 0x2502 <LCD_SendCommand+0x8ca>
	else if (__tmp > 65535)
    2484:	6f 81       	ldd	r22, Y+7	; 0x07
    2486:	78 85       	ldd	r23, Y+8	; 0x08
    2488:	89 85       	ldd	r24, Y+9	; 0x09
    248a:	9a 85       	ldd	r25, Y+10	; 0x0a
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	3f ef       	ldi	r19, 0xFF	; 255
    2490:	4f e7       	ldi	r20, 0x7F	; 127
    2492:	57 e4       	ldi	r21, 0x47	; 71
    2494:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2498:	18 16       	cp	r1, r24
    249a:	4c f5       	brge	.+82     	; 0x24ee <LCD_SendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    249c:	6b 85       	ldd	r22, Y+11	; 0x0b
    249e:	7c 85       	ldd	r23, Y+12	; 0x0c
    24a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	40 e2       	ldi	r20, 0x20	; 32
    24aa:	51 e4       	ldi	r21, 0x41	; 65
    24ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	bc 01       	movw	r22, r24
    24b6:	cd 01       	movw	r24, r26
    24b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	9e 83       	std	Y+6, r25	; 0x06
    24c2:	8d 83       	std	Y+5, r24	; 0x05
    24c4:	0f c0       	rjmp	.+30     	; 0x24e4 <LCD_SendCommand+0x8ac>
    24c6:	80 e9       	ldi	r24, 0x90	; 144
    24c8:	91 e0       	ldi	r25, 0x01	; 1
    24ca:	9c 83       	std	Y+4, r25	; 0x04
    24cc:	8b 83       	std	Y+3, r24	; 0x03
    24ce:	8b 81       	ldd	r24, Y+3	; 0x03
    24d0:	9c 81       	ldd	r25, Y+4	; 0x04
    24d2:	01 97       	sbiw	r24, 0x01	; 1
    24d4:	f1 f7       	brne	.-4      	; 0x24d2 <LCD_SendCommand+0x89a>
    24d6:	9c 83       	std	Y+4, r25	; 0x04
    24d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24da:	8d 81       	ldd	r24, Y+5	; 0x05
    24dc:	9e 81       	ldd	r25, Y+6	; 0x06
    24de:	01 97       	sbiw	r24, 0x01	; 1
    24e0:	9e 83       	std	Y+6, r25	; 0x06
    24e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e4:	8d 81       	ldd	r24, Y+5	; 0x05
    24e6:	9e 81       	ldd	r25, Y+6	; 0x06
    24e8:	00 97       	sbiw	r24, 0x00	; 0
    24ea:	69 f7       	brne	.-38     	; 0x24c6 <LCD_SendCommand+0x88e>
    24ec:	14 c0       	rjmp	.+40     	; 0x2516 <LCD_SendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ee:	6f 81       	ldd	r22, Y+7	; 0x07
    24f0:	78 85       	ldd	r23, Y+8	; 0x08
    24f2:	89 85       	ldd	r24, Y+9	; 0x09
    24f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	9e 83       	std	Y+6, r25	; 0x06
    2500:	8d 83       	std	Y+5, r24	; 0x05
    2502:	8d 81       	ldd	r24, Y+5	; 0x05
    2504:	9e 81       	ldd	r25, Y+6	; 0x06
    2506:	9a 83       	std	Y+2, r25	; 0x02
    2508:	89 83       	std	Y+1, r24	; 0x01
    250a:	89 81       	ldd	r24, Y+1	; 0x01
    250c:	9a 81       	ldd	r25, Y+2	; 0x02
    250e:	01 97       	sbiw	r24, 0x01	; 1
    2510:	f1 f7       	brne	.-4      	; 0x250e <LCD_SendCommand+0x8d6>
    2512:	9a 83       	std	Y+2, r25	; 0x02
    2514:	89 83       	std	Y+1, r24	; 0x01
	/* Set Enable to zero */
	GPIO_writePin(LCD_ENABLE_PORT, LCD_ENABLE_PIN, LOGIC_LOW);
	/* Delay 1 us */
	_delay_ms(1);
#endif
}
    2516:	cd 59       	subi	r28, 0x9D	; 157
    2518:	df 4f       	sbci	r29, 0xFF	; 255
    251a:	0f b6       	in	r0, 0x3f	; 63
    251c:	f8 94       	cli
    251e:	de bf       	out	0x3e, r29	; 62
    2520:	0f be       	out	0x3f, r0	; 63
    2522:	cd bf       	out	0x3d, r28	; 61
    2524:	cf 91       	pop	r28
    2526:	df 91       	pop	r29
    2528:	1f 91       	pop	r17
    252a:	0f 91       	pop	r16
    252c:	08 95       	ret

0000252e <LCD_DisplayCharacter>:
void LCD_DisplayCharacter(uint8 Data) {
    252e:	0f 93       	push	r16
    2530:	1f 93       	push	r17
    2532:	df 93       	push	r29
    2534:	cf 93       	push	r28
    2536:	cd b7       	in	r28, 0x3d	; 61
    2538:	de b7       	in	r29, 0x3e	; 62
    253a:	c3 56       	subi	r28, 0x63	; 99
    253c:	d0 40       	sbci	r29, 0x00	; 0
    253e:	0f b6       	in	r0, 0x3f	; 63
    2540:	f8 94       	cli
    2542:	de bf       	out	0x3e, r29	; 62
    2544:	0f be       	out	0x3f, r0	; 63
    2546:	cd bf       	out	0x3d, r28	; 61
    2548:	fe 01       	movw	r30, r28
    254a:	ed 59       	subi	r30, 0x9D	; 157
    254c:	ff 4f       	sbci	r31, 0xFF	; 255
    254e:	80 83       	st	Z, r24
	/* Set RS pin to zero */
	GPIO_writePin(LCD_RS_PORT, LCD_RS_Pin, LOGIC_HIGH);
    2550:	80 e0       	ldi	r24, 0x00	; 0
    2552:	61 e0       	ldi	r22, 0x01	; 1
    2554:	41 e0       	ldi	r20, 0x01	; 1
    2556:	0e 94 e6 08 	call	0x11cc	; 0x11cc <GPIO_writePin>
    255a:	fe 01       	movw	r30, r28
    255c:	e1 5a       	subi	r30, 0xA1	; 161
    255e:	ff 4f       	sbci	r31, 0xFF	; 255
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	a0 e8       	ldi	r26, 0x80	; 128
    2566:	bf e3       	ldi	r27, 0x3F	; 63
    2568:	80 83       	st	Z, r24
    256a:	91 83       	std	Z+1, r25	; 0x01
    256c:	a2 83       	std	Z+2, r26	; 0x02
    256e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2570:	8e 01       	movw	r16, r28
    2572:	05 5a       	subi	r16, 0xA5	; 165
    2574:	1f 4f       	sbci	r17, 0xFF	; 255
    2576:	fe 01       	movw	r30, r28
    2578:	e1 5a       	subi	r30, 0xA1	; 161
    257a:	ff 4f       	sbci	r31, 0xFF	; 255
    257c:	60 81       	ld	r22, Z
    257e:	71 81       	ldd	r23, Z+1	; 0x01
    2580:	82 81       	ldd	r24, Z+2	; 0x02
    2582:	93 81       	ldd	r25, Z+3	; 0x03
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	4a e7       	ldi	r20, 0x7A	; 122
    258a:	55 e4       	ldi	r21, 0x45	; 69
    258c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	f8 01       	movw	r30, r16
    2596:	80 83       	st	Z, r24
    2598:	91 83       	std	Z+1, r25	; 0x01
    259a:	a2 83       	std	Z+2, r26	; 0x02
    259c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    259e:	fe 01       	movw	r30, r28
    25a0:	e5 5a       	subi	r30, 0xA5	; 165
    25a2:	ff 4f       	sbci	r31, 0xFF	; 255
    25a4:	60 81       	ld	r22, Z
    25a6:	71 81       	ldd	r23, Z+1	; 0x01
    25a8:	82 81       	ldd	r24, Z+2	; 0x02
    25aa:	93 81       	ldd	r25, Z+3	; 0x03
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	40 e8       	ldi	r20, 0x80	; 128
    25b2:	5f e3       	ldi	r21, 0x3F	; 63
    25b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25b8:	88 23       	and	r24, r24
    25ba:	44 f4       	brge	.+16     	; 0x25cc <LCD_DisplayCharacter+0x9e>
		__ticks = 1;
    25bc:	fe 01       	movw	r30, r28
    25be:	e7 5a       	subi	r30, 0xA7	; 167
    25c0:	ff 4f       	sbci	r31, 0xFF	; 255
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	91 83       	std	Z+1, r25	; 0x01
    25c8:	80 83       	st	Z, r24
    25ca:	64 c0       	rjmp	.+200    	; 0x2694 <LCD_DisplayCharacter+0x166>
	else if (__tmp > 65535)
    25cc:	fe 01       	movw	r30, r28
    25ce:	e5 5a       	subi	r30, 0xA5	; 165
    25d0:	ff 4f       	sbci	r31, 0xFF	; 255
    25d2:	60 81       	ld	r22, Z
    25d4:	71 81       	ldd	r23, Z+1	; 0x01
    25d6:	82 81       	ldd	r24, Z+2	; 0x02
    25d8:	93 81       	ldd	r25, Z+3	; 0x03
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	3f ef       	ldi	r19, 0xFF	; 255
    25de:	4f e7       	ldi	r20, 0x7F	; 127
    25e0:	57 e4       	ldi	r21, 0x47	; 71
    25e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25e6:	18 16       	cp	r1, r24
    25e8:	0c f0       	brlt	.+2      	; 0x25ec <LCD_DisplayCharacter+0xbe>
    25ea:	43 c0       	rjmp	.+134    	; 0x2672 <LCD_DisplayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ec:	fe 01       	movw	r30, r28
    25ee:	e1 5a       	subi	r30, 0xA1	; 161
    25f0:	ff 4f       	sbci	r31, 0xFF	; 255
    25f2:	60 81       	ld	r22, Z
    25f4:	71 81       	ldd	r23, Z+1	; 0x01
    25f6:	82 81       	ldd	r24, Z+2	; 0x02
    25f8:	93 81       	ldd	r25, Z+3	; 0x03
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	40 e2       	ldi	r20, 0x20	; 32
    2600:	51 e4       	ldi	r21, 0x41	; 65
    2602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2606:	dc 01       	movw	r26, r24
    2608:	cb 01       	movw	r24, r22
    260a:	8e 01       	movw	r16, r28
    260c:	07 5a       	subi	r16, 0xA7	; 167
    260e:	1f 4f       	sbci	r17, 0xFF	; 255
    2610:	bc 01       	movw	r22, r24
    2612:	cd 01       	movw	r24, r26
    2614:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	f8 01       	movw	r30, r16
    261e:	91 83       	std	Z+1, r25	; 0x01
    2620:	80 83       	st	Z, r24
    2622:	1f c0       	rjmp	.+62     	; 0x2662 <LCD_DisplayCharacter+0x134>
    2624:	fe 01       	movw	r30, r28
    2626:	e9 5a       	subi	r30, 0xA9	; 169
    2628:	ff 4f       	sbci	r31, 0xFF	; 255
    262a:	80 e9       	ldi	r24, 0x90	; 144
    262c:	91 e0       	ldi	r25, 0x01	; 1
    262e:	91 83       	std	Z+1, r25	; 0x01
    2630:	80 83       	st	Z, r24
    2632:	fe 01       	movw	r30, r28
    2634:	e9 5a       	subi	r30, 0xA9	; 169
    2636:	ff 4f       	sbci	r31, 0xFF	; 255
    2638:	80 81       	ld	r24, Z
    263a:	91 81       	ldd	r25, Z+1	; 0x01
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	f1 f7       	brne	.-4      	; 0x263c <LCD_DisplayCharacter+0x10e>
    2640:	fe 01       	movw	r30, r28
    2642:	e9 5a       	subi	r30, 0xA9	; 169
    2644:	ff 4f       	sbci	r31, 0xFF	; 255
    2646:	91 83       	std	Z+1, r25	; 0x01
    2648:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    264a:	de 01       	movw	r26, r28
    264c:	a7 5a       	subi	r26, 0xA7	; 167
    264e:	bf 4f       	sbci	r27, 0xFF	; 255
    2650:	fe 01       	movw	r30, r28
    2652:	e7 5a       	subi	r30, 0xA7	; 167
    2654:	ff 4f       	sbci	r31, 0xFF	; 255
    2656:	80 81       	ld	r24, Z
    2658:	91 81       	ldd	r25, Z+1	; 0x01
    265a:	01 97       	sbiw	r24, 0x01	; 1
    265c:	11 96       	adiw	r26, 0x01	; 1
    265e:	9c 93       	st	X, r25
    2660:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2662:	fe 01       	movw	r30, r28
    2664:	e7 5a       	subi	r30, 0xA7	; 167
    2666:	ff 4f       	sbci	r31, 0xFF	; 255
    2668:	80 81       	ld	r24, Z
    266a:	91 81       	ldd	r25, Z+1	; 0x01
    266c:	00 97       	sbiw	r24, 0x00	; 0
    266e:	d1 f6       	brne	.-76     	; 0x2624 <LCD_DisplayCharacter+0xf6>
    2670:	27 c0       	rjmp	.+78     	; 0x26c0 <LCD_DisplayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2672:	8e 01       	movw	r16, r28
    2674:	07 5a       	subi	r16, 0xA7	; 167
    2676:	1f 4f       	sbci	r17, 0xFF	; 255
    2678:	fe 01       	movw	r30, r28
    267a:	e5 5a       	subi	r30, 0xA5	; 165
    267c:	ff 4f       	sbci	r31, 0xFF	; 255
    267e:	60 81       	ld	r22, Z
    2680:	71 81       	ldd	r23, Z+1	; 0x01
    2682:	82 81       	ldd	r24, Z+2	; 0x02
    2684:	93 81       	ldd	r25, Z+3	; 0x03
    2686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268a:	dc 01       	movw	r26, r24
    268c:	cb 01       	movw	r24, r22
    268e:	f8 01       	movw	r30, r16
    2690:	91 83       	std	Z+1, r25	; 0x01
    2692:	80 83       	st	Z, r24
    2694:	de 01       	movw	r26, r28
    2696:	ab 5a       	subi	r26, 0xAB	; 171
    2698:	bf 4f       	sbci	r27, 0xFF	; 255
    269a:	fe 01       	movw	r30, r28
    269c:	e7 5a       	subi	r30, 0xA7	; 167
    269e:	ff 4f       	sbci	r31, 0xFF	; 255
    26a0:	80 81       	ld	r24, Z
    26a2:	91 81       	ldd	r25, Z+1	; 0x01
    26a4:	8d 93       	st	X+, r24
    26a6:	9c 93       	st	X, r25
    26a8:	fe 01       	movw	r30, r28
    26aa:	eb 5a       	subi	r30, 0xAB	; 171
    26ac:	ff 4f       	sbci	r31, 0xFF	; 255
    26ae:	80 81       	ld	r24, Z
    26b0:	91 81       	ldd	r25, Z+1	; 0x01
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	f1 f7       	brne	.-4      	; 0x26b2 <LCD_DisplayCharacter+0x184>
    26b6:	fe 01       	movw	r30, r28
    26b8:	eb 5a       	subi	r30, 0xAB	; 171
    26ba:	ff 4f       	sbci	r31, 0xFF	; 255
    26bc:	91 83       	std	Z+1, r25	; 0x01
    26be:	80 83       	st	Z, r24
	_delay_ms(1); /* Delay 1 us */
	/* Set Enable to LOGIC_HIGH */
	GPIO_writePin(LCD_ENABLE_PORT, LCD_ENABLE_PIN, LOGIC_HIGH);
    26c0:	80 e0       	ldi	r24, 0x00	; 0
    26c2:	62 e0       	ldi	r22, 0x02	; 2
    26c4:	41 e0       	ldi	r20, 0x01	; 1
    26c6:	0e 94 e6 08 	call	0x11cc	; 0x11cc <GPIO_writePin>
    26ca:	fe 01       	movw	r30, r28
    26cc:	ef 5a       	subi	r30, 0xAF	; 175
    26ce:	ff 4f       	sbci	r31, 0xFF	; 255
    26d0:	80 e0       	ldi	r24, 0x00	; 0
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	a0 e8       	ldi	r26, 0x80	; 128
    26d6:	bf e3       	ldi	r27, 0x3F	; 63
    26d8:	80 83       	st	Z, r24
    26da:	91 83       	std	Z+1, r25	; 0x01
    26dc:	a2 83       	std	Z+2, r26	; 0x02
    26de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e0:	8e 01       	movw	r16, r28
    26e2:	03 5b       	subi	r16, 0xB3	; 179
    26e4:	1f 4f       	sbci	r17, 0xFF	; 255
    26e6:	fe 01       	movw	r30, r28
    26e8:	ef 5a       	subi	r30, 0xAF	; 175
    26ea:	ff 4f       	sbci	r31, 0xFF	; 255
    26ec:	60 81       	ld	r22, Z
    26ee:	71 81       	ldd	r23, Z+1	; 0x01
    26f0:	82 81       	ldd	r24, Z+2	; 0x02
    26f2:	93 81       	ldd	r25, Z+3	; 0x03
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	4a e7       	ldi	r20, 0x7A	; 122
    26fa:	55 e4       	ldi	r21, 0x45	; 69
    26fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2700:	dc 01       	movw	r26, r24
    2702:	cb 01       	movw	r24, r22
    2704:	f8 01       	movw	r30, r16
    2706:	80 83       	st	Z, r24
    2708:	91 83       	std	Z+1, r25	; 0x01
    270a:	a2 83       	std	Z+2, r26	; 0x02
    270c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    270e:	fe 01       	movw	r30, r28
    2710:	e3 5b       	subi	r30, 0xB3	; 179
    2712:	ff 4f       	sbci	r31, 0xFF	; 255
    2714:	60 81       	ld	r22, Z
    2716:	71 81       	ldd	r23, Z+1	; 0x01
    2718:	82 81       	ldd	r24, Z+2	; 0x02
    271a:	93 81       	ldd	r25, Z+3	; 0x03
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	40 e8       	ldi	r20, 0x80	; 128
    2722:	5f e3       	ldi	r21, 0x3F	; 63
    2724:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2728:	88 23       	and	r24, r24
    272a:	44 f4       	brge	.+16     	; 0x273c <LCD_DisplayCharacter+0x20e>
		__ticks = 1;
    272c:	fe 01       	movw	r30, r28
    272e:	e5 5b       	subi	r30, 0xB5	; 181
    2730:	ff 4f       	sbci	r31, 0xFF	; 255
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	91 83       	std	Z+1, r25	; 0x01
    2738:	80 83       	st	Z, r24
    273a:	64 c0       	rjmp	.+200    	; 0x2804 <LCD_DisplayCharacter+0x2d6>
	else if (__tmp > 65535)
    273c:	fe 01       	movw	r30, r28
    273e:	e3 5b       	subi	r30, 0xB3	; 179
    2740:	ff 4f       	sbci	r31, 0xFF	; 255
    2742:	60 81       	ld	r22, Z
    2744:	71 81       	ldd	r23, Z+1	; 0x01
    2746:	82 81       	ldd	r24, Z+2	; 0x02
    2748:	93 81       	ldd	r25, Z+3	; 0x03
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	3f ef       	ldi	r19, 0xFF	; 255
    274e:	4f e7       	ldi	r20, 0x7F	; 127
    2750:	57 e4       	ldi	r21, 0x47	; 71
    2752:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2756:	18 16       	cp	r1, r24
    2758:	0c f0       	brlt	.+2      	; 0x275c <LCD_DisplayCharacter+0x22e>
    275a:	43 c0       	rjmp	.+134    	; 0x27e2 <LCD_DisplayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    275c:	fe 01       	movw	r30, r28
    275e:	ef 5a       	subi	r30, 0xAF	; 175
    2760:	ff 4f       	sbci	r31, 0xFF	; 255
    2762:	60 81       	ld	r22, Z
    2764:	71 81       	ldd	r23, Z+1	; 0x01
    2766:	82 81       	ldd	r24, Z+2	; 0x02
    2768:	93 81       	ldd	r25, Z+3	; 0x03
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	40 e2       	ldi	r20, 0x20	; 32
    2770:	51 e4       	ldi	r21, 0x41	; 65
    2772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	8e 01       	movw	r16, r28
    277c:	05 5b       	subi	r16, 0xB5	; 181
    277e:	1f 4f       	sbci	r17, 0xFF	; 255
    2780:	bc 01       	movw	r22, r24
    2782:	cd 01       	movw	r24, r26
    2784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2788:	dc 01       	movw	r26, r24
    278a:	cb 01       	movw	r24, r22
    278c:	f8 01       	movw	r30, r16
    278e:	91 83       	std	Z+1, r25	; 0x01
    2790:	80 83       	st	Z, r24
    2792:	1f c0       	rjmp	.+62     	; 0x27d2 <LCD_DisplayCharacter+0x2a4>
    2794:	fe 01       	movw	r30, r28
    2796:	e7 5b       	subi	r30, 0xB7	; 183
    2798:	ff 4f       	sbci	r31, 0xFF	; 255
    279a:	80 e9       	ldi	r24, 0x90	; 144
    279c:	91 e0       	ldi	r25, 0x01	; 1
    279e:	91 83       	std	Z+1, r25	; 0x01
    27a0:	80 83       	st	Z, r24
    27a2:	fe 01       	movw	r30, r28
    27a4:	e7 5b       	subi	r30, 0xB7	; 183
    27a6:	ff 4f       	sbci	r31, 0xFF	; 255
    27a8:	80 81       	ld	r24, Z
    27aa:	91 81       	ldd	r25, Z+1	; 0x01
    27ac:	01 97       	sbiw	r24, 0x01	; 1
    27ae:	f1 f7       	brne	.-4      	; 0x27ac <LCD_DisplayCharacter+0x27e>
    27b0:	fe 01       	movw	r30, r28
    27b2:	e7 5b       	subi	r30, 0xB7	; 183
    27b4:	ff 4f       	sbci	r31, 0xFF	; 255
    27b6:	91 83       	std	Z+1, r25	; 0x01
    27b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ba:	de 01       	movw	r26, r28
    27bc:	a5 5b       	subi	r26, 0xB5	; 181
    27be:	bf 4f       	sbci	r27, 0xFF	; 255
    27c0:	fe 01       	movw	r30, r28
    27c2:	e5 5b       	subi	r30, 0xB5	; 181
    27c4:	ff 4f       	sbci	r31, 0xFF	; 255
    27c6:	80 81       	ld	r24, Z
    27c8:	91 81       	ldd	r25, Z+1	; 0x01
    27ca:	01 97       	sbiw	r24, 0x01	; 1
    27cc:	11 96       	adiw	r26, 0x01	; 1
    27ce:	9c 93       	st	X, r25
    27d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27d2:	fe 01       	movw	r30, r28
    27d4:	e5 5b       	subi	r30, 0xB5	; 181
    27d6:	ff 4f       	sbci	r31, 0xFF	; 255
    27d8:	80 81       	ld	r24, Z
    27da:	91 81       	ldd	r25, Z+1	; 0x01
    27dc:	00 97       	sbiw	r24, 0x00	; 0
    27de:	d1 f6       	brne	.-76     	; 0x2794 <LCD_DisplayCharacter+0x266>
    27e0:	27 c0       	rjmp	.+78     	; 0x2830 <LCD_DisplayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e2:	8e 01       	movw	r16, r28
    27e4:	05 5b       	subi	r16, 0xB5	; 181
    27e6:	1f 4f       	sbci	r17, 0xFF	; 255
    27e8:	fe 01       	movw	r30, r28
    27ea:	e3 5b       	subi	r30, 0xB3	; 179
    27ec:	ff 4f       	sbci	r31, 0xFF	; 255
    27ee:	60 81       	ld	r22, Z
    27f0:	71 81       	ldd	r23, Z+1	; 0x01
    27f2:	82 81       	ldd	r24, Z+2	; 0x02
    27f4:	93 81       	ldd	r25, Z+3	; 0x03
    27f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27fa:	dc 01       	movw	r26, r24
    27fc:	cb 01       	movw	r24, r22
    27fe:	f8 01       	movw	r30, r16
    2800:	91 83       	std	Z+1, r25	; 0x01
    2802:	80 83       	st	Z, r24
    2804:	de 01       	movw	r26, r28
    2806:	a9 5b       	subi	r26, 0xB9	; 185
    2808:	bf 4f       	sbci	r27, 0xFF	; 255
    280a:	fe 01       	movw	r30, r28
    280c:	e5 5b       	subi	r30, 0xB5	; 181
    280e:	ff 4f       	sbci	r31, 0xFF	; 255
    2810:	80 81       	ld	r24, Z
    2812:	91 81       	ldd	r25, Z+1	; 0x01
    2814:	8d 93       	st	X+, r24
    2816:	9c 93       	st	X, r25
    2818:	fe 01       	movw	r30, r28
    281a:	e9 5b       	subi	r30, 0xB9	; 185
    281c:	ff 4f       	sbci	r31, 0xFF	; 255
    281e:	80 81       	ld	r24, Z
    2820:	91 81       	ldd	r25, Z+1	; 0x01
    2822:	01 97       	sbiw	r24, 0x01	; 1
    2824:	f1 f7       	brne	.-4      	; 0x2822 <LCD_DisplayCharacter+0x2f4>
    2826:	fe 01       	movw	r30, r28
    2828:	e9 5b       	subi	r30, 0xB9	; 185
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	91 83       	std	Z+1, r25	; 0x01
    282e:	80 83       	st	Z, r24
	_delay_ms(1);
	/* Send Command*/
#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT, LCD_DB4_PIN, GET_BIT(Data, 4));
    2830:	fe 01       	movw	r30, r28
    2832:	ed 59       	subi	r30, 0x9D	; 157
    2834:	ff 4f       	sbci	r31, 0xFF	; 255
    2836:	80 81       	ld	r24, Z
    2838:	88 2f       	mov	r24, r24
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	80 71       	andi	r24, 0x10	; 16
    283e:	90 70       	andi	r25, 0x00	; 0
    2840:	95 95       	asr	r25
    2842:	87 95       	ror	r24
    2844:	95 95       	asr	r25
    2846:	87 95       	ror	r24
    2848:	95 95       	asr	r25
    284a:	87 95       	ror	r24
    284c:	95 95       	asr	r25
    284e:	87 95       	ror	r24
    2850:	98 2f       	mov	r25, r24
    2852:	80 e0       	ldi	r24, 0x00	; 0
    2854:	63 e0       	ldi	r22, 0x03	; 3
    2856:	49 2f       	mov	r20, r25
    2858:	0e 94 e6 08 	call	0x11cc	; 0x11cc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT, LCD_DB5_PIN, GET_BIT(Data, 5));
    285c:	fe 01       	movw	r30, r28
    285e:	ed 59       	subi	r30, 0x9D	; 157
    2860:	ff 4f       	sbci	r31, 0xFF	; 255
    2862:	80 81       	ld	r24, Z
    2864:	88 2f       	mov	r24, r24
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	80 72       	andi	r24, 0x20	; 32
    286a:	90 70       	andi	r25, 0x00	; 0
    286c:	95 95       	asr	r25
    286e:	87 95       	ror	r24
    2870:	95 95       	asr	r25
    2872:	87 95       	ror	r24
    2874:	95 95       	asr	r25
    2876:	87 95       	ror	r24
    2878:	95 95       	asr	r25
    287a:	87 95       	ror	r24
    287c:	95 95       	asr	r25
    287e:	87 95       	ror	r24
    2880:	98 2f       	mov	r25, r24
    2882:	80 e0       	ldi	r24, 0x00	; 0
    2884:	64 e0       	ldi	r22, 0x04	; 4
    2886:	49 2f       	mov	r20, r25
    2888:	0e 94 e6 08 	call	0x11cc	; 0x11cc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT, LCD_DB6_PIN, GET_BIT(Data, 6));
    288c:	fe 01       	movw	r30, r28
    288e:	ed 59       	subi	r30, 0x9D	; 157
    2890:	ff 4f       	sbci	r31, 0xFF	; 255
    2892:	80 81       	ld	r24, Z
    2894:	88 2f       	mov	r24, r24
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	80 74       	andi	r24, 0x40	; 64
    289a:	90 70       	andi	r25, 0x00	; 0
    289c:	08 2e       	mov	r0, r24
    289e:	89 2f       	mov	r24, r25
    28a0:	00 0c       	add	r0, r0
    28a2:	88 1f       	adc	r24, r24
    28a4:	99 0b       	sbc	r25, r25
    28a6:	00 0c       	add	r0, r0
    28a8:	88 1f       	adc	r24, r24
    28aa:	99 1f       	adc	r25, r25
    28ac:	98 2f       	mov	r25, r24
    28ae:	80 e0       	ldi	r24, 0x00	; 0
    28b0:	65 e0       	ldi	r22, 0x05	; 5
    28b2:	49 2f       	mov	r20, r25
    28b4:	0e 94 e6 08 	call	0x11cc	; 0x11cc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT, LCD_DB7_PIN, GET_BIT(Data, 7));
    28b8:	fe 01       	movw	r30, r28
    28ba:	ed 59       	subi	r30, 0x9D	; 157
    28bc:	ff 4f       	sbci	r31, 0xFF	; 255
    28be:	80 81       	ld	r24, Z
    28c0:	98 2f       	mov	r25, r24
    28c2:	99 1f       	adc	r25, r25
    28c4:	99 27       	eor	r25, r25
    28c6:	99 1f       	adc	r25, r25
    28c8:	80 e0       	ldi	r24, 0x00	; 0
    28ca:	66 e0       	ldi	r22, 0x06	; 6
    28cc:	49 2f       	mov	r20, r25
    28ce:	0e 94 e6 08 	call	0x11cc	; 0x11cc <GPIO_writePin>
    28d2:	fe 01       	movw	r30, r28
    28d4:	ed 5b       	subi	r30, 0xBD	; 189
    28d6:	ff 4f       	sbci	r31, 0xFF	; 255
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	a0 e8       	ldi	r26, 0x80	; 128
    28de:	bf e3       	ldi	r27, 0x3F	; 63
    28e0:	80 83       	st	Z, r24
    28e2:	91 83       	std	Z+1, r25	; 0x01
    28e4:	a2 83       	std	Z+2, r26	; 0x02
    28e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e8:	8e 01       	movw	r16, r28
    28ea:	01 5c       	subi	r16, 0xC1	; 193
    28ec:	1f 4f       	sbci	r17, 0xFF	; 255
    28ee:	fe 01       	movw	r30, r28
    28f0:	ed 5b       	subi	r30, 0xBD	; 189
    28f2:	ff 4f       	sbci	r31, 0xFF	; 255
    28f4:	60 81       	ld	r22, Z
    28f6:	71 81       	ldd	r23, Z+1	; 0x01
    28f8:	82 81       	ldd	r24, Z+2	; 0x02
    28fa:	93 81       	ldd	r25, Z+3	; 0x03
    28fc:	20 e0       	ldi	r18, 0x00	; 0
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	4a e7       	ldi	r20, 0x7A	; 122
    2902:	55 e4       	ldi	r21, 0x45	; 69
    2904:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	f8 01       	movw	r30, r16
    290e:	80 83       	st	Z, r24
    2910:	91 83       	std	Z+1, r25	; 0x01
    2912:	a2 83       	std	Z+2, r26	; 0x02
    2914:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2916:	fe 01       	movw	r30, r28
    2918:	ff 96       	adiw	r30, 0x3f	; 63
    291a:	60 81       	ld	r22, Z
    291c:	71 81       	ldd	r23, Z+1	; 0x01
    291e:	82 81       	ldd	r24, Z+2	; 0x02
    2920:	93 81       	ldd	r25, Z+3	; 0x03
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	40 e8       	ldi	r20, 0x80	; 128
    2928:	5f e3       	ldi	r21, 0x3F	; 63
    292a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    292e:	88 23       	and	r24, r24
    2930:	2c f4       	brge	.+10     	; 0x293c <LCD_DisplayCharacter+0x40e>
		__ticks = 1;
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	9e af       	std	Y+62, r25	; 0x3e
    2938:	8d af       	std	Y+61, r24	; 0x3d
    293a:	46 c0       	rjmp	.+140    	; 0x29c8 <LCD_DisplayCharacter+0x49a>
	else if (__tmp > 65535)
    293c:	fe 01       	movw	r30, r28
    293e:	ff 96       	adiw	r30, 0x3f	; 63
    2940:	60 81       	ld	r22, Z
    2942:	71 81       	ldd	r23, Z+1	; 0x01
    2944:	82 81       	ldd	r24, Z+2	; 0x02
    2946:	93 81       	ldd	r25, Z+3	; 0x03
    2948:	20 e0       	ldi	r18, 0x00	; 0
    294a:	3f ef       	ldi	r19, 0xFF	; 255
    294c:	4f e7       	ldi	r20, 0x7F	; 127
    294e:	57 e4       	ldi	r21, 0x47	; 71
    2950:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2954:	18 16       	cp	r1, r24
    2956:	64 f5       	brge	.+88     	; 0x29b0 <LCD_DisplayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2958:	fe 01       	movw	r30, r28
    295a:	ed 5b       	subi	r30, 0xBD	; 189
    295c:	ff 4f       	sbci	r31, 0xFF	; 255
    295e:	60 81       	ld	r22, Z
    2960:	71 81       	ldd	r23, Z+1	; 0x01
    2962:	82 81       	ldd	r24, Z+2	; 0x02
    2964:	93 81       	ldd	r25, Z+3	; 0x03
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	40 e2       	ldi	r20, 0x20	; 32
    296c:	51 e4       	ldi	r21, 0x41	; 65
    296e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	bc 01       	movw	r22, r24
    2978:	cd 01       	movw	r24, r26
    297a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    297e:	dc 01       	movw	r26, r24
    2980:	cb 01       	movw	r24, r22
    2982:	9e af       	std	Y+62, r25	; 0x3e
    2984:	8d af       	std	Y+61, r24	; 0x3d
    2986:	0f c0       	rjmp	.+30     	; 0x29a6 <LCD_DisplayCharacter+0x478>
    2988:	80 e9       	ldi	r24, 0x90	; 144
    298a:	91 e0       	ldi	r25, 0x01	; 1
    298c:	9c af       	std	Y+60, r25	; 0x3c
    298e:	8b af       	std	Y+59, r24	; 0x3b
    2990:	8b ad       	ldd	r24, Y+59	; 0x3b
    2992:	9c ad       	ldd	r25, Y+60	; 0x3c
    2994:	01 97       	sbiw	r24, 0x01	; 1
    2996:	f1 f7       	brne	.-4      	; 0x2994 <LCD_DisplayCharacter+0x466>
    2998:	9c af       	std	Y+60, r25	; 0x3c
    299a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    299c:	8d ad       	ldd	r24, Y+61	; 0x3d
    299e:	9e ad       	ldd	r25, Y+62	; 0x3e
    29a0:	01 97       	sbiw	r24, 0x01	; 1
    29a2:	9e af       	std	Y+62, r25	; 0x3e
    29a4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    29a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    29aa:	00 97       	sbiw	r24, 0x00	; 0
    29ac:	69 f7       	brne	.-38     	; 0x2988 <LCD_DisplayCharacter+0x45a>
    29ae:	16 c0       	rjmp	.+44     	; 0x29dc <LCD_DisplayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b0:	fe 01       	movw	r30, r28
    29b2:	ff 96       	adiw	r30, 0x3f	; 63
    29b4:	60 81       	ld	r22, Z
    29b6:	71 81       	ldd	r23, Z+1	; 0x01
    29b8:	82 81       	ldd	r24, Z+2	; 0x02
    29ba:	93 81       	ldd	r25, Z+3	; 0x03
    29bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	9e af       	std	Y+62, r25	; 0x3e
    29c6:	8d af       	std	Y+61, r24	; 0x3d
    29c8:	8d ad       	ldd	r24, Y+61	; 0x3d
    29ca:	9e ad       	ldd	r25, Y+62	; 0x3e
    29cc:	9a af       	std	Y+58, r25	; 0x3a
    29ce:	89 af       	std	Y+57, r24	; 0x39
    29d0:	89 ad       	ldd	r24, Y+57	; 0x39
    29d2:	9a ad       	ldd	r25, Y+58	; 0x3a
    29d4:	01 97       	sbiw	r24, 0x01	; 1
    29d6:	f1 f7       	brne	.-4      	; 0x29d4 <LCD_DisplayCharacter+0x4a6>
    29d8:	9a af       	std	Y+58, r25	; 0x3a
    29da:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	GPIO_writePin(LCD_ENABLE_PORT, LCD_ENABLE_PIN, LOGIC_LOW);
    29dc:	80 e0       	ldi	r24, 0x00	; 0
    29de:	62 e0       	ldi	r22, 0x02	; 2
    29e0:	40 e0       	ldi	r20, 0x00	; 0
    29e2:	0e 94 e6 08 	call	0x11cc	; 0x11cc <GPIO_writePin>
    29e6:	80 e0       	ldi	r24, 0x00	; 0
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	a0 e8       	ldi	r26, 0x80	; 128
    29ec:	bf e3       	ldi	r27, 0x3F	; 63
    29ee:	8d ab       	std	Y+53, r24	; 0x35
    29f0:	9e ab       	std	Y+54, r25	; 0x36
    29f2:	af ab       	std	Y+55, r26	; 0x37
    29f4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29f6:	6d a9       	ldd	r22, Y+53	; 0x35
    29f8:	7e a9       	ldd	r23, Y+54	; 0x36
    29fa:	8f a9       	ldd	r24, Y+55	; 0x37
    29fc:	98 ad       	ldd	r25, Y+56	; 0x38
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	4a e7       	ldi	r20, 0x7A	; 122
    2a04:	55 e4       	ldi	r21, 0x45	; 69
    2a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	89 ab       	std	Y+49, r24	; 0x31
    2a10:	9a ab       	std	Y+50, r25	; 0x32
    2a12:	ab ab       	std	Y+51, r26	; 0x33
    2a14:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a16:	69 a9       	ldd	r22, Y+49	; 0x31
    2a18:	7a a9       	ldd	r23, Y+50	; 0x32
    2a1a:	8b a9       	ldd	r24, Y+51	; 0x33
    2a1c:	9c a9       	ldd	r25, Y+52	; 0x34
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	40 e8       	ldi	r20, 0x80	; 128
    2a24:	5f e3       	ldi	r21, 0x3F	; 63
    2a26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a2a:	88 23       	and	r24, r24
    2a2c:	2c f4       	brge	.+10     	; 0x2a38 <LCD_DisplayCharacter+0x50a>
		__ticks = 1;
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	98 ab       	std	Y+48, r25	; 0x30
    2a34:	8f a7       	std	Y+47, r24	; 0x2f
    2a36:	3f c0       	rjmp	.+126    	; 0x2ab6 <LCD_DisplayCharacter+0x588>
	else if (__tmp > 65535)
    2a38:	69 a9       	ldd	r22, Y+49	; 0x31
    2a3a:	7a a9       	ldd	r23, Y+50	; 0x32
    2a3c:	8b a9       	ldd	r24, Y+51	; 0x33
    2a3e:	9c a9       	ldd	r25, Y+52	; 0x34
    2a40:	20 e0       	ldi	r18, 0x00	; 0
    2a42:	3f ef       	ldi	r19, 0xFF	; 255
    2a44:	4f e7       	ldi	r20, 0x7F	; 127
    2a46:	57 e4       	ldi	r21, 0x47	; 71
    2a48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a4c:	18 16       	cp	r1, r24
    2a4e:	4c f5       	brge	.+82     	; 0x2aa2 <LCD_DisplayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a50:	6d a9       	ldd	r22, Y+53	; 0x35
    2a52:	7e a9       	ldd	r23, Y+54	; 0x36
    2a54:	8f a9       	ldd	r24, Y+55	; 0x37
    2a56:	98 ad       	ldd	r25, Y+56	; 0x38
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	40 e2       	ldi	r20, 0x20	; 32
    2a5e:	51 e4       	ldi	r21, 0x41	; 65
    2a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	bc 01       	movw	r22, r24
    2a6a:	cd 01       	movw	r24, r26
    2a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	98 ab       	std	Y+48, r25	; 0x30
    2a76:	8f a7       	std	Y+47, r24	; 0x2f
    2a78:	0f c0       	rjmp	.+30     	; 0x2a98 <LCD_DisplayCharacter+0x56a>
    2a7a:	80 e9       	ldi	r24, 0x90	; 144
    2a7c:	91 e0       	ldi	r25, 0x01	; 1
    2a7e:	9e a7       	std	Y+46, r25	; 0x2e
    2a80:	8d a7       	std	Y+45, r24	; 0x2d
    2a82:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a84:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a86:	01 97       	sbiw	r24, 0x01	; 1
    2a88:	f1 f7       	brne	.-4      	; 0x2a86 <LCD_DisplayCharacter+0x558>
    2a8a:	9e a7       	std	Y+46, r25	; 0x2e
    2a8c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a90:	98 a9       	ldd	r25, Y+48	; 0x30
    2a92:	01 97       	sbiw	r24, 0x01	; 1
    2a94:	98 ab       	std	Y+48, r25	; 0x30
    2a96:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a98:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a9a:	98 a9       	ldd	r25, Y+48	; 0x30
    2a9c:	00 97       	sbiw	r24, 0x00	; 0
    2a9e:	69 f7       	brne	.-38     	; 0x2a7a <LCD_DisplayCharacter+0x54c>
    2aa0:	14 c0       	rjmp	.+40     	; 0x2aca <LCD_DisplayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aa2:	69 a9       	ldd	r22, Y+49	; 0x31
    2aa4:	7a a9       	ldd	r23, Y+50	; 0x32
    2aa6:	8b a9       	ldd	r24, Y+51	; 0x33
    2aa8:	9c a9       	ldd	r25, Y+52	; 0x34
    2aaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aae:	dc 01       	movw	r26, r24
    2ab0:	cb 01       	movw	r24, r22
    2ab2:	98 ab       	std	Y+48, r25	; 0x30
    2ab4:	8f a7       	std	Y+47, r24	; 0x2f
    2ab6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ab8:	98 a9       	ldd	r25, Y+48	; 0x30
    2aba:	9c a7       	std	Y+44, r25	; 0x2c
    2abc:	8b a7       	std	Y+43, r24	; 0x2b
    2abe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ac0:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ac2:	01 97       	sbiw	r24, 0x01	; 1
    2ac4:	f1 f7       	brne	.-4      	; 0x2ac2 <LCD_DisplayCharacter+0x594>
    2ac6:	9c a7       	std	Y+44, r25	; 0x2c
    2ac8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_ENABLE_PORT, LCD_ENABLE_PIN, LOGIC_HIGH);
    2aca:	80 e0       	ldi	r24, 0x00	; 0
    2acc:	62 e0       	ldi	r22, 0x02	; 2
    2ace:	41 e0       	ldi	r20, 0x01	; 1
    2ad0:	0e 94 e6 08 	call	0x11cc	; 0x11cc <GPIO_writePin>
    2ad4:	80 e0       	ldi	r24, 0x00	; 0
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	a0 e8       	ldi	r26, 0x80	; 128
    2ada:	bf e3       	ldi	r27, 0x3F	; 63
    2adc:	8f a3       	std	Y+39, r24	; 0x27
    2ade:	98 a7       	std	Y+40, r25	; 0x28
    2ae0:	a9 a7       	std	Y+41, r26	; 0x29
    2ae2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae4:	6f a1       	ldd	r22, Y+39	; 0x27
    2ae6:	78 a5       	ldd	r23, Y+40	; 0x28
    2ae8:	89 a5       	ldd	r24, Y+41	; 0x29
    2aea:	9a a5       	ldd	r25, Y+42	; 0x2a
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	4a e7       	ldi	r20, 0x7A	; 122
    2af2:	55 e4       	ldi	r21, 0x45	; 69
    2af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	8b a3       	std	Y+35, r24	; 0x23
    2afe:	9c a3       	std	Y+36, r25	; 0x24
    2b00:	ad a3       	std	Y+37, r26	; 0x25
    2b02:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b04:	6b a1       	ldd	r22, Y+35	; 0x23
    2b06:	7c a1       	ldd	r23, Y+36	; 0x24
    2b08:	8d a1       	ldd	r24, Y+37	; 0x25
    2b0a:	9e a1       	ldd	r25, Y+38	; 0x26
    2b0c:	20 e0       	ldi	r18, 0x00	; 0
    2b0e:	30 e0       	ldi	r19, 0x00	; 0
    2b10:	40 e8       	ldi	r20, 0x80	; 128
    2b12:	5f e3       	ldi	r21, 0x3F	; 63
    2b14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b18:	88 23       	and	r24, r24
    2b1a:	2c f4       	brge	.+10     	; 0x2b26 <LCD_DisplayCharacter+0x5f8>
		__ticks = 1;
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	9a a3       	std	Y+34, r25	; 0x22
    2b22:	89 a3       	std	Y+33, r24	; 0x21
    2b24:	3f c0       	rjmp	.+126    	; 0x2ba4 <LCD_DisplayCharacter+0x676>
	else if (__tmp > 65535)
    2b26:	6b a1       	ldd	r22, Y+35	; 0x23
    2b28:	7c a1       	ldd	r23, Y+36	; 0x24
    2b2a:	8d a1       	ldd	r24, Y+37	; 0x25
    2b2c:	9e a1       	ldd	r25, Y+38	; 0x26
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	3f ef       	ldi	r19, 0xFF	; 255
    2b32:	4f e7       	ldi	r20, 0x7F	; 127
    2b34:	57 e4       	ldi	r21, 0x47	; 71
    2b36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b3a:	18 16       	cp	r1, r24
    2b3c:	4c f5       	brge	.+82     	; 0x2b90 <LCD_DisplayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b3e:	6f a1       	ldd	r22, Y+39	; 0x27
    2b40:	78 a5       	ldd	r23, Y+40	; 0x28
    2b42:	89 a5       	ldd	r24, Y+41	; 0x29
    2b44:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	40 e2       	ldi	r20, 0x20	; 32
    2b4c:	51 e4       	ldi	r21, 0x41	; 65
    2b4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b52:	dc 01       	movw	r26, r24
    2b54:	cb 01       	movw	r24, r22
    2b56:	bc 01       	movw	r22, r24
    2b58:	cd 01       	movw	r24, r26
    2b5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	9a a3       	std	Y+34, r25	; 0x22
    2b64:	89 a3       	std	Y+33, r24	; 0x21
    2b66:	0f c0       	rjmp	.+30     	; 0x2b86 <LCD_DisplayCharacter+0x658>
    2b68:	80 e9       	ldi	r24, 0x90	; 144
    2b6a:	91 e0       	ldi	r25, 0x01	; 1
    2b6c:	98 a3       	std	Y+32, r25	; 0x20
    2b6e:	8f 8f       	std	Y+31, r24	; 0x1f
    2b70:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b72:	98 a1       	ldd	r25, Y+32	; 0x20
    2b74:	01 97       	sbiw	r24, 0x01	; 1
    2b76:	f1 f7       	brne	.-4      	; 0x2b74 <LCD_DisplayCharacter+0x646>
    2b78:	98 a3       	std	Y+32, r25	; 0x20
    2b7a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b7c:	89 a1       	ldd	r24, Y+33	; 0x21
    2b7e:	9a a1       	ldd	r25, Y+34	; 0x22
    2b80:	01 97       	sbiw	r24, 0x01	; 1
    2b82:	9a a3       	std	Y+34, r25	; 0x22
    2b84:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b86:	89 a1       	ldd	r24, Y+33	; 0x21
    2b88:	9a a1       	ldd	r25, Y+34	; 0x22
    2b8a:	00 97       	sbiw	r24, 0x00	; 0
    2b8c:	69 f7       	brne	.-38     	; 0x2b68 <LCD_DisplayCharacter+0x63a>
    2b8e:	14 c0       	rjmp	.+40     	; 0x2bb8 <LCD_DisplayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b90:	6b a1       	ldd	r22, Y+35	; 0x23
    2b92:	7c a1       	ldd	r23, Y+36	; 0x24
    2b94:	8d a1       	ldd	r24, Y+37	; 0x25
    2b96:	9e a1       	ldd	r25, Y+38	; 0x26
    2b98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9c:	dc 01       	movw	r26, r24
    2b9e:	cb 01       	movw	r24, r22
    2ba0:	9a a3       	std	Y+34, r25	; 0x22
    2ba2:	89 a3       	std	Y+33, r24	; 0x21
    2ba4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ba6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ba8:	9e 8f       	std	Y+30, r25	; 0x1e
    2baa:	8d 8f       	std	Y+29, r24	; 0x1d
    2bac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bb0:	01 97       	sbiw	r24, 0x01	; 1
    2bb2:	f1 f7       	brne	.-4      	; 0x2bb0 <LCD_DisplayCharacter+0x682>
    2bb4:	9e 8f       	std	Y+30, r25	; 0x1e
    2bb6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePin(LCD_DATA_PORT, LCD_DB4_PIN, GET_BIT(Data, 0));
    2bb8:	fe 01       	movw	r30, r28
    2bba:	ed 59       	subi	r30, 0x9D	; 157
    2bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbe:	80 81       	ld	r24, Z
    2bc0:	98 2f       	mov	r25, r24
    2bc2:	91 70       	andi	r25, 0x01	; 1
    2bc4:	80 e0       	ldi	r24, 0x00	; 0
    2bc6:	63 e0       	ldi	r22, 0x03	; 3
    2bc8:	49 2f       	mov	r20, r25
    2bca:	0e 94 e6 08 	call	0x11cc	; 0x11cc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT, LCD_DB5_PIN, GET_BIT(Data, 1));
    2bce:	fe 01       	movw	r30, r28
    2bd0:	ed 59       	subi	r30, 0x9D	; 157
    2bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd4:	80 81       	ld	r24, Z
    2bd6:	88 2f       	mov	r24, r24
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	82 70       	andi	r24, 0x02	; 2
    2bdc:	90 70       	andi	r25, 0x00	; 0
    2bde:	95 95       	asr	r25
    2be0:	87 95       	ror	r24
    2be2:	98 2f       	mov	r25, r24
    2be4:	80 e0       	ldi	r24, 0x00	; 0
    2be6:	64 e0       	ldi	r22, 0x04	; 4
    2be8:	49 2f       	mov	r20, r25
    2bea:	0e 94 e6 08 	call	0x11cc	; 0x11cc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT, LCD_DB6_PIN, GET_BIT(Data, 2));
    2bee:	fe 01       	movw	r30, r28
    2bf0:	ed 59       	subi	r30, 0x9D	; 157
    2bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf4:	80 81       	ld	r24, Z
    2bf6:	88 2f       	mov	r24, r24
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	84 70       	andi	r24, 0x04	; 4
    2bfc:	90 70       	andi	r25, 0x00	; 0
    2bfe:	95 95       	asr	r25
    2c00:	87 95       	ror	r24
    2c02:	95 95       	asr	r25
    2c04:	87 95       	ror	r24
    2c06:	98 2f       	mov	r25, r24
    2c08:	80 e0       	ldi	r24, 0x00	; 0
    2c0a:	65 e0       	ldi	r22, 0x05	; 5
    2c0c:	49 2f       	mov	r20, r25
    2c0e:	0e 94 e6 08 	call	0x11cc	; 0x11cc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT, LCD_DB7_PIN, GET_BIT(Data, 3));
    2c12:	fe 01       	movw	r30, r28
    2c14:	ed 59       	subi	r30, 0x9D	; 157
    2c16:	ff 4f       	sbci	r31, 0xFF	; 255
    2c18:	80 81       	ld	r24, Z
    2c1a:	88 2f       	mov	r24, r24
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	88 70       	andi	r24, 0x08	; 8
    2c20:	90 70       	andi	r25, 0x00	; 0
    2c22:	95 95       	asr	r25
    2c24:	87 95       	ror	r24
    2c26:	95 95       	asr	r25
    2c28:	87 95       	ror	r24
    2c2a:	95 95       	asr	r25
    2c2c:	87 95       	ror	r24
    2c2e:	98 2f       	mov	r25, r24
    2c30:	80 e0       	ldi	r24, 0x00	; 0
    2c32:	66 e0       	ldi	r22, 0x06	; 6
    2c34:	49 2f       	mov	r20, r25
    2c36:	0e 94 e6 08 	call	0x11cc	; 0x11cc <GPIO_writePin>
    2c3a:	80 e0       	ldi	r24, 0x00	; 0
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	a0 e8       	ldi	r26, 0x80	; 128
    2c40:	bf e3       	ldi	r27, 0x3F	; 63
    2c42:	89 8f       	std	Y+25, r24	; 0x19
    2c44:	9a 8f       	std	Y+26, r25	; 0x1a
    2c46:	ab 8f       	std	Y+27, r26	; 0x1b
    2c48:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c4a:	69 8d       	ldd	r22, Y+25	; 0x19
    2c4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	4a e7       	ldi	r20, 0x7A	; 122
    2c58:	55 e4       	ldi	r21, 0x45	; 69
    2c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c5e:	dc 01       	movw	r26, r24
    2c60:	cb 01       	movw	r24, r22
    2c62:	8d 8b       	std	Y+21, r24	; 0x15
    2c64:	9e 8b       	std	Y+22, r25	; 0x16
    2c66:	af 8b       	std	Y+23, r26	; 0x17
    2c68:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c6a:	6d 89       	ldd	r22, Y+21	; 0x15
    2c6c:	7e 89       	ldd	r23, Y+22	; 0x16
    2c6e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c70:	98 8d       	ldd	r25, Y+24	; 0x18
    2c72:	20 e0       	ldi	r18, 0x00	; 0
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	40 e8       	ldi	r20, 0x80	; 128
    2c78:	5f e3       	ldi	r21, 0x3F	; 63
    2c7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c7e:	88 23       	and	r24, r24
    2c80:	2c f4       	brge	.+10     	; 0x2c8c <LCD_DisplayCharacter+0x75e>
		__ticks = 1;
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	9c 8b       	std	Y+20, r25	; 0x14
    2c88:	8b 8b       	std	Y+19, r24	; 0x13
    2c8a:	3f c0       	rjmp	.+126    	; 0x2d0a <LCD_DisplayCharacter+0x7dc>
	else if (__tmp > 65535)
    2c8c:	6d 89       	ldd	r22, Y+21	; 0x15
    2c8e:	7e 89       	ldd	r23, Y+22	; 0x16
    2c90:	8f 89       	ldd	r24, Y+23	; 0x17
    2c92:	98 8d       	ldd	r25, Y+24	; 0x18
    2c94:	20 e0       	ldi	r18, 0x00	; 0
    2c96:	3f ef       	ldi	r19, 0xFF	; 255
    2c98:	4f e7       	ldi	r20, 0x7F	; 127
    2c9a:	57 e4       	ldi	r21, 0x47	; 71
    2c9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ca0:	18 16       	cp	r1, r24
    2ca2:	4c f5       	brge	.+82     	; 0x2cf6 <LCD_DisplayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ca6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ca8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2caa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	40 e2       	ldi	r20, 0x20	; 32
    2cb2:	51 e4       	ldi	r21, 0x41	; 65
    2cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	bc 01       	movw	r22, r24
    2cbe:	cd 01       	movw	r24, r26
    2cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc4:	dc 01       	movw	r26, r24
    2cc6:	cb 01       	movw	r24, r22
    2cc8:	9c 8b       	std	Y+20, r25	; 0x14
    2cca:	8b 8b       	std	Y+19, r24	; 0x13
    2ccc:	0f c0       	rjmp	.+30     	; 0x2cec <LCD_DisplayCharacter+0x7be>
    2cce:	80 e9       	ldi	r24, 0x90	; 144
    2cd0:	91 e0       	ldi	r25, 0x01	; 1
    2cd2:	9a 8b       	std	Y+18, r25	; 0x12
    2cd4:	89 8b       	std	Y+17, r24	; 0x11
    2cd6:	89 89       	ldd	r24, Y+17	; 0x11
    2cd8:	9a 89       	ldd	r25, Y+18	; 0x12
    2cda:	01 97       	sbiw	r24, 0x01	; 1
    2cdc:	f1 f7       	brne	.-4      	; 0x2cda <LCD_DisplayCharacter+0x7ac>
    2cde:	9a 8b       	std	Y+18, r25	; 0x12
    2ce0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ce4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ce6:	01 97       	sbiw	r24, 0x01	; 1
    2ce8:	9c 8b       	std	Y+20, r25	; 0x14
    2cea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cec:	8b 89       	ldd	r24, Y+19	; 0x13
    2cee:	9c 89       	ldd	r25, Y+20	; 0x14
    2cf0:	00 97       	sbiw	r24, 0x00	; 0
    2cf2:	69 f7       	brne	.-38     	; 0x2cce <LCD_DisplayCharacter+0x7a0>
    2cf4:	14 c0       	rjmp	.+40     	; 0x2d1e <LCD_DisplayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf6:	6d 89       	ldd	r22, Y+21	; 0x15
    2cf8:	7e 89       	ldd	r23, Y+22	; 0x16
    2cfa:	8f 89       	ldd	r24, Y+23	; 0x17
    2cfc:	98 8d       	ldd	r25, Y+24	; 0x18
    2cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	9c 8b       	std	Y+20, r25	; 0x14
    2d08:	8b 8b       	std	Y+19, r24	; 0x13
    2d0a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d0c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d0e:	98 8b       	std	Y+16, r25	; 0x10
    2d10:	8f 87       	std	Y+15, r24	; 0x0f
    2d12:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d14:	98 89       	ldd	r25, Y+16	; 0x10
    2d16:	01 97       	sbiw	r24, 0x01	; 1
    2d18:	f1 f7       	brne	.-4      	; 0x2d16 <LCD_DisplayCharacter+0x7e8>
    2d1a:	98 8b       	std	Y+16, r25	; 0x10
    2d1c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_ENABLE_PORT, LCD_ENABLE_PIN, LOGIC_LOW);
    2d1e:	80 e0       	ldi	r24, 0x00	; 0
    2d20:	62 e0       	ldi	r22, 0x02	; 2
    2d22:	40 e0       	ldi	r20, 0x00	; 0
    2d24:	0e 94 e6 08 	call	0x11cc	; 0x11cc <GPIO_writePin>
    2d28:	80 e0       	ldi	r24, 0x00	; 0
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	a0 e8       	ldi	r26, 0x80	; 128
    2d2e:	bf e3       	ldi	r27, 0x3F	; 63
    2d30:	8b 87       	std	Y+11, r24	; 0x0b
    2d32:	9c 87       	std	Y+12, r25	; 0x0c
    2d34:	ad 87       	std	Y+13, r26	; 0x0d
    2d36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d38:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d40:	20 e0       	ldi	r18, 0x00	; 0
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	4a e7       	ldi	r20, 0x7A	; 122
    2d46:	55 e4       	ldi	r21, 0x45	; 69
    2d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	8f 83       	std	Y+7, r24	; 0x07
    2d52:	98 87       	std	Y+8, r25	; 0x08
    2d54:	a9 87       	std	Y+9, r26	; 0x09
    2d56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d58:	6f 81       	ldd	r22, Y+7	; 0x07
    2d5a:	78 85       	ldd	r23, Y+8	; 0x08
    2d5c:	89 85       	ldd	r24, Y+9	; 0x09
    2d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	40 e8       	ldi	r20, 0x80	; 128
    2d66:	5f e3       	ldi	r21, 0x3F	; 63
    2d68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d6c:	88 23       	and	r24, r24
    2d6e:	2c f4       	brge	.+10     	; 0x2d7a <LCD_DisplayCharacter+0x84c>
		__ticks = 1;
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	9e 83       	std	Y+6, r25	; 0x06
    2d76:	8d 83       	std	Y+5, r24	; 0x05
    2d78:	3f c0       	rjmp	.+126    	; 0x2df8 <LCD_DisplayCharacter+0x8ca>
	else if (__tmp > 65535)
    2d7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d7c:	78 85       	ldd	r23, Y+8	; 0x08
    2d7e:	89 85       	ldd	r24, Y+9	; 0x09
    2d80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d82:	20 e0       	ldi	r18, 0x00	; 0
    2d84:	3f ef       	ldi	r19, 0xFF	; 255
    2d86:	4f e7       	ldi	r20, 0x7F	; 127
    2d88:	57 e4       	ldi	r21, 0x47	; 71
    2d8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d8e:	18 16       	cp	r1, r24
    2d90:	4c f5       	brge	.+82     	; 0x2de4 <LCD_DisplayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d92:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d94:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d96:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d98:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d9a:	20 e0       	ldi	r18, 0x00	; 0
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	40 e2       	ldi	r20, 0x20	; 32
    2da0:	51 e4       	ldi	r21, 0x41	; 65
    2da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	bc 01       	movw	r22, r24
    2dac:	cd 01       	movw	r24, r26
    2dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db2:	dc 01       	movw	r26, r24
    2db4:	cb 01       	movw	r24, r22
    2db6:	9e 83       	std	Y+6, r25	; 0x06
    2db8:	8d 83       	std	Y+5, r24	; 0x05
    2dba:	0f c0       	rjmp	.+30     	; 0x2dda <LCD_DisplayCharacter+0x8ac>
    2dbc:	80 e9       	ldi	r24, 0x90	; 144
    2dbe:	91 e0       	ldi	r25, 0x01	; 1
    2dc0:	9c 83       	std	Y+4, r25	; 0x04
    2dc2:	8b 83       	std	Y+3, r24	; 0x03
    2dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc6:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc8:	01 97       	sbiw	r24, 0x01	; 1
    2dca:	f1 f7       	brne	.-4      	; 0x2dc8 <LCD_DisplayCharacter+0x89a>
    2dcc:	9c 83       	std	Y+4, r25	; 0x04
    2dce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dd0:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd2:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd4:	01 97       	sbiw	r24, 0x01	; 1
    2dd6:	9e 83       	std	Y+6, r25	; 0x06
    2dd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dda:	8d 81       	ldd	r24, Y+5	; 0x05
    2ddc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dde:	00 97       	sbiw	r24, 0x00	; 0
    2de0:	69 f7       	brne	.-38     	; 0x2dbc <LCD_DisplayCharacter+0x88e>
    2de2:	14 c0       	rjmp	.+40     	; 0x2e0c <LCD_DisplayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2de4:	6f 81       	ldd	r22, Y+7	; 0x07
    2de6:	78 85       	ldd	r23, Y+8	; 0x08
    2de8:	89 85       	ldd	r24, Y+9	; 0x09
    2dea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df0:	dc 01       	movw	r26, r24
    2df2:	cb 01       	movw	r24, r22
    2df4:	9e 83       	std	Y+6, r25	; 0x06
    2df6:	8d 83       	std	Y+5, r24	; 0x05
    2df8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfa:	9e 81       	ldd	r25, Y+6	; 0x06
    2dfc:	9a 83       	std	Y+2, r25	; 0x02
    2dfe:	89 83       	std	Y+1, r24	; 0x01
    2e00:	89 81       	ldd	r24, Y+1	; 0x01
    2e02:	9a 81       	ldd	r25, Y+2	; 0x02
    2e04:	01 97       	sbiw	r24, 0x01	; 1
    2e06:	f1 f7       	brne	.-4      	; 0x2e04 <LCD_DisplayCharacter+0x8d6>
    2e08:	9a 83       	std	Y+2, r25	; 0x02
    2e0a:	89 83       	std	Y+1, r24	; 0x01
	/* Set Enable to zero */
	GPIO_writePin(LCD_ENABLE_PORT, LCD_ENABLE_PIN, LOGIC_LOW);
	/* Delay 1 us */
	_delay_ms(1);
#endif
}
    2e0c:	cd 59       	subi	r28, 0x9D	; 157
    2e0e:	df 4f       	sbci	r29, 0xFF	; 255
    2e10:	0f b6       	in	r0, 0x3f	; 63
    2e12:	f8 94       	cli
    2e14:	de bf       	out	0x3e, r29	; 62
    2e16:	0f be       	out	0x3f, r0	; 63
    2e18:	cd bf       	out	0x3d, r28	; 61
    2e1a:	cf 91       	pop	r28
    2e1c:	df 91       	pop	r29
    2e1e:	1f 91       	pop	r17
    2e20:	0f 91       	pop	r16
    2e22:	08 95       	ret

00002e24 <LCD_init>:

void LCD_init(void) {
    2e24:	df 93       	push	r29
    2e26:	cf 93       	push	r28
    2e28:	cd b7       	in	r28, 0x3d	; 61
    2e2a:	de b7       	in	r29, 0x3e	; 62
    2e2c:	2e 97       	sbiw	r28, 0x0e	; 14
    2e2e:	0f b6       	in	r0, 0x3f	; 63
    2e30:	f8 94       	cli
    2e32:	de bf       	out	0x3e, r29	; 62
    2e34:	0f be       	out	0x3f, r0	; 63
    2e36:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT, LCD_RS_Pin, PIN_OUTPUT);
    2e38:	80 e0       	ldi	r24, 0x00	; 0
    2e3a:	61 e0       	ldi	r22, 0x01	; 1
    2e3c:	41 e0       	ldi	r20, 0x01	; 1
    2e3e:	0e 94 fb 07 	call	0xff6	; 0xff6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_ENABLE_PORT, LCD_ENABLE_PIN, PIN_OUTPUT);
    2e42:	80 e0       	ldi	r24, 0x00	; 0
    2e44:	62 e0       	ldi	r22, 0x02	; 2
    2e46:	41 e0       	ldi	r20, 0x01	; 1
    2e48:	0e 94 fb 07 	call	0xff6	; 0xff6 <GPIO_setupPinDirection>
    2e4c:	80 e0       	ldi	r24, 0x00	; 0
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	a0 ea       	ldi	r26, 0xA0	; 160
    2e52:	b1 e4       	ldi	r27, 0x41	; 65
    2e54:	8b 87       	std	Y+11, r24	; 0x0b
    2e56:	9c 87       	std	Y+12, r25	; 0x0c
    2e58:	ad 87       	std	Y+13, r26	; 0x0d
    2e5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e60:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e62:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e64:	20 e0       	ldi	r18, 0x00	; 0
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	4a e7       	ldi	r20, 0x7A	; 122
    2e6a:	55 e4       	ldi	r21, 0x45	; 69
    2e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e70:	dc 01       	movw	r26, r24
    2e72:	cb 01       	movw	r24, r22
    2e74:	8f 83       	std	Y+7, r24	; 0x07
    2e76:	98 87       	std	Y+8, r25	; 0x08
    2e78:	a9 87       	std	Y+9, r26	; 0x09
    2e7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e7e:	78 85       	ldd	r23, Y+8	; 0x08
    2e80:	89 85       	ldd	r24, Y+9	; 0x09
    2e82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	40 e8       	ldi	r20, 0x80	; 128
    2e8a:	5f e3       	ldi	r21, 0x3F	; 63
    2e8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e90:	88 23       	and	r24, r24
    2e92:	2c f4       	brge	.+10     	; 0x2e9e <LCD_init+0x7a>
		__ticks = 1;
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	9e 83       	std	Y+6, r25	; 0x06
    2e9a:	8d 83       	std	Y+5, r24	; 0x05
    2e9c:	3f c0       	rjmp	.+126    	; 0x2f1c <LCD_init+0xf8>
	else if (__tmp > 65535)
    2e9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2ea0:	78 85       	ldd	r23, Y+8	; 0x08
    2ea2:	89 85       	ldd	r24, Y+9	; 0x09
    2ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ea6:	20 e0       	ldi	r18, 0x00	; 0
    2ea8:	3f ef       	ldi	r19, 0xFF	; 255
    2eaa:	4f e7       	ldi	r20, 0x7F	; 127
    2eac:	57 e4       	ldi	r21, 0x47	; 71
    2eae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eb2:	18 16       	cp	r1, r24
    2eb4:	4c f5       	brge	.+82     	; 0x2f08 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eba:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ebc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ebe:	20 e0       	ldi	r18, 0x00	; 0
    2ec0:	30 e0       	ldi	r19, 0x00	; 0
    2ec2:	40 e2       	ldi	r20, 0x20	; 32
    2ec4:	51 e4       	ldi	r21, 0x41	; 65
    2ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eca:	dc 01       	movw	r26, r24
    2ecc:	cb 01       	movw	r24, r22
    2ece:	bc 01       	movw	r22, r24
    2ed0:	cd 01       	movw	r24, r26
    2ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	9e 83       	std	Y+6, r25	; 0x06
    2edc:	8d 83       	std	Y+5, r24	; 0x05
    2ede:	0f c0       	rjmp	.+30     	; 0x2efe <LCD_init+0xda>
    2ee0:	80 e9       	ldi	r24, 0x90	; 144
    2ee2:	91 e0       	ldi	r25, 0x01	; 1
    2ee4:	9c 83       	std	Y+4, r25	; 0x04
    2ee6:	8b 83       	std	Y+3, r24	; 0x03
    2ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eea:	9c 81       	ldd	r25, Y+4	; 0x04
    2eec:	01 97       	sbiw	r24, 0x01	; 1
    2eee:	f1 f7       	brne	.-4      	; 0x2eec <LCD_init+0xc8>
    2ef0:	9c 83       	std	Y+4, r25	; 0x04
    2ef2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef8:	01 97       	sbiw	r24, 0x01	; 1
    2efa:	9e 83       	std	Y+6, r25	; 0x06
    2efc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2efe:	8d 81       	ldd	r24, Y+5	; 0x05
    2f00:	9e 81       	ldd	r25, Y+6	; 0x06
    2f02:	00 97       	sbiw	r24, 0x00	; 0
    2f04:	69 f7       	brne	.-38     	; 0x2ee0 <LCD_init+0xbc>
    2f06:	14 c0       	rjmp	.+40     	; 0x2f30 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f08:	6f 81       	ldd	r22, Y+7	; 0x07
    2f0a:	78 85       	ldd	r23, Y+8	; 0x08
    2f0c:	89 85       	ldd	r24, Y+9	; 0x09
    2f0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	9e 83       	std	Y+6, r25	; 0x06
    2f1a:	8d 83       	std	Y+5, r24	; 0x05
    2f1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f20:	9a 83       	std	Y+2, r25	; 0x02
    2f22:	89 83       	std	Y+1, r24	; 0x01
    2f24:	89 81       	ldd	r24, Y+1	; 0x01
    2f26:	9a 81       	ldd	r25, Y+2	; 0x02
    2f28:	01 97       	sbiw	r24, 0x01	; 1
    2f2a:	f1 f7       	brne	.-4      	; 0x2f28 <LCD_init+0x104>
    2f2c:	9a 83       	std	Y+2, r25	; 0x02
    2f2e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
#if (LCD_DATA_BITS_MODE == 4)
	GPIO_setupPinDirection(LCD_DATA_PORT, LCD_DB4_PIN, PIN_OUTPUT);
    2f30:	80 e0       	ldi	r24, 0x00	; 0
    2f32:	63 e0       	ldi	r22, 0x03	; 3
    2f34:	41 e0       	ldi	r20, 0x01	; 1
    2f36:	0e 94 fb 07 	call	0xff6	; 0xff6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT, LCD_DB5_PIN, PIN_OUTPUT);
    2f3a:	80 e0       	ldi	r24, 0x00	; 0
    2f3c:	64 e0       	ldi	r22, 0x04	; 4
    2f3e:	41 e0       	ldi	r20, 0x01	; 1
    2f40:	0e 94 fb 07 	call	0xff6	; 0xff6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT, LCD_DB6_PIN, PIN_OUTPUT);
    2f44:	80 e0       	ldi	r24, 0x00	; 0
    2f46:	65 e0       	ldi	r22, 0x05	; 5
    2f48:	41 e0       	ldi	r20, 0x01	; 1
    2f4a:	0e 94 fb 07 	call	0xff6	; 0xff6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT, LCD_DB7_PIN, PIN_OUTPUT);
    2f4e:	80 e0       	ldi	r24, 0x00	; 0
    2f50:	66 e0       	ldi	r22, 0x06	; 6
    2f52:	41 e0       	ldi	r20, 0x01	; 1
    2f54:	0e 94 fb 07 	call	0xff6	; 0xff6 <GPIO_setupPinDirection>

	LCD_SendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    2f58:	83 e3       	ldi	r24, 0x33	; 51
    2f5a:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <LCD_SendCommand>
	LCD_SendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    2f5e:	82 e3       	ldi	r24, 0x32	; 50
    2f60:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <LCD_SendCommand>

	LCD_SendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    2f64:	88 e2       	ldi	r24, 0x28	; 40
    2f66:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <LCD_SendCommand>

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_setupPortDirection(LCD_DATA_PORT, PORT_OUTPUT);
	LCD_SendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
#endif
	LCD_SendCommand(LCD_CURSOR_OFF);
    2f6a:	8c e0       	ldi	r24, 0x0C	; 12
    2f6c:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <LCD_SendCommand>
	LCD_SendCommand(LCD_CLEAR_COMMAND);
    2f70:	81 e0       	ldi	r24, 0x01	; 1
    2f72:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <LCD_SendCommand>
}
    2f76:	2e 96       	adiw	r28, 0x0e	; 14
    2f78:	0f b6       	in	r0, 0x3f	; 63
    2f7a:	f8 94       	cli
    2f7c:	de bf       	out	0x3e, r29	; 62
    2f7e:	0f be       	out	0x3f, r0	; 63
    2f80:	cd bf       	out	0x3d, r28	; 61
    2f82:	cf 91       	pop	r28
    2f84:	df 91       	pop	r29
    2f86:	08 95       	ret

00002f88 <LCD_DisplayString>:

void LCD_DisplayString(const uint8 *string) {
    2f88:	df 93       	push	r29
    2f8a:	cf 93       	push	r28
    2f8c:	00 d0       	rcall	.+0      	; 0x2f8e <LCD_DisplayString+0x6>
    2f8e:	0f 92       	push	r0
    2f90:	cd b7       	in	r28, 0x3d	; 61
    2f92:	de b7       	in	r29, 0x3e	; 62
    2f94:	9b 83       	std	Y+3, r25	; 0x03
    2f96:	8a 83       	std	Y+2, r24	; 0x02
	uint8 counter = 0;
    2f98:	19 82       	std	Y+1, r1	; 0x01
	for (counter = 0; string[counter] != '\0'; counter++) {
    2f9a:	19 82       	std	Y+1, r1	; 0x01
    2f9c:	0e c0       	rjmp	.+28     	; 0x2fba <LCD_DisplayString+0x32>
		LCD_DisplayCharacter(string[counter]);
    2f9e:	89 81       	ldd	r24, Y+1	; 0x01
    2fa0:	28 2f       	mov	r18, r24
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa6:	9b 81       	ldd	r25, Y+3	; 0x03
    2fa8:	fc 01       	movw	r30, r24
    2faa:	e2 0f       	add	r30, r18
    2fac:	f3 1f       	adc	r31, r19
    2fae:	80 81       	ld	r24, Z
    2fb0:	0e 94 97 12 	call	0x252e	; 0x252e <LCD_DisplayCharacter>
	LCD_SendCommand(LCD_CLEAR_COMMAND);
}

void LCD_DisplayString(const uint8 *string) {
	uint8 counter = 0;
	for (counter = 0; string[counter] != '\0'; counter++) {
    2fb4:	89 81       	ldd	r24, Y+1	; 0x01
    2fb6:	8f 5f       	subi	r24, 0xFF	; 255
    2fb8:	89 83       	std	Y+1, r24	; 0x01
    2fba:	89 81       	ldd	r24, Y+1	; 0x01
    2fbc:	28 2f       	mov	r18, r24
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc2:	9b 81       	ldd	r25, Y+3	; 0x03
    2fc4:	fc 01       	movw	r30, r24
    2fc6:	e2 0f       	add	r30, r18
    2fc8:	f3 1f       	adc	r31, r19
    2fca:	80 81       	ld	r24, Z
    2fcc:	88 23       	and	r24, r24
    2fce:	39 f7       	brne	.-50     	; 0x2f9e <LCD_DisplayString+0x16>
		LCD_DisplayCharacter(string[counter]);
	}
}
    2fd0:	0f 90       	pop	r0
    2fd2:	0f 90       	pop	r0
    2fd4:	0f 90       	pop	r0
    2fd6:	cf 91       	pop	r28
    2fd8:	df 91       	pop	r29
    2fda:	08 95       	ret

00002fdc <LCD_MoveCursor>:

void LCD_MoveCursor(uint8 row, uint8 col) {
    2fdc:	df 93       	push	r29
    2fde:	cf 93       	push	r28
    2fe0:	00 d0       	rcall	.+0      	; 0x2fe2 <LCD_MoveCursor+0x6>
    2fe2:	00 d0       	rcall	.+0      	; 0x2fe4 <LCD_MoveCursor+0x8>
    2fe4:	0f 92       	push	r0
    2fe6:	cd b7       	in	r28, 0x3d	; 61
    2fe8:	de b7       	in	r29, 0x3e	; 62
    2fea:	8a 83       	std	Y+2, r24	; 0x02
    2fec:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	switch (row) {
    2fee:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff0:	28 2f       	mov	r18, r24
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	3d 83       	std	Y+5, r19	; 0x05
    2ff6:	2c 83       	std	Y+4, r18	; 0x04
    2ff8:	8c 81       	ldd	r24, Y+4	; 0x04
    2ffa:	9d 81       	ldd	r25, Y+5	; 0x05
    2ffc:	81 30       	cpi	r24, 0x01	; 1
    2ffe:	91 05       	cpc	r25, r1
    3000:	c1 f0       	breq	.+48     	; 0x3032 <LCD_MoveCursor+0x56>
    3002:	2c 81       	ldd	r18, Y+4	; 0x04
    3004:	3d 81       	ldd	r19, Y+5	; 0x05
    3006:	22 30       	cpi	r18, 0x02	; 2
    3008:	31 05       	cpc	r19, r1
    300a:	2c f4       	brge	.+10     	; 0x3016 <LCD_MoveCursor+0x3a>
    300c:	8c 81       	ldd	r24, Y+4	; 0x04
    300e:	9d 81       	ldd	r25, Y+5	; 0x05
    3010:	00 97       	sbiw	r24, 0x00	; 0
    3012:	61 f0       	breq	.+24     	; 0x302c <LCD_MoveCursor+0x50>
    3014:	19 c0       	rjmp	.+50     	; 0x3048 <LCD_MoveCursor+0x6c>
    3016:	2c 81       	ldd	r18, Y+4	; 0x04
    3018:	3d 81       	ldd	r19, Y+5	; 0x05
    301a:	22 30       	cpi	r18, 0x02	; 2
    301c:	31 05       	cpc	r19, r1
    301e:	69 f0       	breq	.+26     	; 0x303a <LCD_MoveCursor+0x5e>
    3020:	8c 81       	ldd	r24, Y+4	; 0x04
    3022:	9d 81       	ldd	r25, Y+5	; 0x05
    3024:	83 30       	cpi	r24, 0x03	; 3
    3026:	91 05       	cpc	r25, r1
    3028:	61 f0       	breq	.+24     	; 0x3042 <LCD_MoveCursor+0x66>
    302a:	0e c0       	rjmp	.+28     	; 0x3048 <LCD_MoveCursor+0x6c>
	case 0:
		lcd_memory_address = col;
    302c:	8b 81       	ldd	r24, Y+3	; 0x03
    302e:	89 83       	std	Y+1, r24	; 0x01
    3030:	0b c0       	rjmp	.+22     	; 0x3048 <LCD_MoveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address = col + 0x40;
    3032:	8b 81       	ldd	r24, Y+3	; 0x03
    3034:	80 5c       	subi	r24, 0xC0	; 192
    3036:	89 83       	std	Y+1, r24	; 0x01
    3038:	07 c0       	rjmp	.+14     	; 0x3048 <LCD_MoveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address = col + 0x10;
    303a:	8b 81       	ldd	r24, Y+3	; 0x03
    303c:	80 5f       	subi	r24, 0xF0	; 240
    303e:	89 83       	std	Y+1, r24	; 0x01
    3040:	03 c0       	rjmp	.+6      	; 0x3048 <LCD_MoveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address = col + 0x50;
    3042:	8b 81       	ldd	r24, Y+3	; 0x03
    3044:	80 5b       	subi	r24, 0xB0	; 176
    3046:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_SendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3048:	89 81       	ldd	r24, Y+1	; 0x01
    304a:	80 68       	ori	r24, 0x80	; 128
    304c:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <LCD_SendCommand>
}
    3050:	0f 90       	pop	r0
    3052:	0f 90       	pop	r0
    3054:	0f 90       	pop	r0
    3056:	0f 90       	pop	r0
    3058:	0f 90       	pop	r0
    305a:	cf 91       	pop	r28
    305c:	df 91       	pop	r29
    305e:	08 95       	ret

00003060 <LCD_DisplayStringRowColumn>:

void LCD_DisplayStringRowColumn(uint8 row, uint8 col, const uint8 *Str) {
    3060:	df 93       	push	r29
    3062:	cf 93       	push	r28
    3064:	00 d0       	rcall	.+0      	; 0x3066 <LCD_DisplayStringRowColumn+0x6>
    3066:	00 d0       	rcall	.+0      	; 0x3068 <LCD_DisplayStringRowColumn+0x8>
    3068:	cd b7       	in	r28, 0x3d	; 61
    306a:	de b7       	in	r29, 0x3e	; 62
    306c:	89 83       	std	Y+1, r24	; 0x01
    306e:	6a 83       	std	Y+2, r22	; 0x02
    3070:	5c 83       	std	Y+4, r21	; 0x04
    3072:	4b 83       	std	Y+3, r20	; 0x03
	LCD_MoveCursor(row, col);
    3074:	89 81       	ldd	r24, Y+1	; 0x01
    3076:	6a 81       	ldd	r22, Y+2	; 0x02
    3078:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <LCD_MoveCursor>
	LCD_DisplayString(Str);
    307c:	8b 81       	ldd	r24, Y+3	; 0x03
    307e:	9c 81       	ldd	r25, Y+4	; 0x04
    3080:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <LCD_DisplayString>
}
    3084:	0f 90       	pop	r0
    3086:	0f 90       	pop	r0
    3088:	0f 90       	pop	r0
    308a:	0f 90       	pop	r0
    308c:	cf 91       	pop	r28
    308e:	df 91       	pop	r29
    3090:	08 95       	ret

00003092 <LCD_intgerToString>:

void LCD_intgerToString(int data) {
    3092:	df 93       	push	r29
    3094:	cf 93       	push	r28
    3096:	cd b7       	in	r28, 0x3d	; 61
    3098:	de b7       	in	r29, 0x3e	; 62
    309a:	62 97       	sbiw	r28, 0x12	; 18
    309c:	0f b6       	in	r0, 0x3f	; 63
    309e:	f8 94       	cli
    30a0:	de bf       	out	0x3e, r29	; 62
    30a2:	0f be       	out	0x3f, r0	; 63
    30a4:	cd bf       	out	0x3d, r28	; 61
    30a6:	9a 8b       	std	Y+18, r25	; 0x12
    30a8:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];
	itoa(data, buff, 10);
    30aa:	89 89       	ldd	r24, Y+17	; 0x11
    30ac:	9a 89       	ldd	r25, Y+18	; 0x12
    30ae:	9e 01       	movw	r18, r28
    30b0:	2f 5f       	subi	r18, 0xFF	; 255
    30b2:	3f 4f       	sbci	r19, 0xFF	; 255
    30b4:	b9 01       	movw	r22, r18
    30b6:	4a e0       	ldi	r20, 0x0A	; 10
    30b8:	50 e0       	ldi	r21, 0x00	; 0
    30ba:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <itoa>
	LCD_DisplayString(buff);
    30be:	ce 01       	movw	r24, r28
    30c0:	01 96       	adiw	r24, 0x01	; 1
    30c2:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <LCD_DisplayString>
}
    30c6:	62 96       	adiw	r28, 0x12	; 18
    30c8:	0f b6       	in	r0, 0x3f	; 63
    30ca:	f8 94       	cli
    30cc:	de bf       	out	0x3e, r29	; 62
    30ce:	0f be       	out	0x3f, r0	; 63
    30d0:	cd bf       	out	0x3d, r28	; 61
    30d2:	cf 91       	pop	r28
    30d4:	df 91       	pop	r29
    30d6:	08 95       	ret

000030d8 <LCD_clearScreen>:

void LCD_clearScreen(void) {
    30d8:	df 93       	push	r29
    30da:	cf 93       	push	r28
    30dc:	cd b7       	in	r28, 0x3d	; 61
    30de:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(LCD_CLEAR_COMMAND);
    30e0:	81 e0       	ldi	r24, 0x01	; 1
    30e2:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <LCD_SendCommand>
}
    30e6:	cf 91       	pop	r28
    30e8:	df 91       	pop	r29
    30ea:	08 95       	ret

000030ec <Buzzer_init>:

/* Initialize the buzzer object with default values */
BUZZER Alarm = { .PORT = PORTC_ID, .PIN = PIN5_ID, .state = BUZZER_ACTIVE_HIGH };

/* Set the buzzer pin as output */
void Buzzer_init(BUZZER *buzz) {
    30ec:	df 93       	push	r29
    30ee:	cf 93       	push	r28
    30f0:	00 d0       	rcall	.+0      	; 0x30f2 <Buzzer_init+0x6>
    30f2:	cd b7       	in	r28, 0x3d	; 61
    30f4:	de b7       	in	r29, 0x3e	; 62
    30f6:	9a 83       	std	Y+2, r25	; 0x02
    30f8:	89 83       	std	Y+1, r24	; 0x01
    GPIO_setupPinDirection(buzz->PORT, buzz->PIN, PIN_OUTPUT);
    30fa:	e9 81       	ldd	r30, Y+1	; 0x01
    30fc:	fa 81       	ldd	r31, Y+2	; 0x02
    30fe:	80 81       	ld	r24, Z
    3100:	83 70       	andi	r24, 0x03	; 3
    3102:	28 2f       	mov	r18, r24
    3104:	e9 81       	ldd	r30, Y+1	; 0x01
    3106:	fa 81       	ldd	r31, Y+2	; 0x02
    3108:	80 81       	ld	r24, Z
    310a:	86 95       	lsr	r24
    310c:	86 95       	lsr	r24
    310e:	87 70       	andi	r24, 0x07	; 7
    3110:	98 2f       	mov	r25, r24
    3112:	82 2f       	mov	r24, r18
    3114:	69 2f       	mov	r22, r25
    3116:	41 e0       	ldi	r20, 0x01	; 1
    3118:	0e 94 fb 07 	call	0xff6	; 0xff6 <GPIO_setupPinDirection>
}
    311c:	0f 90       	pop	r0
    311e:	0f 90       	pop	r0
    3120:	cf 91       	pop	r28
    3122:	df 91       	pop	r29
    3124:	08 95       	ret

00003126 <Buzzer_on>:


/* Turn on the buzzer */
void Buzzer_on(BUZZER *buzz) {
    3126:	df 93       	push	r29
    3128:	cf 93       	push	r28
    312a:	00 d0       	rcall	.+0      	; 0x312c <Buzzer_on+0x6>
    312c:	cd b7       	in	r28, 0x3d	; 61
    312e:	de b7       	in	r29, 0x3e	; 62
    3130:	9a 83       	std	Y+2, r25	; 0x02
    3132:	89 83       	std	Y+1, r24	; 0x01
    GPIO_writePin(buzz->PORT, buzz->PIN, (LOGIC_HIGH ^ buzz->state));
    3134:	e9 81       	ldd	r30, Y+1	; 0x01
    3136:	fa 81       	ldd	r31, Y+2	; 0x02
    3138:	80 81       	ld	r24, Z
    313a:	83 70       	andi	r24, 0x03	; 3
    313c:	38 2f       	mov	r19, r24
    313e:	e9 81       	ldd	r30, Y+1	; 0x01
    3140:	fa 81       	ldd	r31, Y+2	; 0x02
    3142:	80 81       	ld	r24, Z
    3144:	86 95       	lsr	r24
    3146:	86 95       	lsr	r24
    3148:	87 70       	andi	r24, 0x07	; 7
    314a:	28 2f       	mov	r18, r24
    314c:	e9 81       	ldd	r30, Y+1	; 0x01
    314e:	fa 81       	ldd	r31, Y+2	; 0x02
    3150:	80 81       	ld	r24, Z
    3152:	82 95       	swap	r24
    3154:	86 95       	lsr	r24
    3156:	87 70       	andi	r24, 0x07	; 7
    3158:	81 70       	andi	r24, 0x01	; 1
    315a:	91 e0       	ldi	r25, 0x01	; 1
    315c:	89 27       	eor	r24, r25
    315e:	81 70       	andi	r24, 0x01	; 1
    3160:	98 2f       	mov	r25, r24
    3162:	83 2f       	mov	r24, r19
    3164:	62 2f       	mov	r22, r18
    3166:	49 2f       	mov	r20, r25
    3168:	0e 94 e6 08 	call	0x11cc	; 0x11cc <GPIO_writePin>
}
    316c:	0f 90       	pop	r0
    316e:	0f 90       	pop	r0
    3170:	cf 91       	pop	r28
    3172:	df 91       	pop	r29
    3174:	08 95       	ret

00003176 <Buzzer_off>:

/* Turn off the buzzer */
void Buzzer_off(BUZZER *buzz) {
    3176:	df 93       	push	r29
    3178:	cf 93       	push	r28
    317a:	00 d0       	rcall	.+0      	; 0x317c <Buzzer_off+0x6>
    317c:	cd b7       	in	r28, 0x3d	; 61
    317e:	de b7       	in	r29, 0x3e	; 62
    3180:	9a 83       	std	Y+2, r25	; 0x02
    3182:	89 83       	std	Y+1, r24	; 0x01
    GPIO_writePin(buzz->PORT, buzz->PIN, (LOGIC_LOW ^ buzz->state));
    3184:	e9 81       	ldd	r30, Y+1	; 0x01
    3186:	fa 81       	ldd	r31, Y+2	; 0x02
    3188:	80 81       	ld	r24, Z
    318a:	83 70       	andi	r24, 0x03	; 3
    318c:	38 2f       	mov	r19, r24
    318e:	e9 81       	ldd	r30, Y+1	; 0x01
    3190:	fa 81       	ldd	r31, Y+2	; 0x02
    3192:	80 81       	ld	r24, Z
    3194:	86 95       	lsr	r24
    3196:	86 95       	lsr	r24
    3198:	87 70       	andi	r24, 0x07	; 7
    319a:	28 2f       	mov	r18, r24
    319c:	e9 81       	ldd	r30, Y+1	; 0x01
    319e:	fa 81       	ldd	r31, Y+2	; 0x02
    31a0:	80 81       	ld	r24, Z
    31a2:	82 95       	swap	r24
    31a4:	86 95       	lsr	r24
    31a6:	87 70       	andi	r24, 0x07	; 7
    31a8:	81 70       	andi	r24, 0x01	; 1
    31aa:	98 2f       	mov	r25, r24
    31ac:	83 2f       	mov	r24, r19
    31ae:	62 2f       	mov	r22, r18
    31b0:	49 2f       	mov	r20, r25
    31b2:	0e 94 e6 08 	call	0x11cc	; 0x11cc <GPIO_writePin>
}
    31b6:	0f 90       	pop	r0
    31b8:	0f 90       	pop	r0
    31ba:	cf 91       	pop	r28
    31bc:	df 91       	pop	r29
    31be:	08 95       	ret

000031c0 <main>:
 * Prototypes
 */
void displayDistance(uint16 distance);
void handleDistanceActions(uint16 distance);

int main(void) {
    31c0:	df 93       	push	r29
    31c2:	cf 93       	push	r28
    31c4:	cd b7       	in	r28, 0x3d	; 61
    31c6:	de b7       	in	r29, 0x3e	; 62
    31c8:	6e 97       	sbiw	r28, 0x1e	; 30
    31ca:	0f b6       	in	r0, 0x3f	; 63
    31cc:	f8 94       	cli
    31ce:	de bf       	out	0x3e, r29	; 62
    31d0:	0f be       	out	0x3f, r0	; 63
    31d2:	cd bf       	out	0x3d, r28	; 61
	/* Initialize components */
	LCD_init();
    31d4:	0e 94 12 17 	call	0x2e24	; 0x2e24 <LCD_init>
	LED_init(&Blue);
    31d8:	84 ea       	ldi	r24, 0xA4	; 164
    31da:	91 e0       	ldi	r25, 0x01	; 1
    31dc:	0e 94 bd 0c 	call	0x197a	; 0x197a <LED_init>
	LED_init(&Green);
    31e0:	81 ea       	ldi	r24, 0xA1	; 161
    31e2:	91 e0       	ldi	r25, 0x01	; 1
    31e4:	0e 94 bd 0c 	call	0x197a	; 0x197a <LED_init>
	LED_init(&Red);
    31e8:	87 ea       	ldi	r24, 0xA7	; 167
    31ea:	91 e0       	ldi	r25, 0x01	; 1
    31ec:	0e 94 bd 0c 	call	0x197a	; 0x197a <LED_init>
	Buzzer_init(&Alarm);
    31f0:	8a ea       	ldi	r24, 0xAA	; 170
    31f2:	91 e0       	ldi	r25, 0x01	; 1
    31f4:	0e 94 76 18 	call	0x30ec	; 0x30ec <Buzzer_init>
	Ultrasonic_init(&distance_sensor);
    31f8:	8f e9       	ldi	r24, 0x9F	; 159
    31fa:	91 e0       	ldi	r25, 0x01	; 1
    31fc:	0e 94 39 0b 	call	0x1672	; 0x1672 <Ultrasonic_init>

	uint16 reading = 0;
    3200:	1e 8e       	std	Y+30, r1	; 0x1e
    3202:	1d 8e       	std	Y+29, r1	; 0x1d

	/* Keep checking until the ultrasonic sensor gives a valid reading */
	do {
		Ultrasonic_Trigger(&distance_sensor);
    3204:	8f e9       	ldi	r24, 0x9F	; 159
    3206:	91 e0       	ldi	r25, 0x01	; 1
    3208:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <Ultrasonic_Trigger>
		reading = Ultrasonic_readDistance(&distance_sensor);
    320c:	8f e9       	ldi	r24, 0x9F	; 159
    320e:	91 e0       	ldi	r25, 0x01	; 1
    3210:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <Ultrasonic_readDistance>
    3214:	9e 8f       	std	Y+30, r25	; 0x1e
    3216:	8d 8f       	std	Y+29, r24	; 0x1d
    3218:	80 e0       	ldi	r24, 0x00	; 0
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	a0 ea       	ldi	r26, 0xA0	; 160
    321e:	b1 e4       	ldi	r27, 0x41	; 65
    3220:	89 8f       	std	Y+25, r24	; 0x19
    3222:	9a 8f       	std	Y+26, r25	; 0x1a
    3224:	ab 8f       	std	Y+27, r26	; 0x1b
    3226:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3228:	69 8d       	ldd	r22, Y+25	; 0x19
    322a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    322c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    322e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3230:	20 e0       	ldi	r18, 0x00	; 0
    3232:	30 e0       	ldi	r19, 0x00	; 0
    3234:	4a e7       	ldi	r20, 0x7A	; 122
    3236:	55 e4       	ldi	r21, 0x45	; 69
    3238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    323c:	dc 01       	movw	r26, r24
    323e:	cb 01       	movw	r24, r22
    3240:	8d 8b       	std	Y+21, r24	; 0x15
    3242:	9e 8b       	std	Y+22, r25	; 0x16
    3244:	af 8b       	std	Y+23, r26	; 0x17
    3246:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3248:	6d 89       	ldd	r22, Y+21	; 0x15
    324a:	7e 89       	ldd	r23, Y+22	; 0x16
    324c:	8f 89       	ldd	r24, Y+23	; 0x17
    324e:	98 8d       	ldd	r25, Y+24	; 0x18
    3250:	20 e0       	ldi	r18, 0x00	; 0
    3252:	30 e0       	ldi	r19, 0x00	; 0
    3254:	40 e8       	ldi	r20, 0x80	; 128
    3256:	5f e3       	ldi	r21, 0x3F	; 63
    3258:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    325c:	88 23       	and	r24, r24
    325e:	2c f4       	brge	.+10     	; 0x326a <main+0xaa>
		__ticks = 1;
    3260:	81 e0       	ldi	r24, 0x01	; 1
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	9c 8b       	std	Y+20, r25	; 0x14
    3266:	8b 8b       	std	Y+19, r24	; 0x13
    3268:	3f c0       	rjmp	.+126    	; 0x32e8 <main+0x128>
	else if (__tmp > 65535)
    326a:	6d 89       	ldd	r22, Y+21	; 0x15
    326c:	7e 89       	ldd	r23, Y+22	; 0x16
    326e:	8f 89       	ldd	r24, Y+23	; 0x17
    3270:	98 8d       	ldd	r25, Y+24	; 0x18
    3272:	20 e0       	ldi	r18, 0x00	; 0
    3274:	3f ef       	ldi	r19, 0xFF	; 255
    3276:	4f e7       	ldi	r20, 0x7F	; 127
    3278:	57 e4       	ldi	r21, 0x47	; 71
    327a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    327e:	18 16       	cp	r1, r24
    3280:	4c f5       	brge	.+82     	; 0x32d4 <main+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3282:	69 8d       	ldd	r22, Y+25	; 0x19
    3284:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3286:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3288:	9c 8d       	ldd	r25, Y+28	; 0x1c
    328a:	20 e0       	ldi	r18, 0x00	; 0
    328c:	30 e0       	ldi	r19, 0x00	; 0
    328e:	40 e2       	ldi	r20, 0x20	; 32
    3290:	51 e4       	ldi	r21, 0x41	; 65
    3292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3296:	dc 01       	movw	r26, r24
    3298:	cb 01       	movw	r24, r22
    329a:	bc 01       	movw	r22, r24
    329c:	cd 01       	movw	r24, r26
    329e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32a2:	dc 01       	movw	r26, r24
    32a4:	cb 01       	movw	r24, r22
    32a6:	9c 8b       	std	Y+20, r25	; 0x14
    32a8:	8b 8b       	std	Y+19, r24	; 0x13
    32aa:	0f c0       	rjmp	.+30     	; 0x32ca <main+0x10a>
    32ac:	80 e9       	ldi	r24, 0x90	; 144
    32ae:	91 e0       	ldi	r25, 0x01	; 1
    32b0:	9a 8b       	std	Y+18, r25	; 0x12
    32b2:	89 8b       	std	Y+17, r24	; 0x11
    32b4:	89 89       	ldd	r24, Y+17	; 0x11
    32b6:	9a 89       	ldd	r25, Y+18	; 0x12
    32b8:	01 97       	sbiw	r24, 0x01	; 1
    32ba:	f1 f7       	brne	.-4      	; 0x32b8 <main+0xf8>
    32bc:	9a 8b       	std	Y+18, r25	; 0x12
    32be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32c0:	8b 89       	ldd	r24, Y+19	; 0x13
    32c2:	9c 89       	ldd	r25, Y+20	; 0x14
    32c4:	01 97       	sbiw	r24, 0x01	; 1
    32c6:	9c 8b       	std	Y+20, r25	; 0x14
    32c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32ca:	8b 89       	ldd	r24, Y+19	; 0x13
    32cc:	9c 89       	ldd	r25, Y+20	; 0x14
    32ce:	00 97       	sbiw	r24, 0x00	; 0
    32d0:	69 f7       	brne	.-38     	; 0x32ac <main+0xec>
    32d2:	14 c0       	rjmp	.+40     	; 0x32fc <main+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32d4:	6d 89       	ldd	r22, Y+21	; 0x15
    32d6:	7e 89       	ldd	r23, Y+22	; 0x16
    32d8:	8f 89       	ldd	r24, Y+23	; 0x17
    32da:	98 8d       	ldd	r25, Y+24	; 0x18
    32dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e0:	dc 01       	movw	r26, r24
    32e2:	cb 01       	movw	r24, r22
    32e4:	9c 8b       	std	Y+20, r25	; 0x14
    32e6:	8b 8b       	std	Y+19, r24	; 0x13
    32e8:	8b 89       	ldd	r24, Y+19	; 0x13
    32ea:	9c 89       	ldd	r25, Y+20	; 0x14
    32ec:	98 8b       	std	Y+16, r25	; 0x10
    32ee:	8f 87       	std	Y+15, r24	; 0x0f
    32f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    32f2:	98 89       	ldd	r25, Y+16	; 0x10
    32f4:	01 97       	sbiw	r24, 0x01	; 1
    32f6:	f1 f7       	brne	.-4      	; 0x32f4 <main+0x134>
    32f8:	98 8b       	std	Y+16, r25	; 0x10
    32fa:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(20);
	} while (reading == 0);
    32fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3300:	00 97       	sbiw	r24, 0x00	; 0
    3302:	09 f4       	brne	.+2      	; 0x3306 <main+0x146>
    3304:	7f cf       	rjmp	.-258    	; 0x3204 <main+0x44>

	/* Main loop */
	for (;;) {
		/* Trigger ultrasonic sensor and get the distance */
		Ultrasonic_Trigger(&distance_sensor);
    3306:	8f e9       	ldi	r24, 0x9F	; 159
    3308:	91 e0       	ldi	r25, 0x01	; 1
    330a:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <Ultrasonic_Trigger>
		reading = Ultrasonic_readDistance(&distance_sensor);
    330e:	8f e9       	ldi	r24, 0x9F	; 159
    3310:	91 e0       	ldi	r25, 0x01	; 1
    3312:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <Ultrasonic_readDistance>
    3316:	9e 8f       	std	Y+30, r25	; 0x1e
    3318:	8d 8f       	std	Y+29, r24	; 0x1d

		/* Display the distance on the LCD and take appropriate actions */
		handleDistanceActions(reading);
    331a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    331c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    331e:	0e 94 20 1a 	call	0x3440	; 0x3440 <handleDistanceActions>
    3322:	80 e0       	ldi	r24, 0x00	; 0
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	a0 ea       	ldi	r26, 0xA0	; 160
    3328:	b1 e4       	ldi	r27, 0x41	; 65
    332a:	8b 87       	std	Y+11, r24	; 0x0b
    332c:	9c 87       	std	Y+12, r25	; 0x0c
    332e:	ad 87       	std	Y+13, r26	; 0x0d
    3330:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3332:	6b 85       	ldd	r22, Y+11	; 0x0b
    3334:	7c 85       	ldd	r23, Y+12	; 0x0c
    3336:	8d 85       	ldd	r24, Y+13	; 0x0d
    3338:	9e 85       	ldd	r25, Y+14	; 0x0e
    333a:	20 e0       	ldi	r18, 0x00	; 0
    333c:	30 e0       	ldi	r19, 0x00	; 0
    333e:	4a e7       	ldi	r20, 0x7A	; 122
    3340:	55 e4       	ldi	r21, 0x45	; 69
    3342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3346:	dc 01       	movw	r26, r24
    3348:	cb 01       	movw	r24, r22
    334a:	8f 83       	std	Y+7, r24	; 0x07
    334c:	98 87       	std	Y+8, r25	; 0x08
    334e:	a9 87       	std	Y+9, r26	; 0x09
    3350:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3352:	6f 81       	ldd	r22, Y+7	; 0x07
    3354:	78 85       	ldd	r23, Y+8	; 0x08
    3356:	89 85       	ldd	r24, Y+9	; 0x09
    3358:	9a 85       	ldd	r25, Y+10	; 0x0a
    335a:	20 e0       	ldi	r18, 0x00	; 0
    335c:	30 e0       	ldi	r19, 0x00	; 0
    335e:	40 e8       	ldi	r20, 0x80	; 128
    3360:	5f e3       	ldi	r21, 0x3F	; 63
    3362:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3366:	88 23       	and	r24, r24
    3368:	2c f4       	brge	.+10     	; 0x3374 <main+0x1b4>
		__ticks = 1;
    336a:	81 e0       	ldi	r24, 0x01	; 1
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	9e 83       	std	Y+6, r25	; 0x06
    3370:	8d 83       	std	Y+5, r24	; 0x05
    3372:	3f c0       	rjmp	.+126    	; 0x33f2 <main+0x232>
	else if (__tmp > 65535)
    3374:	6f 81       	ldd	r22, Y+7	; 0x07
    3376:	78 85       	ldd	r23, Y+8	; 0x08
    3378:	89 85       	ldd	r24, Y+9	; 0x09
    337a:	9a 85       	ldd	r25, Y+10	; 0x0a
    337c:	20 e0       	ldi	r18, 0x00	; 0
    337e:	3f ef       	ldi	r19, 0xFF	; 255
    3380:	4f e7       	ldi	r20, 0x7F	; 127
    3382:	57 e4       	ldi	r21, 0x47	; 71
    3384:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3388:	18 16       	cp	r1, r24
    338a:	4c f5       	brge	.+82     	; 0x33de <main+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    338c:	6b 85       	ldd	r22, Y+11	; 0x0b
    338e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3390:	8d 85       	ldd	r24, Y+13	; 0x0d
    3392:	9e 85       	ldd	r25, Y+14	; 0x0e
    3394:	20 e0       	ldi	r18, 0x00	; 0
    3396:	30 e0       	ldi	r19, 0x00	; 0
    3398:	40 e2       	ldi	r20, 0x20	; 32
    339a:	51 e4       	ldi	r21, 0x41	; 65
    339c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33a0:	dc 01       	movw	r26, r24
    33a2:	cb 01       	movw	r24, r22
    33a4:	bc 01       	movw	r22, r24
    33a6:	cd 01       	movw	r24, r26
    33a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ac:	dc 01       	movw	r26, r24
    33ae:	cb 01       	movw	r24, r22
    33b0:	9e 83       	std	Y+6, r25	; 0x06
    33b2:	8d 83       	std	Y+5, r24	; 0x05
    33b4:	0f c0       	rjmp	.+30     	; 0x33d4 <main+0x214>
    33b6:	80 e9       	ldi	r24, 0x90	; 144
    33b8:	91 e0       	ldi	r25, 0x01	; 1
    33ba:	9c 83       	std	Y+4, r25	; 0x04
    33bc:	8b 83       	std	Y+3, r24	; 0x03
    33be:	8b 81       	ldd	r24, Y+3	; 0x03
    33c0:	9c 81       	ldd	r25, Y+4	; 0x04
    33c2:	01 97       	sbiw	r24, 0x01	; 1
    33c4:	f1 f7       	brne	.-4      	; 0x33c2 <main+0x202>
    33c6:	9c 83       	std	Y+4, r25	; 0x04
    33c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ca:	8d 81       	ldd	r24, Y+5	; 0x05
    33cc:	9e 81       	ldd	r25, Y+6	; 0x06
    33ce:	01 97       	sbiw	r24, 0x01	; 1
    33d0:	9e 83       	std	Y+6, r25	; 0x06
    33d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33d4:	8d 81       	ldd	r24, Y+5	; 0x05
    33d6:	9e 81       	ldd	r25, Y+6	; 0x06
    33d8:	00 97       	sbiw	r24, 0x00	; 0
    33da:	69 f7       	brne	.-38     	; 0x33b6 <main+0x1f6>
    33dc:	94 cf       	rjmp	.-216    	; 0x3306 <main+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33de:	6f 81       	ldd	r22, Y+7	; 0x07
    33e0:	78 85       	ldd	r23, Y+8	; 0x08
    33e2:	89 85       	ldd	r24, Y+9	; 0x09
    33e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    33e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ea:	dc 01       	movw	r26, r24
    33ec:	cb 01       	movw	r24, r22
    33ee:	9e 83       	std	Y+6, r25	; 0x06
    33f0:	8d 83       	std	Y+5, r24	; 0x05
    33f2:	8d 81       	ldd	r24, Y+5	; 0x05
    33f4:	9e 81       	ldd	r25, Y+6	; 0x06
    33f6:	9a 83       	std	Y+2, r25	; 0x02
    33f8:	89 83       	std	Y+1, r24	; 0x01
    33fa:	89 81       	ldd	r24, Y+1	; 0x01
    33fc:	9a 81       	ldd	r25, Y+2	; 0x02
    33fe:	01 97       	sbiw	r24, 0x01	; 1
    3400:	f1 f7       	brne	.-4      	; 0x33fe <main+0x23e>
    3402:	9a 83       	std	Y+2, r25	; 0x02
    3404:	89 83       	std	Y+1, r24	; 0x01
    3406:	7f cf       	rjmp	.-258    	; 0x3306 <main+0x146>

00003408 <displayDistance>:
}

/**
 * Function to display the distance on the LCD.
 */
void displayDistance(uint16 distance) {
    3408:	df 93       	push	r29
    340a:	cf 93       	push	r28
    340c:	00 d0       	rcall	.+0      	; 0x340e <displayDistance+0x6>
    340e:	cd b7       	in	r28, 0x3d	; 61
    3410:	de b7       	in	r29, 0x3e	; 62
    3412:	9a 83       	std	Y+2, r25	; 0x02
    3414:	89 83       	std	Y+1, r24	; 0x01
	LCD_MoveCursor(0, 0);
    3416:	80 e0       	ldi	r24, 0x00	; 0
    3418:	60 e0       	ldi	r22, 0x00	; 0
    341a:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <LCD_MoveCursor>
	LCD_DisplayString(LCD_STRING("Distance= "));
    341e:	80 e6       	ldi	r24, 0x60	; 96
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <LCD_DisplayString>
	LCD_intgerToString(distance);
    3426:	89 81       	ldd	r24, Y+1	; 0x01
    3428:	9a 81       	ldd	r25, Y+2	; 0x02
    342a:	0e 94 49 18 	call	0x3092	; 0x3092 <LCD_intgerToString>
	LCD_DisplayString(LCD_STRING(" CM    "));
    342e:	8b e6       	ldi	r24, 0x6B	; 107
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <LCD_DisplayString>
}
    3436:	0f 90       	pop	r0
    3438:	0f 90       	pop	r0
    343a:	cf 91       	pop	r28
    343c:	df 91       	pop	r29
    343e:	08 95       	ret

00003440 <handleDistanceActions>:

/**
 * Function to handle the actions based on the measured distance.
 */
void handleDistanceActions(uint16 distance) {
    3440:	df 93       	push	r29
    3442:	cf 93       	push	r28
    3444:	cd b7       	in	r28, 0x3d	; 61
    3446:	de b7       	in	r29, 0x3e	; 62
    3448:	6e 97       	sbiw	r28, 0x1e	; 30
    344a:	0f b6       	in	r0, 0x3f	; 63
    344c:	f8 94       	cli
    344e:	de bf       	out	0x3e, r29	; 62
    3450:	0f be       	out	0x3f, r0	; 63
    3452:	cd bf       	out	0x3d, r28	; 61
    3454:	9e 8f       	std	Y+30, r25	; 0x1e
    3456:	8d 8f       	std	Y+29, r24	; 0x1d
	if (distance <= 5) {
    3458:	8d 8d       	ldd	r24, Y+29	; 0x1d
    345a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    345c:	86 30       	cpi	r24, 0x06	; 6
    345e:	91 05       	cpc	r25, r1
    3460:	08 f0       	brcs	.+2      	; 0x3464 <handleDistanceActions+0x24>
    3462:	10 c1       	rjmp	.+544    	; 0x3684 <handleDistanceActions+0x244>
		LED_on(&Blue);
    3464:	84 ea       	ldi	r24, 0xA4	; 164
    3466:	91 e0       	ldi	r25, 0x01	; 1
    3468:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <LED_on>
		LED_on(&Green);
    346c:	81 ea       	ldi	r24, 0xA1	; 161
    346e:	91 e0       	ldi	r25, 0x01	; 1
    3470:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <LED_on>
		LED_on(&Red);
    3474:	87 ea       	ldi	r24, 0xA7	; 167
    3476:	91 e0       	ldi	r25, 0x01	; 1
    3478:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <LED_on>
		Buzzer_on(&Alarm);
    347c:	8a ea       	ldi	r24, 0xAA	; 170
    347e:	91 e0       	ldi	r25, 0x01	; 1
    3480:	0e 94 93 18 	call	0x3126	; 0x3126 <Buzzer_on>
    3484:	80 e0       	ldi	r24, 0x00	; 0
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	a6 e1       	ldi	r26, 0x16	; 22
    348a:	b3 e4       	ldi	r27, 0x43	; 67
    348c:	89 8f       	std	Y+25, r24	; 0x19
    348e:	9a 8f       	std	Y+26, r25	; 0x1a
    3490:	ab 8f       	std	Y+27, r26	; 0x1b
    3492:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3494:	69 8d       	ldd	r22, Y+25	; 0x19
    3496:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3498:	8b 8d       	ldd	r24, Y+27	; 0x1b
    349a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    349c:	20 e0       	ldi	r18, 0x00	; 0
    349e:	30 e0       	ldi	r19, 0x00	; 0
    34a0:	4a e7       	ldi	r20, 0x7A	; 122
    34a2:	55 e4       	ldi	r21, 0x45	; 69
    34a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34a8:	dc 01       	movw	r26, r24
    34aa:	cb 01       	movw	r24, r22
    34ac:	8d 8b       	std	Y+21, r24	; 0x15
    34ae:	9e 8b       	std	Y+22, r25	; 0x16
    34b0:	af 8b       	std	Y+23, r26	; 0x17
    34b2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34b4:	6d 89       	ldd	r22, Y+21	; 0x15
    34b6:	7e 89       	ldd	r23, Y+22	; 0x16
    34b8:	8f 89       	ldd	r24, Y+23	; 0x17
    34ba:	98 8d       	ldd	r25, Y+24	; 0x18
    34bc:	20 e0       	ldi	r18, 0x00	; 0
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	40 e8       	ldi	r20, 0x80	; 128
    34c2:	5f e3       	ldi	r21, 0x3F	; 63
    34c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34c8:	88 23       	and	r24, r24
    34ca:	2c f4       	brge	.+10     	; 0x34d6 <handleDistanceActions+0x96>
		__ticks = 1;
    34cc:	81 e0       	ldi	r24, 0x01	; 1
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	9c 8b       	std	Y+20, r25	; 0x14
    34d2:	8b 8b       	std	Y+19, r24	; 0x13
    34d4:	3f c0       	rjmp	.+126    	; 0x3554 <handleDistanceActions+0x114>
	else if (__tmp > 65535)
    34d6:	6d 89       	ldd	r22, Y+21	; 0x15
    34d8:	7e 89       	ldd	r23, Y+22	; 0x16
    34da:	8f 89       	ldd	r24, Y+23	; 0x17
    34dc:	98 8d       	ldd	r25, Y+24	; 0x18
    34de:	20 e0       	ldi	r18, 0x00	; 0
    34e0:	3f ef       	ldi	r19, 0xFF	; 255
    34e2:	4f e7       	ldi	r20, 0x7F	; 127
    34e4:	57 e4       	ldi	r21, 0x47	; 71
    34e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34ea:	18 16       	cp	r1, r24
    34ec:	4c f5       	brge	.+82     	; 0x3540 <handleDistanceActions+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34ee:	69 8d       	ldd	r22, Y+25	; 0x19
    34f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34f6:	20 e0       	ldi	r18, 0x00	; 0
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	40 e2       	ldi	r20, 0x20	; 32
    34fc:	51 e4       	ldi	r21, 0x41	; 65
    34fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3502:	dc 01       	movw	r26, r24
    3504:	cb 01       	movw	r24, r22
    3506:	bc 01       	movw	r22, r24
    3508:	cd 01       	movw	r24, r26
    350a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    350e:	dc 01       	movw	r26, r24
    3510:	cb 01       	movw	r24, r22
    3512:	9c 8b       	std	Y+20, r25	; 0x14
    3514:	8b 8b       	std	Y+19, r24	; 0x13
    3516:	0f c0       	rjmp	.+30     	; 0x3536 <handleDistanceActions+0xf6>
    3518:	80 e9       	ldi	r24, 0x90	; 144
    351a:	91 e0       	ldi	r25, 0x01	; 1
    351c:	9a 8b       	std	Y+18, r25	; 0x12
    351e:	89 8b       	std	Y+17, r24	; 0x11
    3520:	89 89       	ldd	r24, Y+17	; 0x11
    3522:	9a 89       	ldd	r25, Y+18	; 0x12
    3524:	01 97       	sbiw	r24, 0x01	; 1
    3526:	f1 f7       	brne	.-4      	; 0x3524 <handleDistanceActions+0xe4>
    3528:	9a 8b       	std	Y+18, r25	; 0x12
    352a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    352c:	8b 89       	ldd	r24, Y+19	; 0x13
    352e:	9c 89       	ldd	r25, Y+20	; 0x14
    3530:	01 97       	sbiw	r24, 0x01	; 1
    3532:	9c 8b       	std	Y+20, r25	; 0x14
    3534:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3536:	8b 89       	ldd	r24, Y+19	; 0x13
    3538:	9c 89       	ldd	r25, Y+20	; 0x14
    353a:	00 97       	sbiw	r24, 0x00	; 0
    353c:	69 f7       	brne	.-38     	; 0x3518 <handleDistanceActions+0xd8>
    353e:	14 c0       	rjmp	.+40     	; 0x3568 <handleDistanceActions+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3540:	6d 89       	ldd	r22, Y+21	; 0x15
    3542:	7e 89       	ldd	r23, Y+22	; 0x16
    3544:	8f 89       	ldd	r24, Y+23	; 0x17
    3546:	98 8d       	ldd	r25, Y+24	; 0x18
    3548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    354c:	dc 01       	movw	r26, r24
    354e:	cb 01       	movw	r24, r22
    3550:	9c 8b       	std	Y+20, r25	; 0x14
    3552:	8b 8b       	std	Y+19, r24	; 0x13
    3554:	8b 89       	ldd	r24, Y+19	; 0x13
    3556:	9c 89       	ldd	r25, Y+20	; 0x14
    3558:	98 8b       	std	Y+16, r25	; 0x10
    355a:	8f 87       	std	Y+15, r24	; 0x0f
    355c:	8f 85       	ldd	r24, Y+15	; 0x0f
    355e:	98 89       	ldd	r25, Y+16	; 0x10
    3560:	01 97       	sbiw	r24, 0x01	; 1
    3562:	f1 f7       	brne	.-4      	; 0x3560 <handleDistanceActions+0x120>
    3564:	98 8b       	std	Y+16, r25	; 0x10
    3566:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(FLASHING_DELAY);
		LED_off(&Blue);
    3568:	84 ea       	ldi	r24, 0xA4	; 164
    356a:	91 e0       	ldi	r25, 0x01	; 1
    356c:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LED_off>
		LED_off(&Green);
    3570:	81 ea       	ldi	r24, 0xA1	; 161
    3572:	91 e0       	ldi	r25, 0x01	; 1
    3574:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LED_off>
		LED_off(&Red);
    3578:	87 ea       	ldi	r24, 0xA7	; 167
    357a:	91 e0       	ldi	r25, 0x01	; 1
    357c:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LED_off>
		Buzzer_off(&Alarm);
    3580:	8a ea       	ldi	r24, 0xAA	; 170
    3582:	91 e0       	ldi	r25, 0x01	; 1
    3584:	0e 94 bb 18 	call	0x3176	; 0x3176 <Buzzer_off>
    3588:	80 e0       	ldi	r24, 0x00	; 0
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	a6 e1       	ldi	r26, 0x16	; 22
    358e:	b3 e4       	ldi	r27, 0x43	; 67
    3590:	8b 87       	std	Y+11, r24	; 0x0b
    3592:	9c 87       	std	Y+12, r25	; 0x0c
    3594:	ad 87       	std	Y+13, r26	; 0x0d
    3596:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3598:	6b 85       	ldd	r22, Y+11	; 0x0b
    359a:	7c 85       	ldd	r23, Y+12	; 0x0c
    359c:	8d 85       	ldd	r24, Y+13	; 0x0d
    359e:	9e 85       	ldd	r25, Y+14	; 0x0e
    35a0:	20 e0       	ldi	r18, 0x00	; 0
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	4a e7       	ldi	r20, 0x7A	; 122
    35a6:	55 e4       	ldi	r21, 0x45	; 69
    35a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ac:	dc 01       	movw	r26, r24
    35ae:	cb 01       	movw	r24, r22
    35b0:	8f 83       	std	Y+7, r24	; 0x07
    35b2:	98 87       	std	Y+8, r25	; 0x08
    35b4:	a9 87       	std	Y+9, r26	; 0x09
    35b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35b8:	6f 81       	ldd	r22, Y+7	; 0x07
    35ba:	78 85       	ldd	r23, Y+8	; 0x08
    35bc:	89 85       	ldd	r24, Y+9	; 0x09
    35be:	9a 85       	ldd	r25, Y+10	; 0x0a
    35c0:	20 e0       	ldi	r18, 0x00	; 0
    35c2:	30 e0       	ldi	r19, 0x00	; 0
    35c4:	40 e8       	ldi	r20, 0x80	; 128
    35c6:	5f e3       	ldi	r21, 0x3F	; 63
    35c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35cc:	88 23       	and	r24, r24
    35ce:	2c f4       	brge	.+10     	; 0x35da <handleDistanceActions+0x19a>
		__ticks = 1;
    35d0:	81 e0       	ldi	r24, 0x01	; 1
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	9e 83       	std	Y+6, r25	; 0x06
    35d6:	8d 83       	std	Y+5, r24	; 0x05
    35d8:	3f c0       	rjmp	.+126    	; 0x3658 <handleDistanceActions+0x218>
	else if (__tmp > 65535)
    35da:	6f 81       	ldd	r22, Y+7	; 0x07
    35dc:	78 85       	ldd	r23, Y+8	; 0x08
    35de:	89 85       	ldd	r24, Y+9	; 0x09
    35e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35e2:	20 e0       	ldi	r18, 0x00	; 0
    35e4:	3f ef       	ldi	r19, 0xFF	; 255
    35e6:	4f e7       	ldi	r20, 0x7F	; 127
    35e8:	57 e4       	ldi	r21, 0x47	; 71
    35ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35ee:	18 16       	cp	r1, r24
    35f0:	4c f5       	brge	.+82     	; 0x3644 <handleDistanceActions+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    35f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    35f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    35f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    35fa:	20 e0       	ldi	r18, 0x00	; 0
    35fc:	30 e0       	ldi	r19, 0x00	; 0
    35fe:	40 e2       	ldi	r20, 0x20	; 32
    3600:	51 e4       	ldi	r21, 0x41	; 65
    3602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3606:	dc 01       	movw	r26, r24
    3608:	cb 01       	movw	r24, r22
    360a:	bc 01       	movw	r22, r24
    360c:	cd 01       	movw	r24, r26
    360e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3612:	dc 01       	movw	r26, r24
    3614:	cb 01       	movw	r24, r22
    3616:	9e 83       	std	Y+6, r25	; 0x06
    3618:	8d 83       	std	Y+5, r24	; 0x05
    361a:	0f c0       	rjmp	.+30     	; 0x363a <handleDistanceActions+0x1fa>
    361c:	80 e9       	ldi	r24, 0x90	; 144
    361e:	91 e0       	ldi	r25, 0x01	; 1
    3620:	9c 83       	std	Y+4, r25	; 0x04
    3622:	8b 83       	std	Y+3, r24	; 0x03
    3624:	8b 81       	ldd	r24, Y+3	; 0x03
    3626:	9c 81       	ldd	r25, Y+4	; 0x04
    3628:	01 97       	sbiw	r24, 0x01	; 1
    362a:	f1 f7       	brne	.-4      	; 0x3628 <handleDistanceActions+0x1e8>
    362c:	9c 83       	std	Y+4, r25	; 0x04
    362e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3630:	8d 81       	ldd	r24, Y+5	; 0x05
    3632:	9e 81       	ldd	r25, Y+6	; 0x06
    3634:	01 97       	sbiw	r24, 0x01	; 1
    3636:	9e 83       	std	Y+6, r25	; 0x06
    3638:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    363a:	8d 81       	ldd	r24, Y+5	; 0x05
    363c:	9e 81       	ldd	r25, Y+6	; 0x06
    363e:	00 97       	sbiw	r24, 0x00	; 0
    3640:	69 f7       	brne	.-38     	; 0x361c <handleDistanceActions+0x1dc>
    3642:	14 c0       	rjmp	.+40     	; 0x366c <handleDistanceActions+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3644:	6f 81       	ldd	r22, Y+7	; 0x07
    3646:	78 85       	ldd	r23, Y+8	; 0x08
    3648:	89 85       	ldd	r24, Y+9	; 0x09
    364a:	9a 85       	ldd	r25, Y+10	; 0x0a
    364c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3650:	dc 01       	movw	r26, r24
    3652:	cb 01       	movw	r24, r22
    3654:	9e 83       	std	Y+6, r25	; 0x06
    3656:	8d 83       	std	Y+5, r24	; 0x05
    3658:	8d 81       	ldd	r24, Y+5	; 0x05
    365a:	9e 81       	ldd	r25, Y+6	; 0x06
    365c:	9a 83       	std	Y+2, r25	; 0x02
    365e:	89 83       	std	Y+1, r24	; 0x01
    3660:	89 81       	ldd	r24, Y+1	; 0x01
    3662:	9a 81       	ldd	r25, Y+2	; 0x02
    3664:	01 97       	sbiw	r24, 0x01	; 1
    3666:	f1 f7       	brne	.-4      	; 0x3664 <handleDistanceActions+0x224>
    3668:	9a 83       	std	Y+2, r25	; 0x02
    366a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(FLASHING_DELAY);

		displayDistance(distance);
    366c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    366e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3670:	0e 94 04 1a 	call	0x3408	; 0x3408 <displayDistance>
		LCD_DisplayStringRowColumn(1, 0, LCD_STRING("      STOP      "));
    3674:	23 e7       	ldi	r18, 0x73	; 115
    3676:	30 e0       	ldi	r19, 0x00	; 0
    3678:	81 e0       	ldi	r24, 0x01	; 1
    367a:	60 e0       	ldi	r22, 0x00	; 0
    367c:	a9 01       	movw	r20, r18
    367e:	0e 94 30 18 	call	0x3060	; 0x3060 <LCD_DisplayStringRowColumn>
    3682:	69 c0       	rjmp	.+210    	; 0x3756 <handleDistanceActions+0x316>
	} else if (distance <= 10) {
    3684:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3686:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3688:	8b 30       	cpi	r24, 0x0B	; 11
    368a:	91 05       	cpc	r25, r1
    368c:	e0 f4       	brcc	.+56     	; 0x36c6 <handleDistanceActions+0x286>
		Buzzer_off(&Alarm);
    368e:	8a ea       	ldi	r24, 0xAA	; 170
    3690:	91 e0       	ldi	r25, 0x01	; 1
    3692:	0e 94 bb 18 	call	0x3176	; 0x3176 <Buzzer_off>
		LED_on(&Blue);
    3696:	84 ea       	ldi	r24, 0xA4	; 164
    3698:	91 e0       	ldi	r25, 0x01	; 1
    369a:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <LED_on>
		LED_on(&Green);
    369e:	81 ea       	ldi	r24, 0xA1	; 161
    36a0:	91 e0       	ldi	r25, 0x01	; 1
    36a2:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <LED_on>
		LED_on(&Red);
    36a6:	87 ea       	ldi	r24, 0xA7	; 167
    36a8:	91 e0       	ldi	r25, 0x01	; 1
    36aa:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <LED_on>
		displayDistance(distance);
    36ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    36b2:	0e 94 04 1a 	call	0x3408	; 0x3408 <displayDistance>
		LCD_DisplayStringRowColumn(1, 0, LCD_STRING("                "));
    36b6:	24 e8       	ldi	r18, 0x84	; 132
    36b8:	30 e0       	ldi	r19, 0x00	; 0
    36ba:	81 e0       	ldi	r24, 0x01	; 1
    36bc:	60 e0       	ldi	r22, 0x00	; 0
    36be:	a9 01       	movw	r20, r18
    36c0:	0e 94 30 18 	call	0x3060	; 0x3060 <LCD_DisplayStringRowColumn>
    36c4:	48 c0       	rjmp	.+144    	; 0x3756 <handleDistanceActions+0x316>
	} else if (distance <= 15) {
    36c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    36ca:	80 31       	cpi	r24, 0x10	; 16
    36cc:	91 05       	cpc	r25, r1
    36ce:	a8 f4       	brcc	.+42     	; 0x36fa <handleDistanceActions+0x2ba>
		Buzzer_off(&Alarm);
    36d0:	8a ea       	ldi	r24, 0xAA	; 170
    36d2:	91 e0       	ldi	r25, 0x01	; 1
    36d4:	0e 94 bb 18 	call	0x3176	; 0x3176 <Buzzer_off>
		LED_off(&Blue);
    36d8:	84 ea       	ldi	r24, 0xA4	; 164
    36da:	91 e0       	ldi	r25, 0x01	; 1
    36dc:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LED_off>
		LED_on(&Green);
    36e0:	81 ea       	ldi	r24, 0xA1	; 161
    36e2:	91 e0       	ldi	r25, 0x01	; 1
    36e4:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <LED_on>
		LED_on(&Red);
    36e8:	87 ea       	ldi	r24, 0xA7	; 167
    36ea:	91 e0       	ldi	r25, 0x01	; 1
    36ec:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <LED_on>
		displayDistance(distance);
    36f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    36f4:	0e 94 04 1a 	call	0x3408	; 0x3408 <displayDistance>
    36f8:	2e c0       	rjmp	.+92     	; 0x3756 <handleDistanceActions+0x316>
	} else if (distance <= 20) {
    36fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    36fe:	85 31       	cpi	r24, 0x15	; 21
    3700:	91 05       	cpc	r25, r1
    3702:	a8 f4       	brcc	.+42     	; 0x372e <handleDistanceActions+0x2ee>
		Buzzer_off(&Alarm);
    3704:	8a ea       	ldi	r24, 0xAA	; 170
    3706:	91 e0       	ldi	r25, 0x01	; 1
    3708:	0e 94 bb 18 	call	0x3176	; 0x3176 <Buzzer_off>
		LED_off(&Blue);
    370c:	84 ea       	ldi	r24, 0xA4	; 164
    370e:	91 e0       	ldi	r25, 0x01	; 1
    3710:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LED_off>
		LED_off(&Green);
    3714:	81 ea       	ldi	r24, 0xA1	; 161
    3716:	91 e0       	ldi	r25, 0x01	; 1
    3718:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LED_off>
		LED_on(&Red);
    371c:	87 ea       	ldi	r24, 0xA7	; 167
    371e:	91 e0       	ldi	r25, 0x01	; 1
    3720:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <LED_on>
		displayDistance(distance);
    3724:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3726:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3728:	0e 94 04 1a 	call	0x3408	; 0x3408 <displayDistance>
    372c:	14 c0       	rjmp	.+40     	; 0x3756 <handleDistanceActions+0x316>
	} else {
		Buzzer_off(&Alarm);
    372e:	8a ea       	ldi	r24, 0xAA	; 170
    3730:	91 e0       	ldi	r25, 0x01	; 1
    3732:	0e 94 bb 18 	call	0x3176	; 0x3176 <Buzzer_off>
		LED_off(&Blue);
    3736:	84 ea       	ldi	r24, 0xA4	; 164
    3738:	91 e0       	ldi	r25, 0x01	; 1
    373a:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LED_off>
		LED_off(&Green);
    373e:	81 ea       	ldi	r24, 0xA1	; 161
    3740:	91 e0       	ldi	r25, 0x01	; 1
    3742:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LED_off>
		LED_off(&Red);
    3746:	87 ea       	ldi	r24, 0xA7	; 167
    3748:	91 e0       	ldi	r25, 0x01	; 1
    374a:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LED_off>
		displayDistance(distance);
    374e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3750:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3752:	0e 94 04 1a 	call	0x3408	; 0x3408 <displayDistance>
	}
}
    3756:	6e 96       	adiw	r28, 0x1e	; 30
    3758:	0f b6       	in	r0, 0x3f	; 63
    375a:	f8 94       	cli
    375c:	de bf       	out	0x3e, r29	; 62
    375e:	0f be       	out	0x3f, r0	; 63
    3760:	cd bf       	out	0x3d, r28	; 61
    3762:	cf 91       	pop	r28
    3764:	df 91       	pop	r29
    3766:	08 95       	ret

00003768 <__prologue_saves__>:
    3768:	2f 92       	push	r2
    376a:	3f 92       	push	r3
    376c:	4f 92       	push	r4
    376e:	5f 92       	push	r5
    3770:	6f 92       	push	r6
    3772:	7f 92       	push	r7
    3774:	8f 92       	push	r8
    3776:	9f 92       	push	r9
    3778:	af 92       	push	r10
    377a:	bf 92       	push	r11
    377c:	cf 92       	push	r12
    377e:	df 92       	push	r13
    3780:	ef 92       	push	r14
    3782:	ff 92       	push	r15
    3784:	0f 93       	push	r16
    3786:	1f 93       	push	r17
    3788:	cf 93       	push	r28
    378a:	df 93       	push	r29
    378c:	cd b7       	in	r28, 0x3d	; 61
    378e:	de b7       	in	r29, 0x3e	; 62
    3790:	ca 1b       	sub	r28, r26
    3792:	db 0b       	sbc	r29, r27
    3794:	0f b6       	in	r0, 0x3f	; 63
    3796:	f8 94       	cli
    3798:	de bf       	out	0x3e, r29	; 62
    379a:	0f be       	out	0x3f, r0	; 63
    379c:	cd bf       	out	0x3d, r28	; 61
    379e:	09 94       	ijmp

000037a0 <__epilogue_restores__>:
    37a0:	2a 88       	ldd	r2, Y+18	; 0x12
    37a2:	39 88       	ldd	r3, Y+17	; 0x11
    37a4:	48 88       	ldd	r4, Y+16	; 0x10
    37a6:	5f 84       	ldd	r5, Y+15	; 0x0f
    37a8:	6e 84       	ldd	r6, Y+14	; 0x0e
    37aa:	7d 84       	ldd	r7, Y+13	; 0x0d
    37ac:	8c 84       	ldd	r8, Y+12	; 0x0c
    37ae:	9b 84       	ldd	r9, Y+11	; 0x0b
    37b0:	aa 84       	ldd	r10, Y+10	; 0x0a
    37b2:	b9 84       	ldd	r11, Y+9	; 0x09
    37b4:	c8 84       	ldd	r12, Y+8	; 0x08
    37b6:	df 80       	ldd	r13, Y+7	; 0x07
    37b8:	ee 80       	ldd	r14, Y+6	; 0x06
    37ba:	fd 80       	ldd	r15, Y+5	; 0x05
    37bc:	0c 81       	ldd	r16, Y+4	; 0x04
    37be:	1b 81       	ldd	r17, Y+3	; 0x03
    37c0:	aa 81       	ldd	r26, Y+2	; 0x02
    37c2:	b9 81       	ldd	r27, Y+1	; 0x01
    37c4:	ce 0f       	add	r28, r30
    37c6:	d1 1d       	adc	r29, r1
    37c8:	0f b6       	in	r0, 0x3f	; 63
    37ca:	f8 94       	cli
    37cc:	de bf       	out	0x3e, r29	; 62
    37ce:	0f be       	out	0x3f, r0	; 63
    37d0:	cd bf       	out	0x3d, r28	; 61
    37d2:	ed 01       	movw	r28, r26
    37d4:	08 95       	ret

000037d6 <itoa>:
    37d6:	fb 01       	movw	r30, r22
    37d8:	9f 01       	movw	r18, r30
    37da:	e8 94       	clt
    37dc:	42 30       	cpi	r20, 0x02	; 2
    37de:	c4 f0       	brlt	.+48     	; 0x3810 <itoa+0x3a>
    37e0:	45 32       	cpi	r20, 0x25	; 37
    37e2:	b4 f4       	brge	.+44     	; 0x3810 <itoa+0x3a>
    37e4:	4a 30       	cpi	r20, 0x0A	; 10
    37e6:	29 f4       	brne	.+10     	; 0x37f2 <itoa+0x1c>
    37e8:	97 fb       	bst	r25, 7
    37ea:	1e f4       	brtc	.+6      	; 0x37f2 <itoa+0x1c>
    37ec:	90 95       	com	r25
    37ee:	81 95       	neg	r24
    37f0:	9f 4f       	sbci	r25, 0xFF	; 255
    37f2:	64 2f       	mov	r22, r20
    37f4:	77 27       	eor	r23, r23
    37f6:	0e 94 1c 1c 	call	0x3838	; 0x3838 <__udivmodhi4>
    37fa:	80 5d       	subi	r24, 0xD0	; 208
    37fc:	8a 33       	cpi	r24, 0x3A	; 58
    37fe:	0c f0       	brlt	.+2      	; 0x3802 <itoa+0x2c>
    3800:	89 5d       	subi	r24, 0xD9	; 217
    3802:	81 93       	st	Z+, r24
    3804:	cb 01       	movw	r24, r22
    3806:	00 97       	sbiw	r24, 0x00	; 0
    3808:	a1 f7       	brne	.-24     	; 0x37f2 <itoa+0x1c>
    380a:	16 f4       	brtc	.+4      	; 0x3810 <itoa+0x3a>
    380c:	5d e2       	ldi	r21, 0x2D	; 45
    380e:	51 93       	st	Z+, r21
    3810:	10 82       	st	Z, r1
    3812:	c9 01       	movw	r24, r18
    3814:	0c 94 0c 1c 	jmp	0x3818	; 0x3818 <strrev>

00003818 <strrev>:
    3818:	dc 01       	movw	r26, r24
    381a:	fc 01       	movw	r30, r24
    381c:	67 2f       	mov	r22, r23
    381e:	71 91       	ld	r23, Z+
    3820:	77 23       	and	r23, r23
    3822:	e1 f7       	brne	.-8      	; 0x381c <strrev+0x4>
    3824:	32 97       	sbiw	r30, 0x02	; 2
    3826:	04 c0       	rjmp	.+8      	; 0x3830 <strrev+0x18>
    3828:	7c 91       	ld	r23, X
    382a:	6d 93       	st	X+, r22
    382c:	70 83       	st	Z, r23
    382e:	62 91       	ld	r22, -Z
    3830:	ae 17       	cp	r26, r30
    3832:	bf 07       	cpc	r27, r31
    3834:	c8 f3       	brcs	.-14     	; 0x3828 <strrev+0x10>
    3836:	08 95       	ret

00003838 <__udivmodhi4>:
    3838:	aa 1b       	sub	r26, r26
    383a:	bb 1b       	sub	r27, r27
    383c:	51 e1       	ldi	r21, 0x11	; 17
    383e:	07 c0       	rjmp	.+14     	; 0x384e <__udivmodhi4_ep>

00003840 <__udivmodhi4_loop>:
    3840:	aa 1f       	adc	r26, r26
    3842:	bb 1f       	adc	r27, r27
    3844:	a6 17       	cp	r26, r22
    3846:	b7 07       	cpc	r27, r23
    3848:	10 f0       	brcs	.+4      	; 0x384e <__udivmodhi4_ep>
    384a:	a6 1b       	sub	r26, r22
    384c:	b7 0b       	sbc	r27, r23

0000384e <__udivmodhi4_ep>:
    384e:	88 1f       	adc	r24, r24
    3850:	99 1f       	adc	r25, r25
    3852:	5a 95       	dec	r21
    3854:	a9 f7       	brne	.-22     	; 0x3840 <__udivmodhi4_loop>
    3856:	80 95       	com	r24
    3858:	90 95       	com	r25
    385a:	bc 01       	movw	r22, r24
    385c:	cd 01       	movw	r24, r26
    385e:	08 95       	ret

00003860 <_exit>:
    3860:	f8 94       	cli

00003862 <__stop_program>:
    3862:	ff cf       	rjmp	.-2      	; 0x3862 <__stop_program>
